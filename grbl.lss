
grbl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  0000619e  00006232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000619e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000530  00800136  00800136  00006268  2**0
                  ALLOC
  3 .stab         000058a4  00000000  00000000  00006268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cc  00000000  00000000  0000bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000007c8  00000000  00000000  0000cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011e3  00000000  00000000  0000d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ae32  00000000  00000000  0000e983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e52  00000000  00000000  000197b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000943e  00000000  00000000  0001c607  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bd0  00000000  00000000  00025a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000043a8  00000000  00000000  00026618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006462  00000000  00000000  0002a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001311  00000000  00000000  00030e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009f0  00000000  00000000  00032133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       0:	67 c2       	rjmp	.+1230   	; 0x4d0 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	81 c2       	rjmp	.+1282   	; 0x508 <__bad_interrupt>
       6:	00 00       	nop
       8:	7f c2       	rjmp	.+1278   	; 0x508 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c2       	rjmp	.+1274   	; 0x508 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c2       	rjmp	.+1270   	; 0x508 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c2       	rjmp	.+1266   	; 0x508 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c2       	rjmp	.+1262   	; 0x508 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c2       	rjmp	.+1258   	; 0x508 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c2       	rjmp	.+1254   	; 0x508 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c2       	rjmp	.+1250   	; 0x508 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__vector_10>
      2c:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__vector_11>
      30:	6b c2       	rjmp	.+1238   	; 0x508 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c2       	rjmp	.+1234   	; 0x508 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c2       	rjmp	.+1230   	; 0x508 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c2       	rjmp	.+1226   	; 0x508 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c2       	rjmp	.+1222   	; 0x508 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__vector_17>
      48:	5f c2       	rjmp	.+1214   	; 0x508 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c2       	rjmp	.+1210   	; 0x508 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c2       	rjmp	.+1206   	; 0x508 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c2       	rjmp	.+1202   	; 0x508 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c2       	rjmp	.+1198   	; 0x508 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c2       	rjmp	.+1194   	; 0x508 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c2       	rjmp	.+1190   	; 0x508 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c2       	rjmp	.+1186   	; 0x508 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c2       	rjmp	.+1182   	; 0x508 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c2       	rjmp	.+1178   	; 0x508 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c2       	rjmp	.+1174   	; 0x508 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c2       	rjmp	.+1170   	; 0x508 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c2       	rjmp	.+1166   	; 0x508 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c2       	rjmp	.+1162   	; 0x508 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c2       	rjmp	.+1158   	; 0x508 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c2       	rjmp	.+1154   	; 0x508 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c2       	rjmp	.+1150   	; 0x508 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_35>
      90:	3b c2       	rjmp	.+1142   	; 0x508 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c2       	rjmp	.+1138   	; 0x508 <__bad_interrupt>
      96:	00 00       	nop
      98:	37 c2       	rjmp	.+1134   	; 0x508 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	35 c2       	rjmp	.+1130   	; 0x508 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	33 c2       	rjmp	.+1126   	; 0x508 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	31 c2       	rjmp	.+1122   	; 0x508 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2f c2       	rjmp	.+1118   	; 0x508 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 0d       	add	r19, r15

000000f7 <__c.3847>:
      f7:	0d 0a 27 24 27 20 74 6f 20 64 75 6d 70 20 63 75     ..'$' to dump cu
     107:	72 72 65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a     rrent settings..
     117:	00                                                  .

00000118 <__c.3845>:
     118:	0d 0a 47 72 62 6c 20 00                             ..Grbl .

00000120 <__c.1962>:
     120:	0d 0a 00                                            ...

00000123 <__c.1959>:
     123:	49 6e 76 61 6c 69 64 20 63 6f 6d 6d 61 6e 64 0d     Invalid command.
     133:	0a 00                                               ..

00000135 <__c.1956>:
     135:	4d 6f 64 61 6c 20 67 72 6f 75 70 20 76 69 6f 6c     Modal group viol
     145:	61 74 69 6f 6e 0d 0a 00                             ation...

0000014d <__c.1953>:
     14d:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
     15d:	72 72 6f 72 0d 0a 00                                rror...

00000164 <__c.1950>:
     164:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
     174:	65 6d 65 6e 74 0d 0a 00                             ement...

0000017c <__c.1947>:
     17c:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
     18c:	20 6c 65 74 74 65 72 0d 0a 00                        letter...

00000196 <__c.1943>:
     196:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
     1a6:	74 0d 0a 00                                         t...

000001aa <__c.1940>:
     1aa:	65 72 72 6f 72 3a 20 00                             error: .

000001b2 <__c.1938>:
     1b2:	6f 6b 0d 0a 00                                      ok...

000001b7 <__c.1971>:
     1b7:	0d 0a 27 24 27 20 74 6f 20 64 75 6d 70 20 63 75     ..'$' to dump cu
     1c7:	72 72 65 6e 74 20 73 65 74 74 69 6e 67 73 0d 0a     rrent settings..
     1d7:	00                                                  .

000001d8 <__c.1969>:
     1d8:	0d 0a 47 72 62 6c 20 30 2e 38 61 00                 ..Grbl 0.8a.

000001e4 <__c.1780>:
     1e4:	57 61 72 6e 69 6e 67 3a 20 46 61 69 6c 65 64 20     Warning: Failed 
     1f4:	74 6f 20 72 65 61 64 20 45 45 50 52 4f 4d 20 73     to read EEPROM s
     204:	65 74 74 69 6e 67 73 2e 20 55 73 69 6e 67 20 64     ettings. Using d
     214:	65 66 61 75 6c 74 73 2e 0d 0a 00                    efaults....

0000021f <__c.1776>:
     21f:	53 74 6f 72 65 64 20 6e 65 77 20 73 65 74 74 69     Stored new setti
     22f:	6e 67 0d 0a 00                                      ng...

00000234 <__c.1774>:
     234:	55 6e 6b 6e 6f 77 6e 20 70 61 72 61 6d 65 74 65     Unknown paramete
     244:	72 0d 0a 00                                         r...

00000248 <__c.1765>:
     248:	53 74 65 70 20 70 75 6c 73 65 20 6d 75 73 74 20     Step pulse must 
     258:	62 65 20 3e 3d 20 33 20 6d 69 63 72 6f 73 65 63     be >= 3 microsec
     268:	6f 6e 64 73 0d 0a 00                                onds...

0000026f <__c.1761>:
     26f:	53 74 65 70 73 2f 6d 6d 20 6d 75 73 74 20 62 65     Steps/mm must be
     27f:	20 3e 20 30 2e 30 0d 0a 00                           > 0.0...

00000288 <__c.1741>:
     288:	0d 0a 27 24 78 3d 76 61 6c 75 65 27 20 74 6f 20     ..'$x=value' to 
     298:	73 65 74 20 70 61 72 61 6d 65 74 65 72 20 6f 72     set parameter or
     2a8:	20 6a 75 73 74 20 27 24 27 20 74 6f 20 64 75 6d      just '$' to dum
     2b8:	70 20 63 75 72 72 65 6e 74 20 73 65 74 74 69 6e     p current settin
     2c8:	67 73 0d 0a 00                                      gs...

000002cd <__c.1739>:
     2cd:	20 28 63 6f 72 6e 65 72 69 6e 67 20 6a 75 6e 63      (cornering junc
     2dd:	74 69 6f 6e 20 64 65 76 69 61 74 69 6f 6e 20 69     tion deviation i
     2ed:	6e 20 6d 6d 29 00                                   n mm).

000002f3 <__c.1737>:
     2f3:	20 28 61 63 63 65 6c 65 72 61 74 69 6f 6e 20 69      (acceleration i
     303:	6e 20 6d 6d 2f 73 65 63 5e 32 29 0d 0a 24 39 20     n mm/sec^2)..$9 
     313:	3d 20 00                                            = .

00000316 <__c.1735>:
     316:	29 0d 0a 24 38 20 3d 20 00                          )..$8 = .

0000031f <__c.1733>:
     31f:	20 28 73 74 65 70 20 70 6f 72 74 20 69 6e 76 65      (step port inve
     32f:	72 74 20 6d 61 73 6b 2e 20 62 69 6e 61 72 79 20     rt mask. binary 
     33f:	3d 20 00                                            = .

00000342 <__c.1731>:
     342:	20 28 6d 6d 2f 61 72 63 20 73 65 67 6d 65 6e 74      (mm/arc segment
     352:	29 0d 0a 24 37 20 3d 20 00                          )..$7 = .

0000035b <__c.1729>:
     35b:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     36b:	20 73 65 65 6b 20 72 61 74 65 29 0d 0a 24 36 20      seek rate)..$6 
     37b:	3d 20 00                                            = .

0000037e <__c.1727>:
     37e:	20 28 6d 6d 2f 6d 69 6e 20 64 65 66 61 75 6c 74      (mm/min default
     38e:	20 66 65 65 64 20 72 61 74 65 29 0d 0a 24 35 20      feed rate)..$5 
     39e:	3d 20 00                                            = .

000003a1 <__c.1725>:
     3a1:	20 28 6d 69 63 72 6f 73 65 63 6f 6e 64 73 20 73      (microseconds s
     3b1:	74 65 70 20 70 75 6c 73 65 29 0d 0a 24 34 20 3d     tep pulse)..$4 =
     3c1:	20 00                                                .

000003c3 <__c.1723>:
     3c3:	20 28 73 74 65 70 73 2f 6d 6d 20 7a 29 0d 0a 24      (steps/mm z)..$
     3d3:	33 20 3d 20 00                                      3 = .

000003d8 <__c.1721>:
     3d8:	20 28 73 74 65 70 73 2f 6d 6d 20 79 29 0d 0a 24      (steps/mm y)..$
     3e8:	32 20 3d 20 00                                      2 = .

000003ed <__c.1719>:
     3ed:	20 28 73 74 65 70 73 2f 6d 6d 20 78 29 0d 0a 24      (steps/mm x)..$
     3fd:	31 20 3d 20 00                                      1 = .

00000402 <__c.1717>:
     402:	24 30 20 3d 20 00                                   $0 = .

00000408 <DeviceDescriptor>:
     408:	12 01 10 01 02 00 00 08 41 23 36 80 01 00 01 02     ........A#6.....
     418:	dc 01                                               ..

0000041a <ConfigurationDescriptor>:
     41a:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............
     42a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     43a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     44a:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000458 <LanguageString>:
     458:	04 03 09 04                                         ....

0000045c <ManufacturerString>:
     45c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     46c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000476 <ProductString>:
     476:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     486:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000494 <pstr_inf>:
     494:	49 4e 46                                            INF

00000497 <pstr_inity>:
     497:	49 4e 49 54 59                                      INITY

0000049c <pstr_nan>:
     49c:	4e 41 4e                                            NAN

0000049f <pwr_m10>:
     49f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     4af:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000004b7 <pwr_p10>:
     4b7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     4c7:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000004d0 <__ctors_end>:
     4d0:	11 24       	eor	r1, r1
     4d2:	1f be       	out	0x3f, r1	; 63
     4d4:	cf ef       	ldi	r28, 0xFF	; 255
     4d6:	da e0       	ldi	r29, 0x0A	; 10
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	cd bf       	out	0x3d, r28	; 61

000004dc <__do_copy_data>:
     4dc:	11 e0       	ldi	r17, 0x01	; 1
     4de:	a0 e0       	ldi	r26, 0x00	; 0
     4e0:	b1 e0       	ldi	r27, 0x01	; 1
     4e2:	ee e9       	ldi	r30, 0x9E	; 158
     4e4:	f1 e6       	ldi	r31, 0x61	; 97
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__do_copy_data+0x10>
     4e8:	05 90       	lpm	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	a6 33       	cpi	r26, 0x36	; 54
     4ee:	b1 07       	cpc	r27, r17
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <__do_copy_data+0xc>

000004f2 <__do_clear_bss>:
     4f2:	16 e0       	ldi	r17, 0x06	; 6
     4f4:	a6 e3       	ldi	r26, 0x36	; 54
     4f6:	b1 e0       	ldi	r27, 0x01	; 1
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <.do_clear_bss_start>

000004fa <.do_clear_bss_loop>:
     4fa:	1d 92       	st	X+, r1

000004fc <.do_clear_bss_start>:
     4fc:	a6 36       	cpi	r26, 0x66	; 102
     4fe:	b1 07       	cpc	r27, r17
     500:	e1 f7       	brne	.-8      	; 0x4fa <.do_clear_bss_loop>
     502:	03 d0       	rcall	.+6      	; 0x50a <main>
     504:	0c 94 cd 30 	jmp	0x619a	; 0x619a <_exit>

00000508 <__bad_interrupt>:
     508:	7b cd       	rjmp	.-1290   	; 0x0 <__vectors>

0000050a <main>:

// Declare system global variable structure
system_t sys;

int main(void)
{
     50a:	2f 92       	push	r2
     50c:	3f 92       	push	r3
     50e:	4f 92       	push	r4
     510:	5f 92       	push	r5
     512:	6f 92       	push	r6
     514:	7f 92       	push	r7
     516:	8f 92       	push	r8
     518:	9f 92       	push	r9
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	df 93       	push	r29
     52c:	cf 93       	push	r28
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2c 97       	sbiw	r28, 0x0c	; 12
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61


  st_init(); // Setup stepper pins and interrupt timers
     53e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <st_init>

  // Initialize system
  serial_init(); // Setup serial baud rate and interrupts
     542:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <serial_init>

  memset(&sys, 0, sizeof(sys));  // Clear all system variables
     546:	ea e0       	ldi	r30, 0x0A	; 10
     548:	f6 e0       	ldi	r31, 0x06	; 6
     54a:	8a e2       	ldi	r24, 0x2A	; 42
     54c:	df 01       	movw	r26, r30
     54e:	1d 92       	st	X+, r1
     550:	8a 95       	dec	r24
     552:	e9 f7       	brne	.-6      	; 0x54e <main+0x44>
  sys.abort = true;   // Set abort to complete initialization
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 0a 06 	sts	0x060A, r24
  for(;;) {

    // Execute system reset upon a system abort, where the main program will return to this loop.
    // Once here, it is safe to re-initialize the system. At startup, the system will automatically
    // reset to finish the initialization process.
    if (sys.abort) {
     55a:	80 91 0a 06 	lds	r24, 0x060A
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <main+0x5a>
     562:	67 c0       	rjmp	.+206    	; 0x632 <main+0x128>
     564:	60 90 0d 06 	lds	r6, 0x060D
     568:	70 90 0e 06 	lds	r7, 0x060E
     56c:	80 90 0f 06 	lds	r8, 0x060F
     570:	90 90 10 06 	lds	r9, 0x0610
     574:	20 90 11 06 	lds	r2, 0x0611
     578:	30 90 12 06 	lds	r3, 0x0612
     57c:	40 90 13 06 	lds	r4, 0x0613
     580:	50 90 14 06 	lds	r5, 0x0614
     584:	a0 90 15 06 	lds	r10, 0x0615
     588:	b0 90 16 06 	lds	r11, 0x0616
     58c:	c0 90 17 06 	lds	r12, 0x0617
     590:	d0 90 18 06 	lds	r13, 0x0618
      // releases will auto-reset the machine position back to [0,0,0] if an abort is used while
      // grbl is moving the machine.
      int32_t last_position[3];
      double last_coord_system[N_COORDINATE_SYSTEM][3];
      memcpy(last_position, sys.position, sizeof(sys.position)); // last_position[] = sys.position[]
      memcpy(last_coord_system, sys.coord_system, sizeof(sys.coord_system)); // last_coord_system[] = sys.coord_system[]
     594:	de 01       	movw	r26, r28
     596:	11 96       	adiw	r26, 0x01	; 1
     598:	ea e1       	ldi	r30, 0x1A	; 26
     59a:	f6 e0       	ldi	r31, 0x06	; 6
     59c:	8c e0       	ldi	r24, 0x0C	; 12
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	81 50       	subi	r24, 0x01	; 1
     5a4:	e1 f7       	brne	.-8      	; 0x59e <main+0x94>

      // Reset system.
      memset(&sys, 0, sizeof(sys)); // Clear all system variables
     5a6:	ea e0       	ldi	r30, 0x0A	; 10
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	11 92       	st	Z+, r1
     5ae:	8a 95       	dec	r24
     5b0:	e9 f7       	brne	.-6      	; 0x5ac <main+0xa2>
      serial_reset_read_buffer();
     5b2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <serial_reset_read_buffer>
      settings_init(); // Load grbl settings from EEPROM
     5b6:	0e 94 f6 18 	call	0x31ec	; 0x31ec <settings_init>
      protocol_init(); // Clear incoming line data
     5ba:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <protocol_init>
      plan_init(); // Clear block buffer and planner variables
     5be:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <plan_init>
      gc_init(); // Set g-code parser to default state
     5c2:	93 d4       	rcall	.+2342   	; 0xeea <gc_init>
      spindle_init();
     5c4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <spindle_init>
      limits_init();
     5c8:	0e 94 06 22 	call	0x440c	; 0x440c <limits_init>
      st_reset(); // Clear stepper subsystem variables.
     5cc:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <st_reset>
     5d0:	60 92 0d 06 	sts	0x060D, r6
     5d4:	70 92 0e 06 	sts	0x060E, r7
     5d8:	80 92 0f 06 	sts	0x060F, r8
     5dc:	90 92 10 06 	sts	0x0610, r9
     5e0:	20 92 11 06 	sts	0x0611, r2
     5e4:	30 92 12 06 	sts	0x0612, r3
     5e8:	40 92 13 06 	sts	0x0613, r4
     5ec:	50 92 14 06 	sts	0x0614, r5
     5f0:	a0 92 15 06 	sts	0x0615, r10
     5f4:	b0 92 16 06 	sts	0x0616, r11
     5f8:	c0 92 17 06 	sts	0x0617, r12
     5fc:	d0 92 18 06 	sts	0x0618, r13

      // Reload last known machine position and work systems. G92 coordinate offsets are reset.
      memcpy(sys.position, last_position, sizeof(last_position)); // sys.position[] = last_position[]
      memcpy(sys.coord_system, last_coord_system, sizeof(last_coord_system)); // sys.coord_system[] = last_coord_system[]
     600:	aa e1       	ldi	r26, 0x1A	; 26
     602:	b6 e0       	ldi	r27, 0x06	; 6
     604:	fe 01       	movw	r30, r28
     606:	31 96       	adiw	r30, 0x01	; 1
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	e1 f7       	brne	.-8      	; 0x60a <main+0x100>
      gc_set_current_position(last_position[X_AXIS],last_position[Y_AXIS],last_position[Z_AXIS]);
     612:	c4 01       	movw	r24, r8
     614:	b3 01       	movw	r22, r6
     616:	a2 01       	movw	r20, r4
     618:	91 01       	movw	r18, r2
     61a:	86 01       	movw	r16, r12
     61c:	75 01       	movw	r14, r10
     61e:	84 d4       	rcall	.+2312   	; 0xf28 <gc_set_current_position>
      plan_set_current_position(last_position[X_AXIS],last_position[Y_AXIS],last_position[Z_AXIS]);
     620:	c4 01       	movw	r24, r8
     622:	b3 01       	movw	r22, r6
     624:	a2 01       	movw	r20, r4
     626:	91 01       	movw	r18, r2
     628:	0e 94 1e 21 	call	0x423c	; 0x423c <plan_set_current_position>

      // Set system runtime defaults
      // TODO: Eventual move to EEPROM from config.h when all of the new settings are worked out.
      // Mainly to avoid having to maintain several different versions.
      #ifdef CYCLE_AUTO_START
        sys.auto_start = true;
     62c:	a1 e0       	ldi	r26, 0x01	; 1
     62e:	a0 93 0c 06 	sts	0x060C, r26
      #endif
      // TODO: Install G20/G21 unit default into settings and load appropriate settings.
    }

    protocol_execute_runtime();
     632:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <protocol_execute_runtime>
    serial_tick();
     636:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <serial_tick>

  }
     63a:	8f cf       	rjmp	.-226    	; 0x55a <main+0x50>

0000063c <mc_line>:
// TODO: Check for a better way to avoid having to push the arguments twice for non-backlash cases.
// However, this keeps the memory requirements lower since it doesn't have to call and hold two 
// plan_buffer_lines in memory. Grbl only has to retain the original line input variables during a
// backlash segment(s).
void mc_line(double x, double y, double z, double feed_rate, uint8_t invert_feed_rate)
{
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	8f 92       	push	r8
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <mc_line+0x20>
     65c:	00 d0       	rcall	.+0      	; 0x65e <mc_line+0x22>
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	69 83       	std	Y+1, r22	; 0x01
     664:	7a 83       	std	Y+2, r23	; 0x02
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	9c 83       	std	Y+4, r25	; 0x04
     66a:	29 01       	movw	r4, r18
     66c:	3a 01       	movw	r6, r20
  // the planner handle the position corrections. The latter may get complicated.

  // If the buffer is full: good! That means we are well ahead of the robot. 
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_runtime(); // Check for any run-time commands
     66e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <protocol_execute_runtime>
    if (sys.abort) { return; } // Bail, if system abort.
     672:	80 91 0a 06 	lds	r24, 0x060A
     676:	88 23       	and	r24, r24
     678:	91 f4       	brne	.+36     	; 0x69e <mc_line+0x62>
  } while ( plan_check_full_buffer() );  
     67a:	0e 94 9f 1c 	call	0x393e	; 0x393e <plan_check_full_buffer>
     67e:	88 23       	and	r24, r24
     680:	b1 f7       	brne	.-20     	; 0x66e <mc_line+0x32>
  plan_buffer_line(x, y, z, feed_rate, invert_feed_rate);
     682:	69 81       	ldd	r22, Y+1	; 0x01
     684:	7a 81       	ldd	r23, Y+2	; 0x02
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	a3 01       	movw	r20, r6
     68c:	92 01       	movw	r18, r4
     68e:	0e 94 b6 1c 	call	0x396c	; 0x396c <plan_buffer_line>
  // NOTE: This is allows the user to decide to exclusively use the cycle start runtime command to
  // begin motion or let grbl auto-start it for them. This is useful when: manually cycle-starting
  // when the buffer is completely full and primed; auto-starting, if there was only one g-code 
  // command sent during manual operation; or if a system is prone to buffer starvation, auto-start
  // helps make sure it minimizes any dwelling/motion hiccups and keeps the cycle going. 
  if (sys.auto_start) { st_cycle_start(); }
     692:	80 91 0c 06 	lds	r24, 0x060C
     696:	88 23       	and	r24, r24
     698:	11 f0       	breq	.+4      	; 0x69e <mc_line+0x62>
     69a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <st_cycle_start>
}
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	8f 90       	pop	r8
     6bc:	7f 90       	pop	r7
     6be:	6f 90       	pop	r6
     6c0:	5f 90       	pop	r5
     6c2:	4f 90       	pop	r4
     6c4:	08 95       	ret

000006c6 <mc_arc>:
// for vector transformation direction.
// The arc is approximated by generating a huge number of tiny, linear segments. The length of each 
// segment is configured in settings.mm_per_arc_segment.  
void mc_arc(double *position, double *target, double *offset, uint8_t axis_0, uint8_t axis_1, 
  uint8_t axis_linear, double feed_rate, uint8_t invert_feed_rate, double radius, uint8_t isclockwise)
{      
     6c6:	2f 92       	push	r2
     6c8:	3f 92       	push	r3
     6ca:	4f 92       	push	r4
     6cc:	5f 92       	push	r5
     6ce:	6f 92       	push	r6
     6d0:	7f 92       	push	r7
     6d2:	8f 92       	push	r8
     6d4:	9f 92       	push	r9
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	cf 92       	push	r12
     6dc:	df 92       	push	r13
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	c2 54       	subi	r28, 0x42	; 66
     6f0:	d0 40       	sbci	r29, 0x00	; 0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	3c 01       	movw	r6, r24
     6fe:	7e 8f       	std	Y+30, r23	; 0x1e
     700:	6d 8f       	std	Y+29, r22	; 0x1d
     702:	2a 01       	movw	r4, r20
     704:	29 8f       	std	Y+25, r18	; 0x19
     706:	30 2e       	mov	r3, r16
     708:	9e 2c       	mov	r9, r14
     70a:	aa a2       	std	Y+34, r10	; 0x22
     70c:	bb a2       	std	Y+35, r11	; 0x23
     70e:	cc a2       	std	Y+36, r12	; 0x24
     710:	dd a2       	std	Y+37, r13	; 0x25
     712:	8c a6       	std	Y+44, r8	; 0x2c
  double center_axis0 = position[axis_0] + offset[axis_0];
     714:	02 2f       	mov	r16, r18
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	00 0f       	add	r16, r16
     71a:	11 1f       	adc	r17, r17
     71c:	00 0f       	add	r16, r16
     71e:	11 1f       	adc	r17, r17
     720:	9a 01       	movw	r18, r20
     722:	20 0f       	add	r18, r16
     724:	31 1f       	adc	r19, r17
     726:	3e a7       	std	Y+46, r19	; 0x2e
     728:	2d a7       	std	Y+45, r18	; 0x2d
     72a:	d9 01       	movw	r26, r18
     72c:	8d 91       	ld	r24, X+
     72e:	9d 91       	ld	r25, X+
     730:	0d 90       	ld	r0, X+
     732:	bc 91       	ld	r27, X
     734:	a0 2d       	mov	r26, r0
     736:	8d 87       	std	Y+13, r24	; 0x0d
     738:	9e 87       	std	Y+14, r25	; 0x0e
     73a:	af 87       	std	Y+15, r26	; 0x0f
     73c:	b8 8b       	std	Y+16, r27	; 0x10
     73e:	f3 01       	movw	r30, r6
     740:	e0 0f       	add	r30, r16
     742:	f1 1f       	adc	r31, r17
     744:	bc 01       	movw	r22, r24
     746:	cd 01       	movw	r24, r26
     748:	20 81       	ld	r18, Z
     74a:	31 81       	ldd	r19, Z+1	; 0x01
     74c:	42 81       	ldd	r20, Z+2	; 0x02
     74e:	53 81       	ldd	r21, Z+3	; 0x03
     750:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     754:	69 ab       	std	Y+49, r22	; 0x31
     756:	7a ab       	std	Y+50, r23	; 0x32
     758:	8b ab       	std	Y+51, r24	; 0x33
     75a:	9c ab       	std	Y+52, r25	; 0x34
  double center_axis1 = position[axis_1] + offset[axis_1];
     75c:	e3 2c       	mov	r14, r3
     75e:	ff 24       	eor	r15, r15
     760:	ee 0c       	add	r14, r14
     762:	ff 1c       	adc	r15, r15
     764:	ee 0c       	add	r14, r14
     766:	ff 1c       	adc	r15, r15
     768:	f2 01       	movw	r30, r4
     76a:	ee 0d       	add	r30, r14
     76c:	ff 1d       	adc	r31, r15
     76e:	f8 ab       	std	Y+48, r31	; 0x30
     770:	ef a7       	std	Y+47, r30	; 0x2f
     772:	a0 80       	ld	r10, Z
     774:	b1 80       	ldd	r11, Z+1	; 0x01
     776:	c2 80       	ldd	r12, Z+2	; 0x02
     778:	d3 80       	ldd	r13, Z+3	; 0x03
     77a:	f3 01       	movw	r30, r6
     77c:	ee 0d       	add	r30, r14
     77e:	ff 1d       	adc	r31, r15
     780:	c6 01       	movw	r24, r12
     782:	b5 01       	movw	r22, r10
     784:	20 81       	ld	r18, Z
     786:	31 81       	ldd	r19, Z+1	; 0x01
     788:	42 81       	ldd	r20, Z+2	; 0x02
     78a:	53 81       	ldd	r21, Z+3	; 0x03
     78c:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     790:	6d ab       	std	Y+53, r22	; 0x35
     792:	7e ab       	std	Y+54, r23	; 0x36
     794:	8f ab       	std	Y+55, r24	; 0x37
     796:	98 af       	std	Y+56, r25	; 0x38
  double linear_travel = target[axis_linear] - position[axis_linear];
     798:	89 2d       	mov	r24, r9
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	f3 01       	movw	r30, r6
     7a6:	e8 0f       	add	r30, r24
     7a8:	f9 1f       	adc	r31, r25
     7aa:	20 81       	ld	r18, Z
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	42 81       	ldd	r20, Z+2	; 0x02
     7b0:	53 81       	ldd	r21, Z+3	; 0x03
     7b2:	2d 8b       	std	Y+21, r18	; 0x15
     7b4:	3e 8b       	std	Y+22, r19	; 0x16
     7b6:	4f 8b       	std	Y+23, r20	; 0x17
     7b8:	58 8f       	std	Y+24, r21	; 0x18
     7ba:	4d 8d       	ldd	r20, Y+29	; 0x1d
     7bc:	5e 8d       	ldd	r21, Y+30	; 0x1e
     7be:	84 0f       	add	r24, r20
     7c0:	95 1f       	adc	r25, r21
     7c2:	dc 01       	movw	r26, r24
     7c4:	6d 91       	ld	r22, X+
     7c6:	7d 91       	ld	r23, X+
     7c8:	8d 91       	ld	r24, X+
     7ca:	9c 91       	ld	r25, X
     7cc:	2d 89       	ldd	r18, Y+21	; 0x15
     7ce:	3e 89       	ldd	r19, Y+22	; 0x16
     7d0:	4f 89       	ldd	r20, Y+23	; 0x17
     7d2:	58 8d       	ldd	r21, Y+24	; 0x18
     7d4:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     7d8:	86 2e       	mov	r8, r22
     7da:	77 2e       	mov	r7, r23
     7dc:	58 2e       	mov	r5, r24
     7de:	9b 8f       	std	Y+27, r25	; 0x1b
  double r_axis0 = -offset[axis_0];  // Radius vector from center to current location
     7e0:	2d 85       	ldd	r18, Y+13	; 0x0d
     7e2:	3e 85       	ldd	r19, Y+14	; 0x0e
     7e4:	4f 85       	ldd	r20, Y+15	; 0x0f
     7e6:	58 89       	ldd	r21, Y+16	; 0x10
     7e8:	50 58       	subi	r21, 0x80	; 128
     7ea:	2d 87       	std	Y+13, r18	; 0x0d
     7ec:	3e 87       	std	Y+14, r19	; 0x0e
     7ee:	4f 87       	std	Y+15, r20	; 0x0f
     7f0:	58 8b       	std	Y+16, r21	; 0x10
  double r_axis1 = -offset[axis_1];
     7f2:	d6 01       	movw	r26, r12
     7f4:	c5 01       	movw	r24, r10
     7f6:	b0 58       	subi	r27, 0x80	; 128
     7f8:	8e a3       	std	Y+38, r24	; 0x26
     7fa:	9f a3       	std	Y+39, r25	; 0x27
     7fc:	a8 a7       	std	Y+40, r26	; 0x28
     7fe:	b9 a7       	std	Y+41, r27	; 0x29
  double rt_axis0 = target[axis_0] - center_axis0;
     800:	ed 8d       	ldd	r30, Y+29	; 0x1d
     802:	fe 8d       	ldd	r31, Y+30	; 0x1e
     804:	e0 0f       	add	r30, r16
     806:	f1 1f       	adc	r31, r17
     808:	60 81       	ld	r22, Z
     80a:	71 81       	ldd	r23, Z+1	; 0x01
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	93 81       	ldd	r25, Z+3	; 0x03
     810:	b9 a9       	ldd	r27, Y+49	; 0x31
     812:	aa a9       	ldd	r26, Y+50	; 0x32
     814:	fb a9       	ldd	r31, Y+51	; 0x33
     816:	ec a9       	ldd	r30, Y+52	; 0x34
     818:	2b 2f       	mov	r18, r27
     81a:	3a 2f       	mov	r19, r26
     81c:	4f 2f       	mov	r20, r31
     81e:	5e 2f       	mov	r21, r30
     820:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     824:	a6 2e       	mov	r10, r22
     826:	67 2e       	mov	r6, r23
     828:	48 2e       	mov	r4, r24
     82a:	29 2e       	mov	r2, r25
  double rt_axis1 = target[axis_1] - center_axis1;
     82c:	ed 8d       	ldd	r30, Y+29	; 0x1d
     82e:	fe 8d       	ldd	r31, Y+30	; 0x1e
     830:	ee 0d       	add	r30, r14
     832:	ff 1d       	adc	r31, r15
     834:	60 81       	ld	r22, Z
     836:	71 81       	ldd	r23, Z+1	; 0x01
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	93 81       	ldd	r25, Z+3	; 0x03
     83c:	bd a9       	ldd	r27, Y+53	; 0x35
     83e:	ae a9       	ldd	r26, Y+54	; 0x36
     840:	ff a9       	ldd	r31, Y+55	; 0x37
     842:	e8 ad       	ldd	r30, Y+56	; 0x38
     844:	2b 2f       	mov	r18, r27
     846:	3a 2f       	mov	r19, r26
     848:	4f 2f       	mov	r20, r31
     84a:	5e 2f       	mov	r21, r30
     84c:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     850:	f6 2e       	mov	r15, r22
     852:	07 2f       	mov	r16, r23
     854:	18 2f       	mov	r17, r24
     856:	e9 2e       	mov	r14, r25
  
  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  double angular_travel = atan2(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
     858:	6d 85       	ldd	r22, Y+13	; 0x0d
     85a:	7e 85       	ldd	r23, Y+14	; 0x0e
     85c:	8f 85       	ldd	r24, Y+15	; 0x0f
     85e:	98 89       	ldd	r25, Y+16	; 0x10
     860:	2f 2d       	mov	r18, r15
     862:	30 2f       	mov	r19, r16
     864:	41 2f       	mov	r20, r17
     866:	5e 2d       	mov	r21, r14
     868:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     86c:	69 8b       	std	Y+17, r22	; 0x11
     86e:	7a 8b       	std	Y+18, r23	; 0x12
     870:	8b 8b       	std	Y+19, r24	; 0x13
     872:	9c 8b       	std	Y+20, r25	; 0x14
     874:	6e a1       	ldd	r22, Y+38	; 0x26
     876:	7f a1       	ldd	r23, Y+39	; 0x27
     878:	88 a5       	ldd	r24, Y+40	; 0x28
     87a:	99 a5       	ldd	r25, Y+41	; 0x29
     87c:	2a 2d       	mov	r18, r10
     87e:	36 2d       	mov	r19, r6
     880:	44 2d       	mov	r20, r4
     882:	52 2d       	mov	r21, r2
     884:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	69 89       	ldd	r22, Y+17	; 0x11
     88e:	7a 89       	ldd	r23, Y+18	; 0x12
     890:	8b 89       	ldd	r24, Y+19	; 0x13
     892:	9c 89       	ldd	r25, Y+20	; 0x14
     894:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     898:	69 8b       	std	Y+17, r22	; 0x11
     89a:	7a 8b       	std	Y+18, r23	; 0x12
     89c:	8b 8b       	std	Y+19, r24	; 0x13
     89e:	9c 8b       	std	Y+20, r25	; 0x14
     8a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     8a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     8a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a6:	98 89       	ldd	r25, Y+16	; 0x10
     8a8:	2a 2d       	mov	r18, r10
     8aa:	36 2d       	mov	r19, r6
     8ac:	44 2d       	mov	r20, r4
     8ae:	52 2d       	mov	r21, r2
     8b0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     8b4:	5b 01       	movw	r10, r22
     8b6:	6c 01       	movw	r12, r24
     8b8:	6e a1       	ldd	r22, Y+38	; 0x26
     8ba:	7f a1       	ldd	r23, Y+39	; 0x27
     8bc:	88 a5       	ldd	r24, Y+40	; 0x28
     8be:	99 a5       	ldd	r25, Y+41	; 0x29
     8c0:	2f 2d       	mov	r18, r15
     8c2:	30 2f       	mov	r19, r16
     8c4:	41 2f       	mov	r20, r17
     8c6:	5e 2d       	mov	r21, r14
     8c8:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c6 01       	movw	r24, r12
     8d2:	b5 01       	movw	r22, r10
     8d4:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	69 89       	ldd	r22, Y+17	; 0x11
     8de:	7a 89       	ldd	r23, Y+18	; 0x12
     8e0:	8b 89       	ldd	r24, Y+19	; 0x13
     8e2:	9c 89       	ldd	r25, Y+20	; 0x14
     8e4:	0e 94 6d 2a 	call	0x54da	; 0x54da <atan2>
     8e8:	f6 2e       	mov	r15, r22
     8ea:	17 2f       	mov	r17, r23
     8ec:	e8 2e       	mov	r14, r24
     8ee:	09 2f       	mov	r16, r25
  if (angular_travel < 0) { angular_travel += 2*M_PI; }
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	a9 01       	movw	r20, r18
     8f6:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
     8fa:	87 ff       	sbrs	r24, 7
     8fc:	0e c0       	rjmp	.+28     	; 0x91a <mc_arc+0x254>
     8fe:	6f 2d       	mov	r22, r15
     900:	71 2f       	mov	r23, r17
     902:	8e 2d       	mov	r24, r14
     904:	90 2f       	mov	r25, r16
     906:	2b ed       	ldi	r18, 0xDB	; 219
     908:	3f e0       	ldi	r19, 0x0F	; 15
     90a:	49 ec       	ldi	r20, 0xC9	; 201
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     912:	f6 2e       	mov	r15, r22
     914:	17 2f       	mov	r17, r23
     916:	e8 2e       	mov	r14, r24
     918:	09 2f       	mov	r16, r25
  if (isclockwise) { angular_travel -= 2*M_PI; }
     91a:	6c 96       	adiw	r28, 0x1c	; 28
     91c:	8f ad       	ldd	r24, Y+63	; 0x3f
     91e:	6c 97       	sbiw	r28, 0x1c	; 28
     920:	88 23       	and	r24, r24
     922:	71 f0       	breq	.+28     	; 0x940 <mc_arc+0x27a>
     924:	6f 2d       	mov	r22, r15
     926:	71 2f       	mov	r23, r17
     928:	8e 2d       	mov	r24, r14
     92a:	90 2f       	mov	r25, r16
     92c:	2b ed       	ldi	r18, 0xDB	; 219
     92e:	3f e0       	ldi	r19, 0x0F	; 15
     930:	49 ec       	ldi	r20, 0xC9	; 201
     932:	50 e4       	ldi	r21, 0x40	; 64
     934:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     938:	f6 2e       	mov	r15, r22
     93a:	17 2f       	mov	r17, r23
     93c:	e8 2e       	mov	r14, r24
     93e:	09 2f       	mov	r16, r25
  
  double millimeters_of_travel = hypot(angular_travel*radius, fabs(linear_travel));
     940:	6f 2d       	mov	r22, r15
     942:	71 2f       	mov	r23, r17
     944:	8e 2d       	mov	r24, r14
     946:	90 2f       	mov	r25, r16
     948:	6b 96       	adiw	r28, 0x1b	; 27
     94a:	2c ad       	ldd	r18, Y+60	; 0x3c
     94c:	3d ad       	ldd	r19, Y+61	; 0x3d
     94e:	4e ad       	ldd	r20, Y+62	; 0x3e
     950:	5f ad       	ldd	r21, Y+63	; 0x3f
     952:	6b 97       	sbiw	r28, 0x1b	; 27
     954:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     958:	eb 8d       	ldd	r30, Y+27	; 0x1b
     95a:	28 2d       	mov	r18, r8
     95c:	37 2d       	mov	r19, r7
     95e:	45 2d       	mov	r20, r5
     960:	5e 2f       	mov	r21, r30
     962:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <hypot>
     966:	5b 01       	movw	r10, r22
     968:	6c 01       	movw	r12, r24
  if (millimeters_of_travel == 0.0) { return; }
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	a9 01       	movw	r20, r18
     970:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <mc_arc+0x2b4>
     978:	f5 c1       	rjmp	.+1002   	; 0xd64 <__stack+0x265>
  uint16_t segments = floor(millimeters_of_travel/settings.mm_per_arc_segment);
     97a:	c6 01       	movw	r24, r12
     97c:	b5 01       	movw	r22, r10
     97e:	20 91 4b 06 	lds	r18, 0x064B
     982:	30 91 4c 06 	lds	r19, 0x064C
     986:	40 91 4d 06 	lds	r20, 0x064D
     98a:	50 91 4e 06 	lds	r21, 0x064E
     98e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     992:	0e 94 b0 2b 	call	0x5760	; 0x5760 <floor>
     996:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
     99a:	7b a7       	std	Y+43, r23	; 0x2b
     99c:	6a a7       	std	Y+42, r22	; 0x2a
  // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
  // by a number of discrete segments. The inverse feed_rate should be correct for the sum of 
  // all segments.
  if (invert_feed_rate) { feed_rate *= segments; }
     99e:	9c a5       	ldd	r25, Y+44	; 0x2c
     9a0:	99 23       	and	r25, r25
     9a2:	a1 f0       	breq	.+40     	; 0x9cc <mc_arc+0x306>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	ba a1       	ldd	r27, Y+34	; 0x22
     9b2:	ab a1       	ldd	r26, Y+35	; 0x23
     9b4:	fc a1       	ldd	r31, Y+36	; 0x24
     9b6:	ed a1       	ldd	r30, Y+37	; 0x25
     9b8:	6b 2f       	mov	r22, r27
     9ba:	7a 2f       	mov	r23, r26
     9bc:	8f 2f       	mov	r24, r31
     9be:	9e 2f       	mov	r25, r30
     9c0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     9c4:	6a a3       	std	Y+34, r22	; 0x22
     9c6:	7b a3       	std	Y+35, r23	; 0x23
     9c8:	8c a3       	std	Y+36, r24	; 0x24
     9ca:	9d a3       	std	Y+37, r25	; 0x25
 
  double theta_per_segment = angular_travel/segments;
     9cc:	ea a5       	ldd	r30, Y+42	; 0x2a
     9ce:	fb a5       	ldd	r31, Y+43	; 0x2b
     9d0:	bf 01       	movw	r22, r30
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
     9da:	5b 01       	movw	r10, r22
     9dc:	6c 01       	movw	r12, r24
     9de:	6f 2d       	mov	r22, r15
     9e0:	71 2f       	mov	r23, r17
     9e2:	8e 2d       	mov	r24, r14
     9e4:	90 2f       	mov	r25, r16
     9e6:	a6 01       	movw	r20, r12
     9e8:	95 01       	movw	r18, r10
     9ea:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     9ee:	69 8b       	std	Y+17, r22	; 0x11
     9f0:	7f 8f       	std	Y+31, r23	; 0x1f
     9f2:	88 a3       	std	Y+32, r24	; 0x20
     9f4:	99 a3       	std	Y+33, r25	; 0x21
  double linear_per_segment = linear_travel/segments;
     9f6:	2b 8d       	ldd	r18, Y+27	; 0x1b
     9f8:	68 2d       	mov	r22, r8
     9fa:	77 2d       	mov	r23, r7
     9fc:	85 2d       	mov	r24, r5
     9fe:	92 2f       	mov	r25, r18
     a00:	a6 01       	movw	r20, r12
     a02:	95 01       	movw	r18, r10
     a04:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     a08:	6f af       	std	Y+63, r22	; 0x3f
     a0a:	21 96       	adiw	r28, 0x01	; 1
     a0c:	7f af       	std	Y+63, r23	; 0x3f
     a0e:	21 97       	sbiw	r28, 0x01	; 1
     a10:	22 96       	adiw	r28, 0x02	; 2
     a12:	8f af       	std	Y+63, r24	; 0x3f
     a14:	22 97       	sbiw	r28, 0x02	; 2
     a16:	23 96       	adiw	r28, 0x03	; 3
     a18:	9f af       	std	Y+63, r25	; 0x3f
     a1a:	23 97       	sbiw	r28, 0x03	; 3
     without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
     a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead. 
     This is important when there are successive arc motions. 
  */
  // Vector rotation matrix values
  double cos_T = 1-0.5*theta_per_segment*theta_per_segment; // Small angle approximation
     a1c:	59 89       	ldd	r21, Y+17	; 0x11
     a1e:	4f 8d       	ldd	r20, Y+31	; 0x1f
     a20:	38 a1       	ldd	r19, Y+32	; 0x20
     a22:	29 a1       	ldd	r18, Y+33	; 0x21
     a24:	65 2f       	mov	r22, r21
     a26:	74 2f       	mov	r23, r20
     a28:	83 2f       	mov	r24, r19
     a2a:	92 2f       	mov	r25, r18
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     a38:	b9 89       	ldd	r27, Y+17	; 0x11
     a3a:	af 8d       	ldd	r26, Y+31	; 0x1f
     a3c:	f8 a1       	ldd	r31, Y+32	; 0x20
     a3e:	e9 a1       	ldd	r30, Y+33	; 0x21
     a40:	2b 2f       	mov	r18, r27
     a42:	3a 2f       	mov	r19, r26
     a44:	4f 2f       	mov	r20, r31
     a46:	5e 2f       	mov	r21, r30
     a48:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	9f e3       	ldi	r25, 0x3F	; 63
     a58:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     a5c:	69 af       	std	Y+57, r22	; 0x39
     a5e:	7a af       	std	Y+58, r23	; 0x3a
     a60:	8b af       	std	Y+59, r24	; 0x3b
     a62:	9c af       	std	Y+60, r25	; 0x3c
  double r_axisi;
  uint16_t i;
  int8_t count = 0;

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];
     a64:	e9 2d       	mov	r30, r9
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	2d 89       	ldd	r18, Y+21	; 0x15
     a7a:	3e 89       	ldd	r19, Y+22	; 0x16
     a7c:	4f 89       	ldd	r20, Y+23	; 0x17
     a7e:	58 8d       	ldd	r21, Y+24	; 0x18
     a80:	20 83       	st	Z, r18
     a82:	31 83       	std	Z+1, r19	; 0x01
     a84:	42 83       	std	Z+2, r20	; 0x02
     a86:	53 83       	std	Z+3, r21	; 0x03
  double arc_target[3];
  double sin_Ti;
  double cos_Ti;
  double r_axisi;
  uint16_t i;
  int8_t count = 0;
     a88:	66 24       	eor	r6, r6

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	5c 8f       	std	Y+28, r21	; 0x1c
     a90:	4b 8f       	std	Y+27, r20	; 0x1b
      r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
      count = 0;
    }

    // Update arc_target location
    arc_target[axis_0] = center_axis0 + r_axis0;
     a92:	b9 8d       	ldd	r27, Y+25	; 0x19
     a94:	ab 2f       	mov	r26, r27
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	aa 0f       	add	r26, r26
     a9a:	bb 1f       	adc	r27, r27
     a9c:	aa 0f       	add	r26, r26
     a9e:	bb 1f       	adc	r27, r27
     aa0:	a8 0f       	add	r26, r24
     aa2:	b9 1f       	adc	r27, r25
     aa4:	be 8b       	std	Y+22, r27	; 0x16
     aa6:	ad 8b       	std	Y+21, r26	; 0x15
    arc_target[axis_1] = center_axis1 + r_axis1;
     aa8:	23 2d       	mov	r18, r3
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	28 0f       	add	r18, r24
     ab6:	39 1f       	adc	r19, r25
     ab8:	3a 8f       	std	Y+26, r19	; 0x1a
     aba:	29 8f       	std	Y+25, r18	; 0x19
    arc_target[axis_linear] += linear_per_segment;
     abc:	fe af       	std	Y+62, r31	; 0x3e
     abe:	ed af       	std	Y+61, r30	; 0x3d
     ac0:	2e a0       	ldd	r2, Y+38	; 0x26
     ac2:	3f a0       	ldd	r3, Y+39	; 0x27
     ac4:	48 a4       	ldd	r4, Y+40	; 0x28
     ac6:	59 a4       	ldd	r5, Y+41	; 0x29
  int8_t count = 0;

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
     ac8:	2a c1       	rjmp	.+596    	; 0xd1e <__stack+0x21f>
    
    if (count < N_ARC_CORRECTION) {
     aca:	36 2d       	mov	r19, r6
     acc:	39 31       	cpi	r19, 0x19	; 25
     ace:	0c f0       	brlt	.+2      	; 0xad2 <mc_arc+0x40c>
     ad0:	5b c0       	rjmp	.+182    	; 0xb88 <__stack+0x89>
      // Apply vector rotation matrix 
      r_axisi = r_axis0*sin_T + r_axis1*cos_T;
     ad2:	6d 85       	ldd	r22, Y+13	; 0x0d
     ad4:	7e 85       	ldd	r23, Y+14	; 0x0e
     ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ad8:	98 89       	ldd	r25, Y+16	; 0x10
     ada:	b9 89       	ldd	r27, Y+17	; 0x11
     adc:	af 8d       	ldd	r26, Y+31	; 0x1f
     ade:	f8 a1       	ldd	r31, Y+32	; 0x20
     ae0:	e9 a1       	ldd	r30, Y+33	; 0x21
     ae2:	2b 2f       	mov	r18, r27
     ae4:	3a 2f       	mov	r19, r26
     ae6:	4f 2f       	mov	r20, r31
     ae8:	5e 2f       	mov	r21, r30
     aea:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     aee:	7b 01       	movw	r14, r22
     af0:	8c 01       	movw	r16, r24
     af2:	c2 01       	movw	r24, r4
     af4:	b1 01       	movw	r22, r2
     af6:	b9 ad       	ldd	r27, Y+57	; 0x39
     af8:	aa ad       	ldd	r26, Y+58	; 0x3a
     afa:	fb ad       	ldd	r31, Y+59	; 0x3b
     afc:	ec ad       	ldd	r30, Y+60	; 0x3c
     afe:	2b 2f       	mov	r18, r27
     b00:	3a 2f       	mov	r19, r26
     b02:	4f 2f       	mov	r20, r31
     b04:	5e 2f       	mov	r21, r30
     b06:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	c8 01       	movw	r24, r16
     b10:	b7 01       	movw	r22, r14
     b12:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     b16:	d6 2e       	mov	r13, r22
     b18:	a7 2e       	mov	r10, r23
     b1a:	98 2e       	mov	r9, r24
     b1c:	89 2e       	mov	r8, r25
      r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
     b1e:	6d 85       	ldd	r22, Y+13	; 0x0d
     b20:	7e 85       	ldd	r23, Y+14	; 0x0e
     b22:	8f 85       	ldd	r24, Y+15	; 0x0f
     b24:	98 89       	ldd	r25, Y+16	; 0x10
     b26:	b9 ad       	ldd	r27, Y+57	; 0x39
     b28:	aa ad       	ldd	r26, Y+58	; 0x3a
     b2a:	fb ad       	ldd	r31, Y+59	; 0x3b
     b2c:	ec ad       	ldd	r30, Y+60	; 0x3c
     b2e:	2b 2f       	mov	r18, r27
     b30:	3a 2f       	mov	r19, r26
     b32:	4f 2f       	mov	r20, r31
     b34:	5e 2f       	mov	r21, r30
     b36:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     b3a:	8b 01       	movw	r16, r22
     b3c:	f8 2e       	mov	r15, r24
     b3e:	e9 2e       	mov	r14, r25
     b40:	c2 01       	movw	r24, r4
     b42:	b1 01       	movw	r22, r2
     b44:	b9 89       	ldd	r27, Y+17	; 0x11
     b46:	af 8d       	ldd	r26, Y+31	; 0x1f
     b48:	f8 a1       	ldd	r31, Y+32	; 0x20
     b4a:	e9 a1       	ldd	r30, Y+33	; 0x21
     b4c:	2b 2f       	mov	r18, r27
     b4e:	3a 2f       	mov	r19, r26
     b50:	4f 2f       	mov	r20, r31
     b52:	5e 2f       	mov	r21, r30
     b54:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	f7 01       	movw	r30, r14
     b5e:	60 2f       	mov	r22, r16
     b60:	71 2f       	mov	r23, r17
     b62:	8f 2f       	mov	r24, r31
     b64:	9e 2f       	mov	r25, r30
     b66:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     b6a:	26 2f       	mov	r18, r22
     b6c:	37 2f       	mov	r19, r23
     b6e:	48 2f       	mov	r20, r24
     b70:	59 2f       	mov	r21, r25
     b72:	2d 87       	std	Y+13, r18	; 0x0d
     b74:	3e 87       	std	Y+14, r19	; 0x0e
     b76:	4f 87       	std	Y+15, r20	; 0x0f
     b78:	58 8b       	std	Y+16, r21	; 0x10
      r_axis1 = r_axisi;
      count++;
     b7a:	63 94       	inc	r6
    
    if (count < N_ARC_CORRECTION) {
      // Apply vector rotation matrix 
      r_axisi = r_axis0*sin_T + r_axis1*cos_T;
      r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
      r_axis1 = r_axisi;
     b7c:	c4 01       	movw	r24, r8
     b7e:	2d 2c       	mov	r2, r13
     b80:	3a 2c       	mov	r3, r10
     b82:	49 2e       	mov	r4, r25
     b84:	58 2e       	mov	r5, r24
     b86:	6a c0       	rjmp	.+212    	; 0xc5c <__stack+0x15d>
      count++;
    } else {
      // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments.
      // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
      cos_Ti = cos(i*theta_per_segment);
     b88:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b8a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b8c:	ba 01       	movw	r22, r20
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
     b96:	b9 89       	ldd	r27, Y+17	; 0x11
     b98:	af 8d       	ldd	r26, Y+31	; 0x1f
     b9a:	f8 a1       	ldd	r31, Y+32	; 0x20
     b9c:	e9 a1       	ldd	r30, Y+33	; 0x21
     b9e:	2b 2f       	mov	r18, r27
     ba0:	3a 2f       	mov	r19, r26
     ba2:	4f 2f       	mov	r20, r31
     ba4:	5e 2f       	mov	r21, r30
     ba6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     baa:	7b 01       	movw	r14, r22
     bac:	8c 01       	movw	r16, r24
     bae:	7f 2d       	mov	r23, r15
     bb0:	91 2f       	mov	r25, r17
     bb2:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <cos>
     bb6:	1b 01       	movw	r2, r22
     bb8:	2c 01       	movw	r4, r24
      sin_Ti = sin(i*theta_per_segment);
     bba:	6e 2d       	mov	r22, r14
     bbc:	7f 2d       	mov	r23, r15
     bbe:	80 2f       	mov	r24, r16
     bc0:	91 2f       	mov	r25, r17
     bc2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <sin>
     bc6:	5b 01       	movw	r10, r22
     bc8:	6c 01       	movw	r12, r24
      r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
     bca:	ad a5       	ldd	r26, Y+45	; 0x2d
     bcc:	be a5       	ldd	r27, Y+46	; 0x2e
     bce:	ed 90       	ld	r14, X+
     bd0:	fd 90       	ld	r15, X+
     bd2:	0d 91       	ld	r16, X+
     bd4:	1c 91       	ld	r17, X
     bd6:	17 fb       	bst	r17, 7
     bd8:	10 95       	com	r17
     bda:	17 f9       	bld	r17, 7
     bdc:	10 95       	com	r17
     bde:	ef a5       	ldd	r30, Y+47	; 0x2f
     be0:	f8 a9       	ldd	r31, Y+48	; 0x30
     be2:	60 80       	ld	r6, Z
     be4:	71 80       	ldd	r7, Z+1	; 0x01
     be6:	82 80       	ldd	r8, Z+2	; 0x02
     be8:	93 80       	ldd	r9, Z+3	; 0x03
     bea:	c8 01       	movw	r24, r16
     bec:	b7 01       	movw	r22, r14
     bee:	a2 01       	movw	r20, r4
     bf0:	91 01       	movw	r18, r2
     bf2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     bf6:	6d 87       	std	Y+13, r22	; 0x0d
     bf8:	7e 87       	std	Y+14, r23	; 0x0e
     bfa:	8f 87       	std	Y+15, r24	; 0x0f
     bfc:	98 8b       	std	Y+16, r25	; 0x10
     bfe:	c4 01       	movw	r24, r8
     c00:	b3 01       	movw	r22, r6
     c02:	a6 01       	movw	r20, r12
     c04:	95 01       	movw	r18, r10
     c06:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c10:	7e 85       	ldd	r23, Y+14	; 0x0e
     c12:	8f 85       	ldd	r24, Y+15	; 0x0f
     c14:	98 89       	ldd	r25, Y+16	; 0x10
     c16:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     c1a:	26 2f       	mov	r18, r22
     c1c:	37 2f       	mov	r19, r23
     c1e:	48 2f       	mov	r20, r24
     c20:	59 2f       	mov	r21, r25
     c22:	2d 87       	std	Y+13, r18	; 0x0d
     c24:	3e 87       	std	Y+14, r19	; 0x0e
     c26:	4f 87       	std	Y+15, r20	; 0x0f
     c28:	58 8b       	std	Y+16, r21	; 0x10
      r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
     c2a:	c8 01       	movw	r24, r16
     c2c:	b7 01       	movw	r22, r14
     c2e:	a6 01       	movw	r20, r12
     c30:	95 01       	movw	r18, r10
     c32:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     c36:	7b 01       	movw	r14, r22
     c38:	8c 01       	movw	r16, r24
     c3a:	c4 01       	movw	r24, r8
     c3c:	b3 01       	movw	r22, r6
     c3e:	a2 01       	movw	r20, r4
     c40:	91 01       	movw	r18, r2
     c42:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	c8 01       	movw	r24, r16
     c4c:	b7 01       	movw	r22, r14
     c4e:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     c52:	26 2e       	mov	r2, r22
     c54:	37 2e       	mov	r3, r23
     c56:	48 2e       	mov	r4, r24
     c58:	59 2e       	mov	r5, r25
      count = 0;
     c5a:	66 24       	eor	r6, r6
    }

    // Update arc_target location
    arc_target[axis_0] = center_axis0 + r_axis0;
     c5c:	59 a9       	ldd	r21, Y+49	; 0x31
     c5e:	4a a9       	ldd	r20, Y+50	; 0x32
     c60:	3b a9       	ldd	r19, Y+51	; 0x33
     c62:	2c a9       	ldd	r18, Y+52	; 0x34
     c64:	65 2f       	mov	r22, r21
     c66:	74 2f       	mov	r23, r20
     c68:	83 2f       	mov	r24, r19
     c6a:	92 2f       	mov	r25, r18
     c6c:	2d 85       	ldd	r18, Y+13	; 0x0d
     c6e:	3e 85       	ldd	r19, Y+14	; 0x0e
     c70:	4f 85       	ldd	r20, Y+15	; 0x0f
     c72:	58 89       	ldd	r21, Y+16	; 0x10
     c74:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     c78:	ad 89       	ldd	r26, Y+21	; 0x15
     c7a:	be 89       	ldd	r27, Y+22	; 0x16
     c7c:	6d 93       	st	X+, r22
     c7e:	7d 93       	st	X+, r23
     c80:	8d 93       	st	X+, r24
     c82:	9c 93       	st	X, r25
     c84:	13 97       	sbiw	r26, 0x03	; 3
    arc_target[axis_1] = center_axis1 + r_axis1;
     c86:	5d a9       	ldd	r21, Y+53	; 0x35
     c88:	4e a9       	ldd	r20, Y+54	; 0x36
     c8a:	3f a9       	ldd	r19, Y+55	; 0x37
     c8c:	28 ad       	ldd	r18, Y+56	; 0x38
     c8e:	65 2f       	mov	r22, r21
     c90:	74 2f       	mov	r23, r20
     c92:	83 2f       	mov	r24, r19
     c94:	92 2f       	mov	r25, r18
     c96:	a2 01       	movw	r20, r4
     c98:	91 01       	movw	r18, r2
     c9a:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     c9e:	e9 8d       	ldd	r30, Y+25	; 0x19
     ca0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ca2:	60 83       	st	Z, r22
     ca4:	71 83       	std	Z+1, r23	; 0x01
     ca6:	82 83       	std	Z+2, r24	; 0x02
     ca8:	93 83       	std	Z+3, r25	; 0x03
    arc_target[axis_linear] += linear_per_segment;
     caa:	ad ad       	ldd	r26, Y+61	; 0x3d
     cac:	be ad       	ldd	r27, Y+62	; 0x3e
     cae:	6d 91       	ld	r22, X+
     cb0:	7d 91       	ld	r23, X+
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	bf ad       	ldd	r27, Y+63	; 0x3f
     cb8:	21 96       	adiw	r28, 0x01	; 1
     cba:	af ad       	ldd	r26, Y+63	; 0x3f
     cbc:	21 97       	sbiw	r28, 0x01	; 1
     cbe:	22 96       	adiw	r28, 0x02	; 2
     cc0:	ff ad       	ldd	r31, Y+63	; 0x3f
     cc2:	22 97       	sbiw	r28, 0x02	; 2
     cc4:	23 96       	adiw	r28, 0x03	; 3
     cc6:	ef ad       	ldd	r30, Y+63	; 0x3f
     cc8:	23 97       	sbiw	r28, 0x03	; 3
     cca:	2b 2f       	mov	r18, r27
     ccc:	3a 2f       	mov	r19, r26
     cce:	4f 2f       	mov	r20, r31
     cd0:	5e 2f       	mov	r21, r30
     cd2:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
     cd6:	ed ad       	ldd	r30, Y+61	; 0x3d
     cd8:	fe ad       	ldd	r31, Y+62	; 0x3e
     cda:	60 83       	st	Z, r22
     cdc:	71 83       	std	Z+1, r23	; 0x01
     cde:	82 83       	std	Z+2, r24	; 0x02
     ce0:	93 83       	std	Z+3, r25	; 0x03
    mc_line(arc_target[X_AXIS], arc_target[Y_AXIS], arc_target[Z_AXIS], feed_rate, invert_feed_rate);
     ce2:	69 81       	ldd	r22, Y+1	; 0x01
     ce4:	7a 81       	ldd	r23, Y+2	; 0x02
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	2d 81       	ldd	r18, Y+5	; 0x05
     cec:	3e 81       	ldd	r19, Y+6	; 0x06
     cee:	4f 81       	ldd	r20, Y+7	; 0x07
     cf0:	58 85       	ldd	r21, Y+8	; 0x08
     cf2:	e9 84       	ldd	r14, Y+9	; 0x09
     cf4:	fa 84       	ldd	r15, Y+10	; 0x0a
     cf6:	0b 85       	ldd	r16, Y+11	; 0x0b
     cf8:	1c 85       	ldd	r17, Y+12	; 0x0c
     cfa:	ea a1       	ldd	r30, Y+34	; 0x22
     cfc:	fb a1       	ldd	r31, Y+35	; 0x23
     cfe:	ac a1       	ldd	r26, Y+36	; 0x24
     d00:	bd a1       	ldd	r27, Y+37	; 0x25
     d02:	5f 01       	movw	r10, r30
     d04:	6d 01       	movw	r12, r26
     d06:	8c a4       	ldd	r8, Y+44	; 0x2c
     d08:	99 dc       	rcall	.-1742   	; 0x63c <mc_line>
    
    // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
    if (sys.abort) { return; }
     d0a:	80 91 0a 06 	lds	r24, 0x060A
     d0e:	88 23       	and	r24, r24
     d10:	49 f5       	brne	.+82     	; 0xd64 <__stack+0x265>
  int8_t count = 0;

  // Initialize the linear axis
  arc_target[axis_linear] = position[axis_linear];

  for (i = 1; i<segments; i++) { // Increment (segments-1)
     d12:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d14:	3c 8d       	ldd	r19, Y+28	; 0x1c
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	3c 8f       	std	Y+28, r19	; 0x1c
     d1c:	2b 8f       	std	Y+27, r18	; 0x1b
     d1e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d20:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d22:	8a a5       	ldd	r24, Y+42	; 0x2a
     d24:	9b a5       	ldd	r25, Y+43	; 0x2b
     d26:	48 17       	cp	r20, r24
     d28:	59 07       	cpc	r21, r25
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <__stack+0x22f>
     d2c:	ce ce       	rjmp	.-612    	; 0xaca <mc_arc+0x404>
    
    // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
    if (sys.abort) { return; }
  }
  // Ensure last segment arrives at target location.
  mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], feed_rate, invert_feed_rate);
     d2e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     d30:	be 8d       	ldd	r27, Y+30	; 0x1e
     d32:	6d 91       	ld	r22, X+
     d34:	7d 91       	ld	r23, X+
     d36:	8d 91       	ld	r24, X+
     d38:	9c 91       	ld	r25, X
     d3a:	13 97       	sbiw	r26, 0x03	; 3
     d3c:	14 96       	adiw	r26, 0x04	; 4
     d3e:	2d 91       	ld	r18, X+
     d40:	3d 91       	ld	r19, X+
     d42:	4d 91       	ld	r20, X+
     d44:	5c 91       	ld	r21, X
     d46:	17 97       	sbiw	r26, 0x07	; 7
     d48:	18 96       	adiw	r26, 0x08	; 8
     d4a:	ed 90       	ld	r14, X+
     d4c:	fd 90       	ld	r15, X+
     d4e:	0d 91       	ld	r16, X+
     d50:	1c 91       	ld	r17, X
     d52:	1b 97       	sbiw	r26, 0x0b	; 11
     d54:	ea a1       	ldd	r30, Y+34	; 0x22
     d56:	fb a1       	ldd	r31, Y+35	; 0x23
     d58:	ac a1       	ldd	r26, Y+36	; 0x24
     d5a:	bd a1       	ldd	r27, Y+37	; 0x25
     d5c:	5f 01       	movw	r10, r30
     d5e:	6d 01       	movw	r12, r26
     d60:	8c a4       	ldd	r8, Y+44	; 0x2c
     d62:	6c dc       	rcall	.-1832   	; 0x63c <mc_line>
}
     d64:	ce 5b       	subi	r28, 0xBE	; 190
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	3f 90       	pop	r3
     d94:	2f 90       	pop	r2
     d96:	08 95       	ret

00000d98 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(double seconds) 
{
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	7b 01       	movw	r14, r22
     da6:	8c 01       	movw	r16, r24
   uint16_t i = floor(1000/DWELL_TIME_STEP*seconds);
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 ea       	ldi	r20, 0xA0	; 160
     dae:	51 e4       	ldi	r21, 0x41	; 65
     db0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     db4:	0e 94 b0 2b 	call	0x5760	; 0x5760 <floor>
     db8:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
     dbc:	eb 01       	movw	r28, r22
   plan_synchronize();
     dbe:	0e 94 a7 1c 	call	0x394e	; 0x394e <plan_synchronize>
   delay_ms(floor(1000*seconds-i*DWELL_TIME_STEP)); // Delay millisecond remainder
     dc2:	c8 01       	movw	r24, r16
     dc4:	b7 01       	movw	r22, r14
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a e7       	ldi	r20, 0x7A	; 122
     dcc:	54 e4       	ldi	r21, 0x44	; 68
     dce:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
     dd2:	7b 01       	movw	r14, r22
     dd4:	8c 01       	movw	r16, r24
     dd6:	82 e3       	ldi	r24, 0x32	; 50
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	c8 9f       	mul	r28, r24
     ddc:	b0 01       	movw	r22, r0
     dde:	c9 9f       	mul	r28, r25
     de0:	70 0d       	add	r23, r0
     de2:	d8 9f       	mul	r29, r24
     de4:	70 0d       	add	r23, r0
     de6:	11 24       	eor	r1, r1
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	c8 01       	movw	r24, r16
     df6:	b7 01       	movw	r22, r14
     df8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
     dfc:	0e 94 b0 2b 	call	0x5760	; 0x5760 <floor>
     e00:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	0e 94 ce 21 	call	0x439c	; 0x439c <delay_ms>
   while (i-- > 0) {
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <mc_dwell+0x96>
     // NOTE: Check and execute runtime commands during dwell every <= DWELL_TIME_STEP milliseconds.
     protocol_execute_runtime();
     e0e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <protocol_execute_runtime>
     e12:	21 97       	sbiw	r28, 0x01	; 1
     if (sys.abort) { return; }
     e14:	80 91 0a 06 	lds	r24, 0x060A
     e18:	88 23       	and	r24, r24
     e1a:	59 f4       	brne	.+22     	; 0xe32 <mc_dwell+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	90 e7       	ldi	r25, 0x70	; 112
     e20:	a2 e0       	ldi	r26, 0x02	; 2
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	a0 40       	sbci	r26, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <mc_dwell+0x8a>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <mc_dwell+0x94>
     e2c:	00 00       	nop
void mc_dwell(double seconds) 
{
   uint16_t i = floor(1000/DWELL_TIME_STEP*seconds);
   plan_synchronize();
   delay_ms(floor(1000*seconds-i*DWELL_TIME_STEP)); // Delay millisecond remainder
   while (i-- > 0) {
     e2e:	20 97       	sbiw	r28, 0x00	; 0
     e30:	71 f7       	brne	.-36     	; 0xe0e <mc_dwell+0x76>
     // NOTE: Check and execute runtime commands during dwell every <= DWELL_TIME_STEP milliseconds.
     protocol_execute_runtime();
     if (sys.abort) { return; }
     _delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
   }
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	08 95       	ret

00000e40 <mc_go_home>:


// TODO: Update limits and homing cycle subprograms for better integration with new features.
void mc_go_home()
{
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
  limits_go_home();  
     e48:	0e 94 09 22 	call	0x4412	; 0x4412 <limits_go_home>
  plan_set_current_position(0,0,0);
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	cb 01       	movw	r24, r22
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	a9 01       	movw	r20, r18
     e58:	ee 24       	eor	r14, r14
     e5a:	ff 24       	eor	r15, r15
     e5c:	87 01       	movw	r16, r14
     e5e:	0e 94 1e 21 	call	0x423c	; 0x423c <plan_set_current_position>
}
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	08 95       	ret

00000e6c <select_plane>:

static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter);

static void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
  gc.plane_axis_0 = axis_0;
     e6c:	80 93 54 01 	sts	0x0154, r24
  gc.plane_axis_1 = axis_1;
     e70:	60 93 55 01 	sts	0x0155, r22
  gc.plane_axis_2 = axis_2;
     e74:	40 93 56 01 	sts	0x0156, r20
}
     e78:	08 95       	ret

00000e7a <to_millimeters>:
  gc.position[Z_AXIS] = z/settings.steps_per_mm[Z_AXIS]; 
}

static float to_millimeters(double value) 
{
  return(gc.inches_mode ? (value * MM_PER_INCH) : value);
     e7a:	20 91 39 01 	lds	r18, 0x0139
     e7e:	22 23       	and	r18, r18
     e80:	31 f0       	breq	.+12     	; 0xe8e <to_millimeters+0x14>
     e82:	23 e3       	ldi	r18, 0x33	; 51
     e84:	33 e3       	ldi	r19, 0x33	; 51
     e86:	4b ec       	ldi	r20, 0xCB	; 203
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__mulsf3>
}
     e8e:	08 95       	ret

00000e90 <next_statement>:

// Parses the next statement and leaves the counter on the first character following
// the statement. Returns 1 if there was a statements, 0 if end of string was reached
// or there was an error (check state.status_code).
static int next_statement(char *letter, double *double_ptr, char *line, uint8_t *char_counter) 
{
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	8c 01       	movw	r16, r24
     e9a:	fb 01       	movw	r30, r22
     e9c:	ca 01       	movw	r24, r20
     e9e:	e9 01       	movw	r28, r18
  if (line[*char_counter] == 0) {
     ea0:	28 81       	ld	r18, Y
     ea2:	42 0f       	add	r20, r18
     ea4:	51 1d       	adc	r21, r1
     ea6:	da 01       	movw	r26, r20
     ea8:	2c 91       	ld	r18, X
     eaa:	22 23       	and	r18, r18
     eac:	99 f0       	breq	.+38     	; 0xed4 <next_statement+0x44>
    return(0); // No more statements
  }
  
  *letter = line[*char_counter];
     eae:	d8 01       	movw	r26, r16
     eb0:	2c 93       	st	X, r18
  if((*letter < 'A') || (*letter > 'Z')) {
     eb2:	21 54       	subi	r18, 0x41	; 65
     eb4:	2a 31       	cpi	r18, 0x1A	; 26
     eb6:	10 f0       	brcs	.+4      	; 0xebc <next_statement+0x2c>
    FAIL(STATUS_EXPECTED_COMMAND_LETTER);
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0a c0       	rjmp	.+20     	; 0xed0 <next_statement+0x40>
    return(0);
  }
  (*char_counter)++;
     ebc:	28 81       	ld	r18, Y
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	28 83       	st	Y, r18
  if (!read_double(line, char_counter, double_ptr)) {
     ec2:	be 01       	movw	r22, r28
     ec4:	af 01       	movw	r20, r30
     ec6:	0e 94 93 21 	call	0x4326	; 0x4326 <read_double>
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	31 f4       	brne	.+12     	; 0xeda <next_statement+0x4a>
    FAIL(STATUS_BAD_NUMBER_FORMAT); 
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 36 01 	sts	0x0136, r24
    return(0);
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <next_statement+0x4e>
  };
  return(1);
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	30 e0       	ldi	r19, 0x00	; 0
}
     ede:	c9 01       	movw	r24, r18
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <gc_init>:
  gc.plane_axis_2 = axis_2;
}

void gc_init() 
{
  memset(&gc, 0, sizeof(gc));
     eea:	81 e2       	ldi	r24, 0x21	; 33
     eec:	e6 e3       	ldi	r30, 0x36	; 54
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	df 01       	movw	r26, r30
     ef2:	1d 92       	st	X+, r1
     ef4:	8a 95       	dec	r24
     ef6:	e9 f7       	brne	.-6      	; 0xef2 <gc_init+0x8>
  gc.feed_rate = settings.default_feed_rate;
     ef8:	80 91 42 06 	lds	r24, 0x0642
     efc:	90 91 43 06 	lds	r25, 0x0643
     f00:	a0 91 44 06 	lds	r26, 0x0644
     f04:	b0 91 45 06 	lds	r27, 0x0645
     f08:	80 93 3d 01 	sts	0x013D, r24
     f0c:	90 93 3e 01 	sts	0x013E, r25
     f10:	a0 93 3f 01 	sts	0x013F, r26
     f14:	b0 93 40 01 	sts	0x0140, r27
  select_plane(X_AXIS, Y_AXIS, Z_AXIS);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	42 e0       	ldi	r20, 0x02	; 2
     f1e:	a6 df       	rcall	.-180    	; 0xe6c <select_plane>
  gc.absolute_mode = true;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 3a 01 	sts	0x013A, r24
}
     f26:	08 95       	ret

00000f28 <gc_set_current_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort routine.
void gc_set_current_position(int32_t x, int32_t y, int32_t z) 
{
     f28:	af 92       	push	r10
     f2a:	bf 92       	push	r11
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	59 01       	movw	r10, r18
     f3a:	6a 01       	movw	r12, r20
  gc.position[X_AXIS] = x/settings.steps_per_mm[X_AXIS];
     f3c:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
     f40:	20 91 34 06 	lds	r18, 0x0634
     f44:	30 91 35 06 	lds	r19, 0x0635
     f48:	40 91 36 06 	lds	r20, 0x0636
     f4c:	50 91 37 06 	lds	r21, 0x0637
     f50:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     f54:	60 93 45 01 	sts	0x0145, r22
     f58:	70 93 46 01 	sts	0x0146, r23
     f5c:	80 93 47 01 	sts	0x0147, r24
     f60:	90 93 48 01 	sts	0x0148, r25
  gc.position[Y_AXIS] = y/settings.steps_per_mm[Y_AXIS];
     f64:	c6 01       	movw	r24, r12
     f66:	b5 01       	movw	r22, r10
     f68:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
     f6c:	20 91 38 06 	lds	r18, 0x0638
     f70:	30 91 39 06 	lds	r19, 0x0639
     f74:	40 91 3a 06 	lds	r20, 0x063A
     f78:	50 91 3b 06 	lds	r21, 0x063B
     f7c:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     f80:	60 93 49 01 	sts	0x0149, r22
     f84:	70 93 4a 01 	sts	0x014A, r23
     f88:	80 93 4b 01 	sts	0x014B, r24
     f8c:	90 93 4c 01 	sts	0x014C, r25
  gc.position[Z_AXIS] = z/settings.steps_per_mm[Z_AXIS]; 
     f90:	c8 01       	movw	r24, r16
     f92:	b7 01       	movw	r22, r14
     f94:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
     f98:	20 91 3c 06 	lds	r18, 0x063C
     f9c:	30 91 3d 06 	lds	r19, 0x063D
     fa0:	40 91 3e 06 	lds	r20, 0x063E
     fa4:	50 91 3f 06 	lds	r21, 0x063F
     fa8:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
     fac:	60 93 4d 01 	sts	0x014D, r22
     fb0:	70 93 4e 01 	sts	0x014E, r23
     fb4:	80 93 4f 01 	sts	0x014F, r24
     fb8:	90 93 50 01 	sts	0x0150, r25
}
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	cf 90       	pop	r12
     fc8:	bf 90       	pop	r11
     fca:	af 90       	pop	r10
     fcc:	08 95       	ret

00000fce <gc_execute_line>:
// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
{
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	4f 92       	push	r4
     fd4:	5f 92       	push	r5
     fd6:	6f 92       	push	r6
     fd8:	7f 92       	push	r7
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	ac 97       	sbiw	r28, 0x2c	; 44
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	9b a7       	std	Y+43, r25	; 0x2b
    1004:	8a a7       	std	Y+42, r24	; 0x2a
  uint8_t char_counter = 0;  
    1006:	19 82       	std	Y+1, r1	; 0x01
  double inverse_feed_rate = -1; // negative inverse_feed_rate means no inverse_feed_rate specified
  uint8_t absolute_override = false; // true(1) = absolute motion for this block only {G53}
  uint8_t non_modal_action = NON_MODAL_NONE; // Tracks the actions of modal group 0 (non-modal)
  
  double target[3], offset[3];  
  clear_vector(target); // XYZ(ABC) axes parameters.
    1008:	8c e0       	ldi	r24, 0x0C	; 12
    100a:	fe 01       	movw	r30, r28
    100c:	37 96       	adiw	r30, 0x07	; 7
    100e:	df 01       	movw	r26, r30
    1010:	28 2f       	mov	r18, r24
    1012:	1d 92       	st	X+, r1
    1014:	2a 95       	dec	r18
    1016:	e9 f7       	brne	.-6      	; 0x1012 <gc_execute_line+0x44>
  clear_vector(offset); // IJK Arc offsets are incremental. Value of zero indicates no change.
    1018:	fe 01       	movw	r30, r28
    101a:	73 96       	adiw	r30, 0x13	; 19
    101c:	df 01       	movw	r26, r30
    101e:	1d 92       	st	X+, r1
    1020:	8a 95       	dec	r24
    1022:	e9 f7       	brne	.-6      	; 0x101e <gc_execute_line+0x50>
    
  gc.status_code = STATUS_OK;
    1024:	10 92 36 01 	sts	0x0136, r1
  uint16_t modal_group_words = 0;  // Bitflag variable to track and check modal group words in block
  uint8_t axis_words = 0;          // Bitflag to track which XYZ(ABC) parameters exist in block

  double inverse_feed_rate = -1; // negative inverse_feed_rate means no inverse_feed_rate specified
  uint8_t absolute_override = false; // true(1) = absolute motion for this block only {G53}
  uint8_t non_modal_action = NON_MODAL_NONE; // Tracks the actions of modal group 0 (non-modal)
    1028:	00 e0       	ldi	r16, 0x00	; 0
  
  uint16_t modal_group_words = 0;  // Bitflag variable to track and check modal group words in block
  uint8_t axis_words = 0;          // Bitflag to track which XYZ(ABC) parameters exist in block

  double inverse_feed_rate = -1; // negative inverse_feed_rate means no inverse_feed_rate specified
  uint8_t absolute_override = false; // true(1) = absolute motion for this block only {G53}
    102a:	19 a6       	std	Y+41, r1	; 0x29
  uint8_t char_counter = 0;  
  char letter;
  double value;
  int int_value;
  
  uint16_t modal_group_words = 0;  // Bitflag variable to track and check modal group words in block
    102c:	18 a2       	std	Y+32, r1	; 0x20
    102e:	1f 8e       	std	Y+31, r1	; 0x1f
  gc.status_code = STATUS_OK;
  
  /* Pass 1: Commands and set all modes. Check for modal group violations.
     NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */
  uint8_t group_number = MODAL_GROUP_NONE;
  while(next_statement(&letter, &value, line, &char_counter)) {
    1030:	22 e0       	ldi	r18, 0x02	; 2
    1032:	42 2e       	mov	r4, r18
    1034:	51 2c       	mov	r5, r1
    1036:	4c 0e       	add	r4, r28
    1038:	5d 1e       	adc	r5, r29
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	29 2e       	mov	r2, r25
    103e:	31 2c       	mov	r3, r1
    1040:	2c 0e       	add	r2, r28
    1042:	3d 1e       	adc	r3, r29
    1044:	4e 01       	movw	r8, r28
    1046:	08 94       	sec
    1048:	81 1c       	adc	r8, r1
    104a:	91 1c       	adc	r9, r1
        }            
        break;
    }    
    // Check for modal group multiple command violations in the current block
    if (group_number) {
      if ( bit_istrue(modal_group_words,bit(group_number)) ) {
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	68 2e       	mov	r6, r24
    1050:	71 2c       	mov	r7, r1
              default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
            }
            break;
          case 93: gc.inverse_feed_rate_mode = true; break;
          case 94: gc.inverse_feed_rate_mode = false; break;
          default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
    1052:	13 e0       	ldi	r17, 0x03	; 3
    1054:	e1 2e       	mov	r14, r17
              case 920: non_modal_action = NON_MODAL_SET_COORDINATE_OFFSET; break;        
              case 921: non_modal_action = NON_MODAL_RESET_COORDINATE_OFFSET; break;
              default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
            }
            break;
          case 93: gc.inverse_feed_rate_mode = true; break;
    1056:	ff 24       	eor	r15, r15
    1058:	f3 94       	inc	r15
  gc.status_code = STATUS_OK;
  
  /* Pass 1: Commands and set all modes. Check for modal group violations.
     NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */
  uint8_t group_number = MODAL_GROUP_NONE;
  while(next_statement(&letter, &value, line, &char_counter)) {
    105a:	7c c1       	rjmp	.+760    	; 0x1354 <gc_execute_line+0x386>
    int_value = trunc(value);
    105c:	ab 80       	ldd	r10, Y+3	; 0x03
    105e:	bc 80       	ldd	r11, Y+4	; 0x04
    1060:	cd 80       	ldd	r12, Y+5	; 0x05
    1062:	de 80       	ldd	r13, Y+6	; 0x06
    1064:	c6 01       	movw	r24, r12
    1066:	b5 01       	movw	r22, r10
    1068:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
    106c:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    switch(letter) {
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	87 34       	cpi	r24, 0x47	; 71
    1074:	21 f0       	breq	.+8      	; 0x107e <gc_execute_line+0xb0>
    1076:	8d 34       	cpi	r24, 0x4D	; 77
    1078:	09 f0       	breq	.+2      	; 0x107c <gc_execute_line+0xae>
    107a:	6c c1       	rjmp	.+728    	; 0x1354 <gc_execute_line+0x386>
    107c:	11 c1       	rjmp	.+546    	; 0x12a0 <gc_execute_line+0x2d2>
      case 'G':
	// Set modal group values
        switch(int_value) {
    107e:	6e 31       	cpi	r22, 0x1E	; 30
    1080:	71 05       	cpc	r23, r1
    1082:	c1 f1       	breq	.+112    	; 0x10f4 <gc_execute_line+0x126>
    1084:	6f 31       	cpi	r22, 0x1F	; 31
    1086:	71 05       	cpc	r23, r1
    1088:	d4 f4       	brge	.+52     	; 0x10be <gc_execute_line+0xf0>
    108a:	64 31       	cpi	r22, 0x14	; 20
    108c:	71 05       	cpc	r23, r1
    108e:	84 f4       	brge	.+32     	; 0x10b0 <gc_execute_line+0xe2>
    1090:	61 31       	cpi	r22, 0x11	; 17
    1092:	71 05       	cpc	r23, r1
    1094:	9c f5       	brge	.+102    	; 0x10fc <gc_execute_line+0x12e>
    1096:	64 30       	cpi	r22, 0x04	; 4
    1098:	71 05       	cpc	r23, r1
    109a:	61 f1       	breq	.+88     	; 0x10f4 <gc_execute_line+0x126>
    109c:	65 30       	cpi	r22, 0x05	; 5
    109e:	71 05       	cpc	r23, r1
    10a0:	1c f4       	brge	.+6      	; 0x10a8 <gc_execute_line+0xda>
    10a2:	77 ff       	sbrs	r23, 7
    10a4:	29 c0       	rjmp	.+82     	; 0x10f8 <gc_execute_line+0x12a>
    10a6:	34 c0       	rjmp	.+104    	; 0x1110 <gc_execute_line+0x142>
    10a8:	6a 30       	cpi	r22, 0x0A	; 10
    10aa:	71 05       	cpc	r23, r1
    10ac:	89 f5       	brne	.+98     	; 0x1110 <gc_execute_line+0x142>
    10ae:	22 c0       	rjmp	.+68     	; 0x10f4 <gc_execute_line+0x126>
    10b0:	66 31       	cpi	r22, 0x16	; 22
    10b2:	71 05       	cpc	r23, r1
    10b4:	4c f1       	brlt	.+82     	; 0x1108 <gc_execute_line+0x13a>
    10b6:	6c 31       	cpi	r22, 0x1C	; 28
    10b8:	71 05       	cpc	r23, r1
    10ba:	51 f5       	brne	.+84     	; 0x1110 <gc_execute_line+0x142>
    10bc:	1b c0       	rjmp	.+54     	; 0x10f4 <gc_execute_line+0x126>
    10be:	6c 35       	cpi	r22, 0x5C	; 92
    10c0:	71 05       	cpc	r23, r1
    10c2:	8c f4       	brge	.+34     	; 0x10e6 <gc_execute_line+0x118>
    10c4:	6a 35       	cpi	r22, 0x5A	; 90
    10c6:	71 05       	cpc	r23, r1
    10c8:	dc f4       	brge	.+54     	; 0x1100 <gc_execute_line+0x132>
    10ca:	6c 33       	cpi	r22, 0x3C	; 60
    10cc:	71 05       	cpc	r23, r1
    10ce:	3c f4       	brge	.+14     	; 0x10de <gc_execute_line+0x110>
    10d0:	66 33       	cpi	r22, 0x36	; 54
    10d2:	71 05       	cpc	r23, r1
    10d4:	dc f4       	brge	.+54     	; 0x110c <gc_execute_line+0x13e>
    10d6:	65 33       	cpi	r22, 0x35	; 53
    10d8:	71 05       	cpc	r23, r1
    10da:	d1 f4       	brne	.+52     	; 0x1110 <gc_execute_line+0x142>
    10dc:	0b c0       	rjmp	.+22     	; 0x10f4 <gc_execute_line+0x126>
    10de:	60 35       	cpi	r22, 0x50	; 80
    10e0:	71 05       	cpc	r23, r1
    10e2:	b1 f4       	brne	.+44     	; 0x1110 <gc_execute_line+0x142>
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <gc_execute_line+0x12a>
    10e6:	6c 35       	cpi	r22, 0x5C	; 92
    10e8:	71 05       	cpc	r23, r1
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <gc_execute_line+0x126>
    10ec:	6f 35       	cpi	r22, 0x5F	; 95
    10ee:	71 05       	cpc	r23, r1
    10f0:	7c f4       	brge	.+30     	; 0x1110 <gc_execute_line+0x142>
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <gc_execute_line+0x136>
          case 4: case 10: case 28: case 30: case 53: case 92: group_number = MODAL_GROUP_0; break;
    10f4:	11 e0       	ldi	r17, 0x01	; 1
    10f6:	0d c0       	rjmp	.+26     	; 0x1112 <gc_execute_line+0x144>
          case 0: case 1: case 2: case 3: case 80: group_number = MODAL_GROUP_1; break;
    10f8:	12 e0       	ldi	r17, 0x02	; 2
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <gc_execute_line+0x144>
          case 17: case 18: case 19: group_number = MODAL_GROUP_2; break;
    10fc:	13 e0       	ldi	r17, 0x03	; 3
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <gc_execute_line+0x144>
          case 90: case 91: group_number = MODAL_GROUP_3; break;
    1100:	14 e0       	ldi	r17, 0x04	; 4
    1102:	07 c0       	rjmp	.+14     	; 0x1112 <gc_execute_line+0x144>
          case 93: case 94: group_number = MODAL_GROUP_5; break;
    1104:	16 e0       	ldi	r17, 0x06	; 6
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <gc_execute_line+0x144>
          case 20: case 21: group_number = MODAL_GROUP_6; break;
    1108:	17 e0       	ldi	r17, 0x07	; 7
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <gc_execute_line+0x144>
          case 54: case 55: case 56: case 57: case 58: case 59: group_number = MODAL_GROUP_12; break;
    110c:	19 e0       	ldi	r17, 0x09	; 9
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <gc_execute_line+0x144>
  while(next_statement(&letter, &value, line, &char_counter)) {
    int_value = trunc(value);
    switch(letter) {
      case 'G':
	// Set modal group values
        switch(int_value) {
    1110:	10 e0       	ldi	r17, 0x00	; 0
          case 93: case 94: group_number = MODAL_GROUP_5; break;
          case 20: case 21: group_number = MODAL_GROUP_6; break;
          case 54: case 55: case 56: case 57: case 58: case 59: group_number = MODAL_GROUP_12; break;
        }          
        // Set 'G' commands
        switch(int_value) {
    1112:	65 31       	cpi	r22, 0x15	; 21
    1114:	71 05       	cpc	r23, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <gc_execute_line+0x14c>
    1118:	8c c0       	rjmp	.+280    	; 0x1232 <gc_execute_line+0x264>
    111a:	66 31       	cpi	r22, 0x16	; 22
    111c:	71 05       	cpc	r23, r1
    111e:	ac f5       	brge	.+106    	; 0x118a <gc_execute_line+0x1bc>
    1120:	64 30       	cpi	r22, 0x04	; 4
    1122:	71 05       	cpc	r23, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <gc_execute_line+0x15a>
    1126:	66 c0       	rjmp	.+204    	; 0x11f4 <gc_execute_line+0x226>
    1128:	65 30       	cpi	r22, 0x05	; 5
    112a:	71 05       	cpc	r23, r1
    112c:	ac f4       	brge	.+42     	; 0x1158 <gc_execute_line+0x18a>
    112e:	61 30       	cpi	r22, 0x01	; 1
    1130:	71 05       	cpc	r23, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <gc_execute_line+0x168>
    1134:	64 c0       	rjmp	.+200    	; 0x11fe <gc_execute_line+0x230>
    1136:	62 30       	cpi	r22, 0x02	; 2
    1138:	71 05       	cpc	r23, r1
    113a:	2c f4       	brge	.+10     	; 0x1146 <gc_execute_line+0x178>
    113c:	61 15       	cp	r22, r1
    113e:	71 05       	cpc	r23, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <gc_execute_line+0x176>
    1142:	5a c0       	rjmp	.+180    	; 0x11f8 <gc_execute_line+0x22a>
    1144:	e9 c0       	rjmp	.+466    	; 0x1318 <gc_execute_line+0x34a>
    1146:	62 30       	cpi	r22, 0x02	; 2
    1148:	71 05       	cpc	r23, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <gc_execute_line+0x180>
    114c:	5b c0       	rjmp	.+182    	; 0x1204 <gc_execute_line+0x236>
    114e:	63 30       	cpi	r22, 0x03	; 3
    1150:	71 05       	cpc	r23, r1
    1152:	09 f0       	breq	.+2      	; 0x1156 <gc_execute_line+0x188>
    1154:	e1 c0       	rjmp	.+450    	; 0x1318 <gc_execute_line+0x34a>
    1156:	5a c0       	rjmp	.+180    	; 0x120c <gc_execute_line+0x23e>
    1158:	62 31       	cpi	r22, 0x12	; 18
    115a:	71 05       	cpc	r23, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <gc_execute_line+0x192>
    115e:	5d c0       	rjmp	.+186    	; 0x121a <gc_execute_line+0x24c>
    1160:	63 31       	cpi	r22, 0x13	; 19
    1162:	71 05       	cpc	r23, r1
    1164:	4c f4       	brge	.+18     	; 0x1178 <gc_execute_line+0x1aa>
    1166:	6a 30       	cpi	r22, 0x0A	; 10
    1168:	71 05       	cpc	r23, r1
    116a:	09 f4       	brne	.+2      	; 0x116e <gc_execute_line+0x1a0>
    116c:	d8 c0       	rjmp	.+432    	; 0x131e <gc_execute_line+0x350>
    116e:	61 31       	cpi	r22, 0x11	; 17
    1170:	71 05       	cpc	r23, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <gc_execute_line+0x1a8>
    1174:	d1 c0       	rjmp	.+418    	; 0x1318 <gc_execute_line+0x34a>
    1176:	4d c0       	rjmp	.+154    	; 0x1212 <gc_execute_line+0x244>
    1178:	63 31       	cpi	r22, 0x13	; 19
    117a:	71 05       	cpc	r23, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <gc_execute_line+0x1b2>
    117e:	51 c0       	rjmp	.+162    	; 0x1222 <gc_execute_line+0x254>
    1180:	64 31       	cpi	r22, 0x14	; 20
    1182:	71 05       	cpc	r23, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <gc_execute_line+0x1ba>
    1186:	c8 c0       	rjmp	.+400    	; 0x1318 <gc_execute_line+0x34a>
    1188:	51 c0       	rjmp	.+162    	; 0x122c <gc_execute_line+0x25e>
    118a:	60 35       	cpi	r22, 0x50	; 80
    118c:	71 05       	cpc	r23, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <gc_execute_line+0x1c4>
    1190:	5f c0       	rjmp	.+190    	; 0x1250 <gc_execute_line+0x282>
    1192:	61 35       	cpi	r22, 0x51	; 81
    1194:	71 05       	cpc	r23, r1
    1196:	ac f4       	brge	.+42     	; 0x11c2 <gc_execute_line+0x1f4>
    1198:	65 33       	cpi	r22, 0x35	; 53
    119a:	71 05       	cpc	r23, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <gc_execute_line+0x1d2>
    119e:	4e c0       	rjmp	.+156    	; 0x123c <gc_execute_line+0x26e>
    11a0:	66 33       	cpi	r22, 0x36	; 54
    11a2:	71 05       	cpc	r23, r1
    11a4:	4c f4       	brge	.+18     	; 0x11b8 <gc_execute_line+0x1ea>
    11a6:	6c 31       	cpi	r22, 0x1C	; 28
    11a8:	71 05       	cpc	r23, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <gc_execute_line+0x1e0>
    11ac:	45 c0       	rjmp	.+138    	; 0x1238 <gc_execute_line+0x26a>
    11ae:	6e 31       	cpi	r22, 0x1E	; 30
    11b0:	71 05       	cpc	r23, r1
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <gc_execute_line+0x1e8>
    11b4:	b1 c0       	rjmp	.+354    	; 0x1318 <gc_execute_line+0x34a>
    11b6:	40 c0       	rjmp	.+128    	; 0x1238 <gc_execute_line+0x26a>
    11b8:	6c 33       	cpi	r22, 0x3C	; 60
    11ba:	71 05       	cpc	r23, r1
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <gc_execute_line+0x1f2>
    11be:	ac c0       	rjmp	.+344    	; 0x1318 <gc_execute_line+0x34a>
    11c0:	40 c0       	rjmp	.+128    	; 0x1242 <gc_execute_line+0x274>
    11c2:	6c 35       	cpi	r22, 0x5C	; 92
    11c4:	71 05       	cpc	r23, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <gc_execute_line+0x1fc>
    11c8:	4d c0       	rjmp	.+154    	; 0x1264 <gc_execute_line+0x296>
    11ca:	6d 35       	cpi	r22, 0x5D	; 93
    11cc:	71 05       	cpc	r23, r1
    11ce:	4c f4       	brge	.+18     	; 0x11e2 <gc_execute_line+0x214>
    11d0:	6a 35       	cpi	r22, 0x5A	; 90
    11d2:	71 05       	cpc	r23, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <gc_execute_line+0x20a>
    11d6:	40 c0       	rjmp	.+128    	; 0x1258 <gc_execute_line+0x28a>
    11d8:	6b 35       	cpi	r22, 0x5B	; 91
    11da:	71 05       	cpc	r23, r1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <gc_execute_line+0x212>
    11de:	9c c0       	rjmp	.+312    	; 0x1318 <gc_execute_line+0x34a>
    11e0:	3e c0       	rjmp	.+124    	; 0x125e <gc_execute_line+0x290>
    11e2:	6d 35       	cpi	r22, 0x5D	; 93
    11e4:	71 05       	cpc	r23, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <gc_execute_line+0x21c>
    11e8:	55 c0       	rjmp	.+170    	; 0x1294 <gc_execute_line+0x2c6>
    11ea:	6e 35       	cpi	r22, 0x5E	; 94
    11ec:	71 05       	cpc	r23, r1
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <gc_execute_line+0x224>
    11f0:	93 c0       	rjmp	.+294    	; 0x1318 <gc_execute_line+0x34a>
    11f2:	53 c0       	rjmp	.+166    	; 0x129a <gc_execute_line+0x2cc>
          case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
          case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
          case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
          case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
          case 4: non_modal_action = NON_MODAL_DWELL; break;
    11f4:	01 e0       	ldi	r16, 0x01	; 1
    11f6:	96 c0       	rjmp	.+300    	; 0x1324 <gc_execute_line+0x356>
          case 20: case 21: group_number = MODAL_GROUP_6; break;
          case 54: case 55: case 56: case 57: case 58: case 59: group_number = MODAL_GROUP_12; break;
        }          
        // Set 'G' commands
        switch(int_value) {
          case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
    11f8:	10 92 37 01 	sts	0x0137, r1
    11fc:	93 c0       	rjmp	.+294    	; 0x1324 <gc_execute_line+0x356>
          case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
    11fe:	f0 92 37 01 	sts	0x0137, r15
    1202:	90 c0       	rjmp	.+288    	; 0x1324 <gc_execute_line+0x356>
          case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	80 93 37 01 	sts	0x0137, r24
    120a:	8c c0       	rjmp	.+280    	; 0x1324 <gc_execute_line+0x356>
          case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
    120c:	e0 92 37 01 	sts	0x0137, r14
    1210:	89 c0       	rjmp	.+274    	; 0x1324 <gc_execute_line+0x356>
          case 4: non_modal_action = NON_MODAL_DWELL; break;
          case 10: non_modal_action = NON_MODAL_SET_COORDINATE_DATA; break;
          case 17: select_plane(X_AXIS, Y_AXIS, Z_AXIS); break;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	42 e0       	ldi	r20, 0x02	; 2
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <gc_execute_line+0x25a>
          case 18: select_plane(X_AXIS, Z_AXIS, Y_AXIS); break;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	62 e0       	ldi	r22, 0x02	; 2
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <gc_execute_line+0x25a>
          case 19: select_plane(Y_AXIS, Z_AXIS, X_AXIS); break;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	21 de       	rcall	.-958    	; 0xe6c <select_plane>
    122a:	7c c0       	rjmp	.+248    	; 0x1324 <gc_execute_line+0x356>
          case 20: gc.inches_mode = true; break;
    122c:	f0 92 39 01 	sts	0x0139, r15
    1230:	79 c0       	rjmp	.+242    	; 0x1324 <gc_execute_line+0x356>
          case 21: gc.inches_mode = false; break;
    1232:	10 92 39 01 	sts	0x0139, r1
    1236:	76 c0       	rjmp	.+236    	; 0x1324 <gc_execute_line+0x356>
          case 28: case 30: non_modal_action = NON_MODAL_GO_HOME; break;
    1238:	03 e0       	ldi	r16, 0x03	; 3
    123a:	74 c0       	rjmp	.+232    	; 0x1324 <gc_execute_line+0x356>
          case 53: absolute_override = true; break;
    123c:	b1 e0       	ldi	r27, 0x01	; 1
    123e:	b9 a7       	std	Y+41, r27	; 0x29
    1240:	71 c0       	rjmp	.+226    	; 0x1324 <gc_execute_line+0x356>
          case 54: case 55: case 56: case 57: case 58: case 59:
            int_value -= 54; // Compute coordinate system row index (0=G54,1=G55,...)
            if (int_value < N_COORDINATE_SYSTEM) {
    1242:	66 33       	cpi	r22, 0x36	; 54
    1244:	71 05       	cpc	r23, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <gc_execute_line+0x27c>
    1248:	67 c0       	rjmp	.+206    	; 0x1318 <gc_execute_line+0x34a>
              sys.coord_select = int_value;
    124a:	10 92 19 06 	sts	0x0619, r1
    124e:	6a c0       	rjmp	.+212    	; 0x1324 <gc_execute_line+0x356>
            } else {
              FAIL(STATUS_UNSUPPORTED_STATEMENT);
            }
            break;
          case 80: gc.motion_mode = MOTION_MODE_CANCEL; break;
    1250:	e4 e0       	ldi	r30, 0x04	; 4
    1252:	e0 93 37 01 	sts	0x0137, r30
    1256:	66 c0       	rjmp	.+204    	; 0x1324 <gc_execute_line+0x356>
          case 90: gc.absolute_mode = true; break;
    1258:	f0 92 3a 01 	sts	0x013A, r15
    125c:	63 c0       	rjmp	.+198    	; 0x1324 <gc_execute_line+0x356>
          case 91: gc.absolute_mode = false; break;
    125e:	10 92 3a 01 	sts	0x013A, r1
    1262:	60 c0       	rjmp	.+192    	; 0x1324 <gc_execute_line+0x356>
          case 92: 
            int_value = trunc(10*value); // Multiply by 10 to pick up G92.1
    1264:	c6 01       	movw	r24, r12
    1266:	b5 01       	movw	r22, r10
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1274:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
    1278:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
            switch(int_value) {
    127c:	f3 e0       	ldi	r31, 0x03	; 3
    127e:	68 39       	cpi	r22, 0x98	; 152
    1280:	7f 07       	cpc	r23, r31
    1282:	31 f0       	breq	.+12     	; 0x1290 <gc_execute_line+0x2c2>
    1284:	23 e0       	ldi	r18, 0x03	; 3
    1286:	69 39       	cpi	r22, 0x99	; 153
    1288:	72 07       	cpc	r23, r18
    128a:	09 f0       	breq	.+2      	; 0x128e <gc_execute_line+0x2c0>
    128c:	45 c0       	rjmp	.+138    	; 0x1318 <gc_execute_line+0x34a>
    128e:	49 c0       	rjmp	.+146    	; 0x1322 <gc_execute_line+0x354>
              case 920: non_modal_action = NON_MODAL_SET_COORDINATE_OFFSET; break;        
    1290:	04 e0       	ldi	r16, 0x04	; 4
    1292:	48 c0       	rjmp	.+144    	; 0x1324 <gc_execute_line+0x356>
              case 921: non_modal_action = NON_MODAL_RESET_COORDINATE_OFFSET; break;
              default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
            }
            break;
          case 93: gc.inverse_feed_rate_mode = true; break;
    1294:	f0 92 38 01 	sts	0x0138, r15
    1298:	45 c0       	rjmp	.+138    	; 0x1324 <gc_execute_line+0x356>
          case 94: gc.inverse_feed_rate_mode = false; break;
    129a:	10 92 38 01 	sts	0x0138, r1
    129e:	42 c0       	rjmp	.+132    	; 0x1324 <gc_execute_line+0x356>
          default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
        }
        break;        
      case 'M':
        // Set modal group values
        switch(int_value) {
    12a0:	66 30       	cpi	r22, 0x06	; 6
    12a2:	71 05       	cpc	r23, r1
    12a4:	34 f4       	brge	.+12     	; 0x12b2 <gc_execute_line+0x2e4>
    12a6:	63 30       	cpi	r22, 0x03	; 3
    12a8:	71 05       	cpc	r23, r1
    12aa:	44 f4       	brge	.+16     	; 0x12bc <gc_execute_line+0x2ee>
    12ac:	77 ff       	sbrs	r23, 7
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <gc_execute_line+0x2ea>
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <gc_execute_line+0x2f2>
    12b2:	6e 31       	cpi	r22, 0x1E	; 30
    12b4:	71 05       	cpc	r23, r1
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <gc_execute_line+0x2f2>
          case 0: case 1: case 2: case 30: group_number = MODAL_GROUP_4; break;
    12b8:	15 e0       	ldi	r17, 0x05	; 5
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <gc_execute_line+0x2f4>
          case 3: case 4: case 5: group_number = MODAL_GROUP_7; break;
    12bc:	18 e0       	ldi	r17, 0x08	; 8
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <gc_execute_line+0x2f4>
          default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
        }
        break;        
      case 'M':
        // Set modal group values
        switch(int_value) {
    12c0:	10 e0       	ldi	r17, 0x00	; 0
          case 0: case 1: case 2: case 30: group_number = MODAL_GROUP_4; break;
          case 3: case 4: case 5: group_number = MODAL_GROUP_7; break;
        }        
        // Set 'M' commands
        switch(int_value) {
    12c2:	63 30       	cpi	r22, 0x03	; 3
    12c4:	71 05       	cpc	r23, r1
    12c6:	f1 f0       	breq	.+60     	; 0x1304 <gc_execute_line+0x336>
    12c8:	64 30       	cpi	r22, 0x04	; 4
    12ca:	71 05       	cpc	r23, r1
    12cc:	54 f4       	brge	.+20     	; 0x12e2 <gc_execute_line+0x314>
    12ce:	61 30       	cpi	r22, 0x01	; 1
    12d0:	71 05       	cpc	r23, r1
    12d2:	89 f0       	breq	.+34     	; 0x12f6 <gc_execute_line+0x328>
    12d4:	62 30       	cpi	r22, 0x02	; 2
    12d6:	71 05       	cpc	r23, r1
    12d8:	8c f4       	brge	.+34     	; 0x12fc <gc_execute_line+0x32e>
    12da:	61 15       	cp	r22, r1
    12dc:	71 05       	cpc	r23, r1
    12de:	59 f0       	breq	.+22     	; 0x12f6 <gc_execute_line+0x328>
    12e0:	1b c0       	rjmp	.+54     	; 0x1318 <gc_execute_line+0x34a>
    12e2:	65 30       	cpi	r22, 0x05	; 5
    12e4:	71 05       	cpc	r23, r1
    12e6:	a9 f0       	breq	.+42     	; 0x1312 <gc_execute_line+0x344>
    12e8:	65 30       	cpi	r22, 0x05	; 5
    12ea:	71 05       	cpc	r23, r1
    12ec:	74 f0       	brlt	.+28     	; 0x130a <gc_execute_line+0x33c>
    12ee:	6e 31       	cpi	r22, 0x1E	; 30
    12f0:	71 05       	cpc	r23, r1
    12f2:	91 f4       	brne	.+36     	; 0x1318 <gc_execute_line+0x34a>
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <gc_execute_line+0x32e>
          case 0: gc.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
          case 1: // Program pause with optional stop on
            // if (sys.opt_stop) { // TODO: Add system variable for optional stop.
            gc.program_flow = PROGRAM_FLOW_PAUSED; break; 
    12f6:	f0 92 3b 01 	sts	0x013B, r15
    12fa:	14 c0       	rjmp	.+40     	; 0x1324 <gc_execute_line+0x356>
            // }
          case 2: case 30: gc.program_flow = PROGRAM_FLOW_COMPLETED; break; // Program end and reset 
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	80 93 3b 01 	sts	0x013B, r24
    1302:	10 c0       	rjmp	.+32     	; 0x1324 <gc_execute_line+0x356>
          case 3: gc.spindle_direction = 1; break;
    1304:	f0 92 3c 01 	sts	0x013C, r15
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <gc_execute_line+0x356>
          case 4: gc.spindle_direction = -1; break;
    130a:	3f ef       	ldi	r19, 0xFF	; 255
    130c:	30 93 3c 01 	sts	0x013C, r19
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <gc_execute_line+0x356>
          case 5: gc.spindle_direction = 0; break;
    1312:	10 92 3c 01 	sts	0x013C, r1
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <gc_execute_line+0x356>
          default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
    1318:	e0 92 36 01 	sts	0x0136, r14
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <gc_execute_line+0x356>
          case 0: gc.motion_mode = MOTION_MODE_SEEK; break;
          case 1: gc.motion_mode = MOTION_MODE_LINEAR; break;
          case 2: gc.motion_mode = MOTION_MODE_CW_ARC; break;
          case 3: gc.motion_mode = MOTION_MODE_CCW_ARC; break;
          case 4: non_modal_action = NON_MODAL_DWELL; break;
          case 10: non_modal_action = NON_MODAL_SET_COORDINATE_DATA; break;
    131e:	02 e0       	ldi	r16, 0x02	; 2
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <gc_execute_line+0x356>
          case 91: gc.absolute_mode = false; break;
          case 92: 
            int_value = trunc(10*value); // Multiply by 10 to pick up G92.1
            switch(int_value) {
              case 920: non_modal_action = NON_MODAL_SET_COORDINATE_OFFSET; break;        
              case 921: non_modal_action = NON_MODAL_RESET_COORDINATE_OFFSET; break;
    1322:	05 e0       	ldi	r16, 0x05	; 5
          default: FAIL(STATUS_UNSUPPORTED_STATEMENT);
        }            
        break;
    }    
    // Check for modal group multiple command violations in the current block
    if (group_number) {
    1324:	11 23       	and	r17, r17
    1326:	b1 f0       	breq	.+44     	; 0x1354 <gc_execute_line+0x386>
      if ( bit_istrue(modal_group_words,bit(group_number)) ) {
    1328:	93 01       	movw	r18, r6
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <gc_execute_line+0x362>
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	1a 95       	dec	r17
    1332:	e2 f7       	brpl	.-8      	; 0x132c <gc_execute_line+0x35e>
    1334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1336:	98 a1       	ldd	r25, Y+32	; 0x20
    1338:	82 23       	and	r24, r18
    133a:	93 23       	and	r25, r19
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	21 f0       	breq	.+8      	; 0x1348 <gc_execute_line+0x37a>
        FAIL(STATUS_MODAL_GROUP_VIOLATION);
    1340:	45 e0       	ldi	r20, 0x05	; 5
    1342:	40 93 36 01 	sts	0x0136, r20
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <gc_execute_line+0x386>
      } else {
        bit_true(modal_group_words,bit(group_number));
    1348:	6f 8d       	ldd	r22, Y+31	; 0x1f
    134a:	78 a1       	ldd	r23, Y+32	; 0x20
    134c:	62 2b       	or	r22, r18
    134e:	73 2b       	or	r23, r19
    1350:	78 a3       	std	Y+32, r23	; 0x20
    1352:	6f 8f       	std	Y+31, r22	; 0x1f
  gc.status_code = STATUS_OK;
  
  /* Pass 1: Commands and set all modes. Check for modal group violations.
     NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */
  uint8_t group_number = MODAL_GROUP_NONE;
  while(next_statement(&letter, &value, line, &char_counter)) {
    1354:	c2 01       	movw	r24, r4
    1356:	b1 01       	movw	r22, r2
    1358:	4a a5       	ldd	r20, Y+42	; 0x2a
    135a:	5b a5       	ldd	r21, Y+43	; 0x2b
    135c:	94 01       	movw	r18, r8
    135e:	98 dd       	rcall	.-1232   	; 0xe90 <next_statement>
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	09 f0       	breq	.+2      	; 0x1366 <gc_execute_line+0x398>
    1364:	7b ce       	rjmp	.-778    	; 0x105c <gc_execute_line+0x8e>
      group_number = MODAL_GROUP_NONE; // Reset for next command.
    }
  } 

  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    1366:	80 91 36 01 	lds	r24, 0x0136
    136a:	88 23       	and	r24, r24
    136c:	09 f0       	breq	.+2      	; 0x1370 <gc_execute_line+0x3a2>
    136e:	42 c5       	rjmp	.+2692   	; 0x1df4 <gc_execute_line+0xe26>
  /* Pass 2: Parameters. All units converted according to current block commands. Position 
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
  uint8_t l = 0;
  char_counter = 0;
    1370:	19 82       	std	Y+1, r1	; 0x01
  
  /* Pass 2: Parameters. All units converted according to current block commands. Position 
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
  uint8_t l = 0;
    1372:	ee 24       	eor	r14, r14
  if (gc.status_code) { return(gc.status_code); }
  
  /* Pass 2: Parameters. All units converted according to current block commands. Position 
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	dc 01       	movw	r26, r24
    137a:	89 a3       	std	Y+33, r24	; 0x21
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	ab a3       	std	Y+35, r26	; 0x23
    1380:	bc a3       	std	Y+36, r27	; 0x24
    1382:	5c 01       	movw	r10, r24
    1384:	6d 01       	movw	r12, r26
  int int_value;
  
  uint16_t modal_group_words = 0;  // Bitflag variable to track and check modal group words in block
  uint8_t axis_words = 0;          // Bitflag to track which XYZ(ABC) parameters exist in block

  double inverse_feed_rate = -1; // negative inverse_feed_rate means no inverse_feed_rate specified
    1386:	1d a2       	std	Y+37, r1	; 0x25
    1388:	1e a2       	std	Y+38, r1	; 0x26
    138a:	90 e8       	ldi	r25, 0x80	; 128
    138c:	9f a3       	std	Y+39, r25	; 0x27
    138e:	af eb       	ldi	r26, 0xBF	; 191
    1390:	a8 a7       	std	Y+40, r26	; 0x28
  char letter;
  double value;
  int int_value;
  
  uint16_t modal_group_words = 0;  // Bitflag variable to track and check modal group words in block
  uint8_t axis_words = 0;          // Bitflag to track which XYZ(ABC) parameters exist in block
    1392:	ff 24       	eor	r15, r15
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
  uint8_t l = 0;
  char_counter = 0;
  while(next_statement(&letter, &value, line, &char_counter)) {
    1394:	b2 e0       	ldi	r27, 0x02	; 2
    1396:	2b 2e       	mov	r2, r27
    1398:	31 2c       	mov	r3, r1
    139a:	2c 0e       	add	r2, r28
    139c:	3d 1e       	adc	r3, r29
    139e:	2e 01       	movw	r4, r28
    13a0:	08 94       	sec
    13a2:	41 1c       	adc	r4, r1
    13a4:	51 1c       	adc	r5, r1
      case 'I': case 'J': case 'K': offset[letter-'I'] = to_millimeters(value); break;
      case 'L': l = trunc(value); break;
      case 'P': p = value; break;                    
      case 'R': r = to_millimeters(value); break;
      case 'S': 
        if (value < 0) { FAIL(STATUS_INVALID_COMMAND); } // Cannot be negative
    13a6:	16 e0       	ldi	r17, 0x06	; 6
    13a8:	80 2f       	mov	r24, r16
    13aa:	0f 2d       	mov	r16, r15
    13ac:	35 01       	movw	r6, r10
    13ae:	46 01       	movw	r8, r12
    13b0:	f8 2e       	mov	r15, r24
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
  uint8_t l = 0;
  char_counter = 0;
  while(next_statement(&letter, &value, line, &char_counter)) {
    13b2:	cf c0       	rjmp	.+414    	; 0x1552 <gc_execute_line+0x584>
    switch(letter) {
    13b4:	2a 81       	ldd	r18, Y+2	; 0x02
    13b6:	22 35       	cpi	r18, 0x52	; 82
    13b8:	09 f4       	brne	.+2      	; 0x13bc <gc_execute_line+0x3ee>
    13ba:	71 c0       	rjmp	.+226    	; 0x149e <gc_execute_line+0x4d0>
    13bc:	23 35       	cpi	r18, 0x53	; 83
    13be:	80 f4       	brcc	.+32     	; 0x13e0 <gc_execute_line+0x412>
    13c0:	2c 34       	cpi	r18, 0x4C	; 76
    13c2:	38 f4       	brcc	.+14     	; 0x13d2 <gc_execute_line+0x404>
    13c4:	29 34       	cpi	r18, 0x49	; 73
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <gc_execute_line+0x3fc>
    13c8:	45 c0       	rjmp	.+138    	; 0x1454 <gc_execute_line+0x486>
    13ca:	26 34       	cpi	r18, 0x46	; 70
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <gc_execute_line+0x402>
    13ce:	c1 c0       	rjmp	.+386    	; 0x1552 <gc_execute_line+0x584>
    13d0:	1a c0       	rjmp	.+52     	; 0x1406 <gc_execute_line+0x438>
    13d2:	2c 34       	cpi	r18, 0x4C	; 76
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <gc_execute_line+0x40a>
    13d6:	54 c0       	rjmp	.+168    	; 0x1480 <gc_execute_line+0x4b2>
    13d8:	20 35       	cpi	r18, 0x50	; 80
    13da:	09 f0       	breq	.+2      	; 0x13de <gc_execute_line+0x410>
    13dc:	ba c0       	rjmp	.+372    	; 0x1552 <gc_execute_line+0x584>
    13de:	5a c0       	rjmp	.+180    	; 0x1494 <gc_execute_line+0x4c6>
    13e0:	28 35       	cpi	r18, 0x58	; 88
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <gc_execute_line+0x418>
    13e4:	96 c0       	rjmp	.+300    	; 0x1512 <gc_execute_line+0x544>
    13e6:	29 35       	cpi	r18, 0x59	; 89
    13e8:	38 f4       	brcc	.+14     	; 0x13f8 <gc_execute_line+0x42a>
    13ea:	23 35       	cpi	r18, 0x53	; 83
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <gc_execute_line+0x422>
    13ee:	61 c0       	rjmp	.+194    	; 0x14b2 <gc_execute_line+0x4e4>
    13f0:	24 35       	cpi	r18, 0x54	; 84
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <gc_execute_line+0x428>
    13f4:	ae c0       	rjmp	.+348    	; 0x1552 <gc_execute_line+0x584>
    13f6:	75 c0       	rjmp	.+234    	; 0x14e2 <gc_execute_line+0x514>
    13f8:	29 35       	cpi	r18, 0x59	; 89
    13fa:	09 f4       	brne	.+2      	; 0x13fe <gc_execute_line+0x430>
    13fc:	95 c0       	rjmp	.+298    	; 0x1528 <gc_execute_line+0x55a>
    13fe:	2a 35       	cpi	r18, 0x5A	; 90
    1400:	09 f0       	breq	.+2      	; 0x1404 <gc_execute_line+0x436>
    1402:	a7 c0       	rjmp	.+334    	; 0x1552 <gc_execute_line+0x584>
    1404:	9c c0       	rjmp	.+312    	; 0x153e <gc_execute_line+0x570>
      case 'F': 
        if (value <= 0) { FAIL(STATUS_INVALID_COMMAND); } // Must be greater than zero
    1406:	ab 80       	ldd	r10, Y+3	; 0x03
    1408:	bc 80       	ldd	r11, Y+4	; 0x04
    140a:	cd 80       	ldd	r12, Y+5	; 0x05
    140c:	de 80       	ldd	r13, Y+6	; 0x06
    140e:	c6 01       	movw	r24, r12
    1410:	b5 01       	movw	r22, r10
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    141c:	18 16       	cp	r1, r24
    141e:	14 f0       	brlt	.+4      	; 0x1424 <gc_execute_line+0x456>
    1420:	10 93 36 01 	sts	0x0136, r17
        if (gc.inverse_feed_rate_mode) {
    1424:	80 91 38 01 	lds	r24, 0x0138
    1428:	88 23       	and	r24, r24
    142a:	41 f0       	breq	.+16     	; 0x143c <gc_execute_line+0x46e>
          inverse_feed_rate = to_millimeters(value); // seconds per motion for this motion only
    142c:	c6 01       	movw	r24, r12
    142e:	b5 01       	movw	r22, r10
    1430:	24 dd       	rcall	.-1464   	; 0xe7a <to_millimeters>
    1432:	6d a3       	std	Y+37, r22	; 0x25
    1434:	7e a3       	std	Y+38, r23	; 0x26
    1436:	8f a3       	std	Y+39, r24	; 0x27
    1438:	98 a7       	std	Y+40, r25	; 0x28
    143a:	8b c0       	rjmp	.+278    	; 0x1552 <gc_execute_line+0x584>
        } else {          
          gc.feed_rate = to_millimeters(value); // millimeters per minute
    143c:	c6 01       	movw	r24, r12
    143e:	b5 01       	movw	r22, r10
    1440:	1c dd       	rcall	.-1480   	; 0xe7a <to_millimeters>
    1442:	60 93 3d 01 	sts	0x013D, r22
    1446:	70 93 3e 01 	sts	0x013E, r23
    144a:	80 93 3f 01 	sts	0x013F, r24
    144e:	90 93 40 01 	sts	0x0140, r25
    1452:	7f c0       	rjmp	.+254    	; 0x1552 <gc_execute_line+0x584>
        }
        break;
      case 'I': case 'J': case 'K': offset[letter-'I'] = to_millimeters(value); break;
    1454:	6b 81       	ldd	r22, Y+3	; 0x03
    1456:	7c 81       	ldd	r23, Y+4	; 0x04
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	2c a7       	std	Y+44, r18	; 0x2c
    145e:	0d dd       	rcall	.-1510   	; 0xe7a <to_millimeters>
    1460:	2c a5       	ldd	r18, Y+44	; 0x2c
    1462:	e2 2f       	mov	r30, r18
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	e9 54       	subi	r30, 0x49	; 73
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	e4 0d       	add	r30, r4
    1474:	f5 1d       	adc	r31, r5
    1476:	62 8b       	std	Z+18, r22	; 0x12
    1478:	73 8b       	std	Z+19, r23	; 0x13
    147a:	84 8b       	std	Z+20, r24	; 0x14
    147c:	95 8b       	std	Z+21, r25	; 0x15
    147e:	69 c0       	rjmp	.+210    	; 0x1552 <gc_execute_line+0x584>
      case 'L': l = trunc(value); break;
    1480:	6b 81       	ldd	r22, Y+3	; 0x03
    1482:	7c 81       	ldd	r23, Y+4	; 0x04
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
    148c:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    1490:	e6 2e       	mov	r14, r22
    1492:	5f c0       	rjmp	.+190    	; 0x1552 <gc_execute_line+0x584>
      case 'P': p = value; break;                    
    1494:	6b 80       	ldd	r6, Y+3	; 0x03
    1496:	7c 80       	ldd	r7, Y+4	; 0x04
    1498:	8d 80       	ldd	r8, Y+5	; 0x05
    149a:	9e 80       	ldd	r9, Y+6	; 0x06
    149c:	5a c0       	rjmp	.+180    	; 0x1552 <gc_execute_line+0x584>
      case 'R': r = to_millimeters(value); break;
    149e:	6b 81       	ldd	r22, Y+3	; 0x03
    14a0:	7c 81       	ldd	r23, Y+4	; 0x04
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	e9 dc       	rcall	.-1582   	; 0xe7a <to_millimeters>
    14a8:	69 a3       	std	Y+33, r22	; 0x21
    14aa:	7a a3       	std	Y+34, r23	; 0x22
    14ac:	8b a3       	std	Y+35, r24	; 0x23
    14ae:	9c a3       	std	Y+36, r25	; 0x24
    14b0:	50 c0       	rjmp	.+160    	; 0x1552 <gc_execute_line+0x584>
      case 'S': 
        if (value < 0) { FAIL(STATUS_INVALID_COMMAND); } // Cannot be negative
    14b2:	ab 80       	ldd	r10, Y+3	; 0x03
    14b4:	bc 80       	ldd	r11, Y+4	; 0x04
    14b6:	cd 80       	ldd	r12, Y+5	; 0x05
    14b8:	de 80       	ldd	r13, Y+6	; 0x06
    14ba:	c6 01       	movw	r24, r12
    14bc:	b5 01       	movw	r22, r10
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    14c8:	87 ff       	sbrs	r24, 7
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <gc_execute_line+0x502>
    14cc:	10 93 36 01 	sts	0x0136, r17
        gc.spindle_speed = value;
    14d0:	c6 01       	movw	r24, r12
    14d2:	b5 01       	movw	r22, r10
    14d4:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    14d8:	70 93 53 01 	sts	0x0153, r23
    14dc:	60 93 52 01 	sts	0x0152, r22
        break;
    14e0:	38 c0       	rjmp	.+112    	; 0x1552 <gc_execute_line+0x584>
      case 'T': 
        if (value < 0) { FAIL(STATUS_INVALID_COMMAND); } // Cannot be negative
    14e2:	ab 80       	ldd	r10, Y+3	; 0x03
    14e4:	bc 80       	ldd	r11, Y+4	; 0x04
    14e6:	cd 80       	ldd	r12, Y+5	; 0x05
    14e8:	de 80       	ldd	r13, Y+6	; 0x06
    14ea:	c6 01       	movw	r24, r12
    14ec:	b5 01       	movw	r22, r10
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    14f8:	87 ff       	sbrs	r24, 7
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <gc_execute_line+0x532>
    14fc:	10 93 36 01 	sts	0x0136, r17
        gc.tool = trunc(value); 
    1500:	c6 01       	movw	r24, r12
    1502:	b5 01       	movw	r22, r10
    1504:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
    1508:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    150c:	60 93 51 01 	sts	0x0151, r22
        break;
    1510:	20 c0       	rjmp	.+64     	; 0x1552 <gc_execute_line+0x584>
      case 'X': target[X_AXIS] = to_millimeters(value); bit_true(axis_words,bit(X_AXIS)); break;
    1512:	6b 81       	ldd	r22, Y+3	; 0x03
    1514:	7c 81       	ldd	r23, Y+4	; 0x04
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	af dc       	rcall	.-1698   	; 0xe7a <to_millimeters>
    151c:	6f 83       	std	Y+7, r22	; 0x07
    151e:	78 87       	std	Y+8, r23	; 0x08
    1520:	89 87       	std	Y+9, r24	; 0x09
    1522:	9a 87       	std	Y+10, r25	; 0x0a
    1524:	01 60       	ori	r16, 0x01	; 1
    1526:	15 c0       	rjmp	.+42     	; 0x1552 <gc_execute_line+0x584>
      case 'Y': target[Y_AXIS] = to_millimeters(value); bit_true(axis_words,bit(Y_AXIS)); break;
    1528:	6b 81       	ldd	r22, Y+3	; 0x03
    152a:	7c 81       	ldd	r23, Y+4	; 0x04
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	a4 dc       	rcall	.-1720   	; 0xe7a <to_millimeters>
    1532:	6b 87       	std	Y+11, r22	; 0x0b
    1534:	7c 87       	std	Y+12, r23	; 0x0c
    1536:	8d 87       	std	Y+13, r24	; 0x0d
    1538:	9e 87       	std	Y+14, r25	; 0x0e
    153a:	02 60       	ori	r16, 0x02	; 2
    153c:	0a c0       	rjmp	.+20     	; 0x1552 <gc_execute_line+0x584>
      case 'Z': target[Z_AXIS] = to_millimeters(value); bit_true(axis_words,bit(Z_AXIS)); break;
    153e:	6b 81       	ldd	r22, Y+3	; 0x03
    1540:	7c 81       	ldd	r23, Y+4	; 0x04
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	99 dc       	rcall	.-1742   	; 0xe7a <to_millimeters>
    1548:	6f 87       	std	Y+15, r22	; 0x0f
    154a:	78 8b       	std	Y+16, r23	; 0x10
    154c:	89 8b       	std	Y+17, r24	; 0x11
    154e:	9a 8b       	std	Y+18, r25	; 0x12
    1550:	04 60       	ori	r16, 0x04	; 4
     parameters are converted and flagged to indicate a change. These can have multiple connotations
     for different commands. Each will be converted to their proper value upon execution. */
  double p = 0, r = 0;
  uint8_t l = 0;
  char_counter = 0;
  while(next_statement(&letter, &value, line, &char_counter)) {
    1552:	c1 01       	movw	r24, r2
    1554:	be 01       	movw	r22, r28
    1556:	6d 5f       	subi	r22, 0xFD	; 253
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	4a a5       	ldd	r20, Y+42	; 0x2a
    155c:	5b a5       	ldd	r21, Y+43	; 0x2b
    155e:	92 01       	movw	r18, r4
    1560:	97 dc       	rcall	.-1746   	; 0xe90 <next_statement>
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	09 f0       	breq	.+2      	; 0x1568 <gc_execute_line+0x59a>
    1566:	26 cf       	rjmp	.-436    	; 0x13b4 <gc_execute_line+0x3e6>
    1568:	8f 2d       	mov	r24, r15
    156a:	f0 2e       	mov	r15, r16
    156c:	08 2f       	mov	r16, r24
      case 'Z': target[Z_AXIS] = to_millimeters(value); bit_true(axis_words,bit(Z_AXIS)); break;
    }
  }
  
  // If there were any errors parsing this line, we will return right away with the bad news
  if (gc.status_code) { return(gc.status_code); }
    156e:	80 91 36 01 	lds	r24, 0x0136
    1572:	88 23       	and	r24, r24
    1574:	09 f0       	breq	.+2      	; 0x1578 <gc_execute_line+0x5aa>
    1576:	3e c4       	rjmp	.+2172   	; 0x1df4 <gc_execute_line+0xe26>
     and simplicity purposes, but this should not affect proper g-code execution. */
  
  //  ([M6]: Tool change execution should be executed here.)
  
  // [M3,M4,M5]: Update spindle state
  spindle_run(gc.spindle_direction, gc.spindle_speed);
    1578:	80 91 3c 01 	lds	r24, 0x013C
    157c:	40 91 52 01 	lds	r20, 0x0152
    1580:	50 91 53 01 	lds	r21, 0x0153
    1584:	66 27       	eor	r22, r22
    1586:	57 fd       	sbrc	r21, 7
    1588:	60 95       	com	r22
    158a:	76 2f       	mov	r23, r22
    158c:	99 27       	eor	r25, r25
    158e:	87 fd       	sbrc	r24, 7
    1590:	90 95       	com	r25
    1592:	53 d4       	rcall	.+2214   	; 0x1e3a <spindle_run>
  //  ([M7,M8,M9]: Coolant state should be executed here.)
  
  // [G4,G10,G28,G30,G92,G92.1]: Perform dwell, set coordinate system data, homing, or set axis offsets.
  // NOTE: These commands are in the same modal group, hence are mutually exclusive. G53 is in this
  // modal group and do not effect these actions.
  switch (non_modal_action) {
    1594:	03 30       	cpi	r16, 0x03	; 3
    1596:	09 f4       	brne	.+2      	; 0x159a <gc_execute_line+0x5cc>
    1598:	54 c0       	rjmp	.+168    	; 0x1642 <gc_execute_line+0x674>
    159a:	04 30       	cpi	r16, 0x04	; 4
    159c:	30 f4       	brcc	.+12     	; 0x15aa <gc_execute_line+0x5dc>
    159e:	01 30       	cpi	r16, 0x01	; 1
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <gc_execute_line+0x5ea>
    15a2:	02 30       	cpi	r16, 0x02	; 2
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <gc_execute_line+0x5da>
    15a6:	4b c1       	rjmp	.+662    	; 0x183e <gc_execute_line+0x870>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <gc_execute_line+0x604>
    15aa:	04 30       	cpi	r16, 0x04	; 4
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <gc_execute_line+0x5e2>
    15ae:	e6 c0       	rjmp	.+460    	; 0x177c <gc_execute_line+0x7ae>
    15b0:	05 30       	cpi	r16, 0x05	; 5
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <gc_execute_line+0x5e8>
    15b4:	44 c1       	rjmp	.+648    	; 0x183e <gc_execute_line+0x870>
    15b6:	3c c1       	rjmp	.+632    	; 0x1830 <gc_execute_line+0x862>
    case NON_MODAL_DWELL:
      if (p < 0) { // Time cannot be negative.
    15b8:	c4 01       	movw	r24, r8
    15ba:	b3 01       	movw	r22, r6
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	a9 01       	movw	r20, r18
    15c2:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    15c6:	87 fd       	sbrc	r24, 7
    15c8:	db c0       	rjmp	.+438    	; 0x1780 <gc_execute_line+0x7b2>
        FAIL(STATUS_INVALID_COMMAND); 
      } else { 
        mc_dwell(p); 
    15ca:	c4 01       	movw	r24, r8
    15cc:	b3 01       	movw	r22, r6
    15ce:	e4 db       	rcall	.-2104   	; 0xd98 <mc_dwell>
    15d0:	36 c1       	rjmp	.+620    	; 0x183e <gc_execute_line+0x870>
      }
      break;
    case NON_MODAL_SET_COORDINATE_DATA:
      int_value = trunc(p); // Convert p value to int.
    15d2:	c4 01       	movw	r24, r8
    15d4:	b3 01       	movw	r22, r6
    15d6:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
      if (l != 2 || (int_value < 1 || int_value > N_COORDINATE_SYSTEM)) { // L2 only. P1=G54, P2=G55, ... 
    15da:	be 2d       	mov	r27, r14
    15dc:	b2 30       	cpi	r27, 0x02	; 2
    15de:	29 f4       	brne	.+10     	; 0x15ea <gc_execute_line+0x61c>
      } else { 
        mc_dwell(p); 
      }
      break;
    case NON_MODAL_SET_COORDINATE_DATA:
      int_value = trunc(p); // Convert p value to int.
    15e0:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
      if (l != 2 || (int_value < 1 || int_value > N_COORDINATE_SYSTEM)) { // L2 only. P1=G54, P2=G55, ... 
    15e4:	61 30       	cpi	r22, 0x01	; 1
    15e6:	71 05       	cpc	r23, r1
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <gc_execute_line+0x624>
        FAIL(STATUS_UNSUPPORTED_STATEMENT); 
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	80 93 36 01 	sts	0x0136, r24
    15f0:	1d c1       	rjmp	.+570    	; 0x182c <gc_execute_line+0x85e>
      } else if (!axis_words) { // No axis words.
    15f2:	ff 20       	and	r15, r15
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <gc_execute_line+0x62a>
    15f6:	c4 c0       	rjmp	.+392    	; 0x1780 <gc_execute_line+0x7b2>
        FAIL(STATUS_INVALID_COMMAND);
    15f8:	ae 01       	movw	r20, r28
    15fa:	49 5f       	subi	r20, 0xF9	; 249
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	ea e1       	ldi	r30, 0x1A	; 26
    1600:	f6 e0       	ldi	r31, 0x06	; 6
      break;
    case NON_MODAL_SET_COORDINATE_DATA:
      int_value = trunc(p); // Convert p value to int.
      if (l != 2 || (int_value < 1 || int_value > N_COORDINATE_SYSTEM)) { // L2 only. P1=G54, P2=G55, ... 
        FAIL(STATUS_UNSUPPORTED_STATEMENT); 
      } else if (!axis_words) { // No axis words.
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
      } else {
        int_value--; // Adjust p to be inline with row array index. 
        // Update axes defined only in block. Always in machine coordinates. Can change non-active system.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if ( bit_istrue(axis_words,bit(i)) ) { sys.coord_system[int_value][i] = target[i]; }
    1606:	6f 2d       	mov	r22, r15
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	cb 01       	movw	r24, r22
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <gc_execute_line+0x646>
    1610:	95 95       	asr	r25
    1612:	87 95       	ror	r24
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <gc_execute_line+0x642>
    1618:	80 ff       	sbrs	r24, 0
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <gc_execute_line+0x662>
    161c:	da 01       	movw	r26, r20
    161e:	ed 90       	ld	r14, X+
    1620:	fd 90       	ld	r15, X+
    1622:	0d 91       	ld	r16, X+
    1624:	1c 91       	ld	r17, X
    1626:	13 97       	sbiw	r26, 0x03	; 3
    1628:	e0 82       	st	Z, r14
    162a:	f1 82       	std	Z+1, r15	; 0x01
    162c:	02 83       	std	Z+2, r16	; 0x02
    162e:	13 83       	std	Z+3, r17	; 0x03
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	4c 5f       	subi	r20, 0xFC	; 252
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	34 96       	adiw	r30, 0x04	; 4
        FAIL(STATUS_INVALID_COMMAND);
      } else {
        int_value--; // Adjust p to be inline with row array index. 
        // Update axes defined only in block. Always in machine coordinates. Can change non-active system.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
    163a:	23 30       	cpi	r18, 0x03	; 3
    163c:	31 05       	cpc	r19, r1
    163e:	29 f7       	brne	.-54     	; 0x160a <gc_execute_line+0x63c>
    1640:	f5 c0       	rjmp	.+490    	; 0x182c <gc_execute_line+0x85e>
      axis_words = 0; // Axis words used. Lock out from motion modes by clearing flags.
      break;
    case NON_MODAL_GO_HOME: 
      // Move to intermediate position before going home. Obeys current coordinate system and offsets 
      // and absolute and incremental modes.
      if (axis_words) {
    1642:	ff 20       	and	r15, r15
    1644:	09 f4       	brne	.+2      	; 0x1648 <gc_execute_line+0x67a>
    1646:	91 c0       	rjmp	.+290    	; 0x176a <gc_execute_line+0x79c>
        // Apply absolute mode coordinate offsets or incremental mode offsets.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if ( bit_istrue(axis_words,bit(i)) ) {
            if (gc.absolute_mode) {
    1648:	50 90 3a 01 	lds	r5, 0x013A
    164c:	f7 e0       	ldi	r31, 0x07	; 7
    164e:	cf 2e       	mov	r12, r31
    1650:	d1 2c       	mov	r13, r1
    1652:	cc 0e       	add	r12, r28
    1654:	dd 1e       	adc	r13, r29
    1656:	e5 e4       	ldi	r30, 0x45	; 69
    1658:	ae 2e       	mov	r10, r30
    165a:	e1 e0       	ldi	r30, 0x01	; 1
    165c:	be 2e       	mov	r11, r30
              target[i] += sys.coord_system[sys.coord_select][i] + sys.coord_offset[i];
    165e:	80 91 19 06 	lds	r24, 0x0619
    1662:	90 e0       	ldi	r25, 0x00	; 0

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    1664:	8c 01       	movw	r16, r24
    1666:	00 0f       	add	r16, r16
    1668:	11 1f       	adc	r17, r17
    166a:	08 0f       	add	r16, r24
    166c:	19 1f       	adc	r17, r25
    166e:	00 0f       	add	r16, r16
    1670:	11 1f       	adc	r17, r17
    1672:	00 0f       	add	r16, r16
    1674:	11 1f       	adc	r17, r17
    1676:	06 5e       	subi	r16, 0xE6	; 230
    1678:	19 4f       	sbci	r17, 0xF9	; 249
      if (axis_words) {
        // Apply absolute mode coordinate offsets or incremental mode offsets.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if ( bit_istrue(axis_words,bit(i)) ) {
            if (gc.absolute_mode) {
    167a:	56 e2       	ldi	r21, 0x26	; 38
    167c:	65 2e       	mov	r6, r21
    167e:	56 e0       	ldi	r21, 0x06	; 6
    1680:	75 2e       	mov	r7, r21

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    1682:	88 24       	eor	r8, r8
    1684:	99 24       	eor	r9, r9
      // and absolute and incremental modes.
      if (axis_words) {
        // Apply absolute mode coordinate offsets or incremental mode offsets.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if ( bit_istrue(axis_words,bit(i)) ) {
    1686:	ef 2c       	mov	r14, r15
    1688:	ff 24       	eor	r15, r15
    168a:	c7 01       	movw	r24, r14
    168c:	78 01       	movw	r14, r16
    168e:	86 01       	movw	r16, r12
    1690:	6c 01       	movw	r12, r24
    1692:	c6 01       	movw	r24, r12
    1694:	08 2c       	mov	r0, r8
    1696:	02 c0       	rjmp	.+4      	; 0x169c <gc_execute_line+0x6ce>
    1698:	95 95       	asr	r25
    169a:	87 95       	ror	r24
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <gc_execute_line+0x6ca>
    16a0:	80 ff       	sbrs	r24, 0
    16a2:	30 c0       	rjmp	.+96     	; 0x1704 <gc_execute_line+0x736>
            if (gc.absolute_mode) {
    16a4:	55 20       	and	r5, r5
    16a6:	e1 f0       	breq	.+56     	; 0x16e0 <gc_execute_line+0x712>
              target[i] += sys.coord_system[sys.coord_select][i] + sys.coord_offset[i];
    16a8:	f7 01       	movw	r30, r14
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	d3 01       	movw	r26, r6
    16b4:	2d 91       	ld	r18, X+
    16b6:	3d 91       	ld	r19, X+
    16b8:	4d 91       	ld	r20, X+
    16ba:	5c 91       	ld	r21, X
    16bc:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    16c0:	9b 01       	movw	r18, r22
    16c2:	ac 01       	movw	r20, r24
    16c4:	f8 01       	movw	r30, r16
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    16d2:	d8 01       	movw	r26, r16
    16d4:	6d 93       	st	X+, r22
    16d6:	7d 93       	st	X+, r23
    16d8:	8d 93       	st	X+, r24
    16da:	9c 93       	st	X, r25
    16dc:	13 97       	sbiw	r26, 0x03	; 3
    16de:	1c c0       	rjmp	.+56     	; 0x1718 <gc_execute_line+0x74a>
            } else {
              target[i] += gc.position[i];
    16e0:	f8 01       	movw	r30, r16
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	d5 01       	movw	r26, r10
    16ec:	2d 91       	ld	r18, X+
    16ee:	3d 91       	ld	r19, X+
    16f0:	4d 91       	ld	r20, X+
    16f2:	5c 91       	ld	r21, X
    16f4:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    16f8:	f8 01       	movw	r30, r16
    16fa:	60 83       	st	Z, r22
    16fc:	71 83       	std	Z+1, r23	; 0x01
    16fe:	82 83       	std	Z+2, r24	; 0x02
    1700:	93 83       	std	Z+3, r25	; 0x03
    1702:	0a c0       	rjmp	.+20     	; 0x1718 <gc_execute_line+0x74a>
            }
          } else {
            target[i] = gc.position[i];
    1704:	f5 01       	movw	r30, r10
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	a2 81       	ldd	r26, Z+2	; 0x02
    170c:	b3 81       	ldd	r27, Z+3	; 0x03
    170e:	f8 01       	movw	r30, r16
    1710:	80 83       	st	Z, r24
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	a2 83       	std	Z+2, r26	; 0x02
    1716:	b3 83       	std	Z+3, r27	; 0x03
    1718:	08 94       	sec
    171a:	81 1c       	adc	r8, r1
    171c:	91 1c       	adc	r9, r1
    171e:	0c 5f       	subi	r16, 0xFC	; 252
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	24 e0       	ldi	r18, 0x04	; 4
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	a2 0e       	add	r10, r18
    1728:	b3 1e       	adc	r11, r19
    172a:	e2 0e       	add	r14, r18
    172c:	f3 1e       	adc	r15, r19
    172e:	62 0e       	add	r6, r18
    1730:	73 1e       	adc	r7, r19
      // Move to intermediate position before going home. Obeys current coordinate system and offsets 
      // and absolute and incremental modes.
      if (axis_words) {
        // Apply absolute mode coordinate offsets or incremental mode offsets.
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
    1732:	33 e0       	ldi	r19, 0x03	; 3
    1734:	83 16       	cp	r8, r19
    1736:	91 04       	cpc	r9, r1
    1738:	09 f0       	breq	.+2      	; 0x173c <gc_execute_line+0x76e>
    173a:	ab cf       	rjmp	.-170    	; 0x1692 <gc_execute_line+0x6c4>
            }
          } else {
            target[i] = gc.position[i];
          }
        }
        mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], settings.default_seek_rate, false);
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	2b 85       	ldd	r18, Y+11	; 0x0b
    1746:	3c 85       	ldd	r19, Y+12	; 0x0c
    1748:	4d 85       	ldd	r20, Y+13	; 0x0d
    174a:	5e 85       	ldd	r21, Y+14	; 0x0e
    174c:	ef 84       	ldd	r14, Y+15	; 0x0f
    174e:	f8 88       	ldd	r15, Y+16	; 0x10
    1750:	09 89       	ldd	r16, Y+17	; 0x11
    1752:	1a 89       	ldd	r17, Y+18	; 0x12
    1754:	a0 90 46 06 	lds	r10, 0x0646
    1758:	b0 90 47 06 	lds	r11, 0x0647
    175c:	c0 90 48 06 	lds	r12, 0x0648
    1760:	d0 90 49 06 	lds	r13, 0x0649
    1764:	88 24       	eor	r8, r8
    1766:	0e 94 1e 03 	call	0x63c	; 0x63c <mc_line>
      }
      mc_go_home(); 
    176a:	6a db       	rcall	.-2348   	; 0xe40 <mc_go_home>
      clear_vector(gc.position); // Assumes home is at [0,0,0]
    176c:	8c e0       	ldi	r24, 0x0C	; 12
    176e:	e5 e4       	ldi	r30, 0x45	; 69
    1770:	f1 e0       	ldi	r31, 0x01	; 1
    1772:	df 01       	movw	r26, r30
    1774:	1d 92       	st	X+, r1
    1776:	8a 95       	dec	r24
    1778:	e9 f7       	brne	.-6      	; 0x1774 <gc_execute_line+0x7a6>
    177a:	58 c0       	rjmp	.+176    	; 0x182c <gc_execute_line+0x85e>
      axis_words = 0; // Axis words used. Lock out from motion modes by clearing flags.
      break;      
    case NON_MODAL_SET_COORDINATE_OFFSET:
      if (!axis_words) { // No axis words
    177c:	ff 20       	and	r15, r15
    177e:	21 f4       	brne	.+8      	; 0x1788 <gc_execute_line+0x7ba>
        FAIL(STATUS_INVALID_COMMAND);
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	80 93 36 01 	sts	0x0136, r24
    1786:	5b c0       	rjmp	.+182    	; 0x183e <gc_execute_line+0x870>
    1788:	45 e4       	ldi	r20, 0x45	; 69
    178a:	a4 2e       	mov	r10, r20
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	b4 2e       	mov	r11, r20
        // Update axes defined only in block. Offsets current system to defined value. Does not update when
        // active coordinate system is selected, but is still active unless G92.1 disables it. 
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if (bit_istrue(axis_words,bit(i)) ) {
            sys.coord_offset[i] = gc.position[i]-sys.coord_system[sys.coord_select][i]-target[i];
    1790:	80 91 19 06 	lds	r24, 0x0619
    1794:	90 e0       	ldi	r25, 0x00	; 0

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    1796:	8c 01       	movw	r16, r24
    1798:	00 0f       	add	r16, r16
    179a:	11 1f       	adc	r17, r17
    179c:	08 0f       	add	r16, r24
    179e:	19 1f       	adc	r17, r25
    17a0:	00 0f       	add	r16, r16
    17a2:	11 1f       	adc	r17, r17
    17a4:	00 0f       	add	r16, r16
    17a6:	11 1f       	adc	r17, r17
    17a8:	06 5e       	subi	r16, 0xE6	; 230
    17aa:	19 4f       	sbci	r17, 0xF9	; 249
      clear_vector(gc.position); // Assumes home is at [0,0,0]
      axis_words = 0; // Axis words used. Lock out from motion modes by clearing flags.
      break;      
    case NON_MODAL_SET_COORDINATE_OFFSET:
      if (!axis_words) { // No axis words
        FAIL(STATUS_INVALID_COMMAND);
    17ac:	97 e0       	ldi	r25, 0x07	; 7
    17ae:	89 2e       	mov	r8, r25
    17b0:	91 2c       	mov	r9, r1
    17b2:	8c 0e       	add	r8, r28
    17b4:	9d 1e       	adc	r9, r29
    17b6:	86 e2       	ldi	r24, 0x26	; 38
    17b8:	68 2e       	mov	r6, r24
    17ba:	86 e0       	ldi	r24, 0x06	; 6
    17bc:	78 2e       	mov	r7, r24

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    17be:	cc 24       	eor	r12, r12
    17c0:	dd 24       	eor	r13, r13
      } else {
        // Update axes defined only in block. Offsets current system to defined value. Does not update when
        // active coordinate system is selected, but is still active unless G92.1 disables it. 
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
          if (bit_istrue(axis_words,bit(i)) ) {
    17c2:	ef 2c       	mov	r14, r15
    17c4:	ff 24       	eor	r15, r15
    17c6:	c7 01       	movw	r24, r14
    17c8:	0c 2c       	mov	r0, r12
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <gc_execute_line+0x802>
    17cc:	95 95       	asr	r25
    17ce:	87 95       	ror	r24
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <gc_execute_line+0x7fe>
    17d4:	80 ff       	sbrs	r24, 0
    17d6:	19 c0       	rjmp	.+50     	; 0x180a <gc_execute_line+0x83c>
            sys.coord_offset[i] = gc.position[i]-sys.coord_system[sys.coord_select][i]-target[i];
    17d8:	f5 01       	movw	r30, r10
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	d8 01       	movw	r26, r16
    17e4:	2d 91       	ld	r18, X+
    17e6:	3d 91       	ld	r19, X+
    17e8:	4d 91       	ld	r20, X+
    17ea:	5c 91       	ld	r21, X
    17ec:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    17f0:	f4 01       	movw	r30, r8
    17f2:	20 81       	ld	r18, Z
    17f4:	31 81       	ldd	r19, Z+1	; 0x01
    17f6:	42 81       	ldd	r20, Z+2	; 0x02
    17f8:	53 81       	ldd	r21, Z+3	; 0x03
    17fa:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    17fe:	d3 01       	movw	r26, r6
    1800:	6d 93       	st	X+, r22
    1802:	7d 93       	st	X+, r23
    1804:	8d 93       	st	X+, r24
    1806:	9c 93       	st	X, r25
    1808:	13 97       	sbiw	r26, 0x03	; 3
    180a:	08 94       	sec
    180c:	c1 1c       	adc	r12, r1
    180e:	d1 1c       	adc	r13, r1
    1810:	e4 e0       	ldi	r30, 0x04	; 4
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	ae 0e       	add	r10, r30
    1816:	bf 1e       	adc	r11, r31
    1818:	0c 5f       	subi	r16, 0xFC	; 252
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	8e 0e       	add	r8, r30
    181e:	9f 1e       	adc	r9, r31
    1820:	6e 0e       	add	r6, r30
    1822:	7f 1e       	adc	r7, r31
        FAIL(STATUS_INVALID_COMMAND);
      } else {
        // Update axes defined only in block. Offsets current system to defined value. Does not update when
        // active coordinate system is selected, but is still active unless G92.1 disables it. 
        uint8_t i;
        for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used.
    1824:	f3 e0       	ldi	r31, 0x03	; 3
    1826:	cf 16       	cp	r12, r31
    1828:	d1 04       	cpc	r13, r1
    182a:	69 f6       	brne	.-102    	; 0x17c6 <gc_execute_line+0x7f8>
          if (bit_istrue(axis_words,bit(i)) ) {
            sys.coord_offset[i] = gc.position[i]-sys.coord_system[sys.coord_select][i]-target[i];
          }
        }
      }
      axis_words = 0; // Axis words used. Lock out from motion modes by clearing flags.
    182c:	ff 24       	eor	r15, r15
    182e:	07 c0       	rjmp	.+14     	; 0x183e <gc_execute_line+0x870>
      break;
    case NON_MODAL_RESET_COORDINATE_OFFSET: 
      clear_vector(sys.coord_offset); // Disable G92 offsets by zeroing offset vector.
    1830:	8c e0       	ldi	r24, 0x0C	; 12
    1832:	e6 e2       	ldi	r30, 0x26	; 38
    1834:	f6 e0       	ldi	r31, 0x06	; 6
    1836:	df 01       	movw	r26, r30
    1838:	1d 92       	st	X+, r1
    183a:	8a 95       	dec	r24
    183c:	e9 f7       	brne	.-6      	; 0x1838 <gc_execute_line+0x86a>
  }

  // [G0,G1,G2,G3,G80]: Perform motion modes. 
  // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes. 
  // Enter motion modes only if there are axis words or a motion mode command word in the block.
  if ( bit_istrue(modal_group_words,bit(MODAL_GROUP_1)) || axis_words ) {
    183e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1840:	b2 fd       	sbrc	r27, 2
    1842:	03 c0       	rjmp	.+6      	; 0x184a <gc_execute_line+0x87c>
    1844:	ff 20       	and	r15, r15
    1846:	09 f4       	brne	.+2      	; 0x184a <gc_execute_line+0x87c>
    1848:	c1 c2       	rjmp	.+1410   	; 0x1dcc <gc_execute_line+0xdfe>

    // G1,G2,G3 require F word in inverse time mode.  
    if ( gc.inverse_feed_rate_mode ) { 
    184a:	80 91 38 01 	lds	r24, 0x0138
    184e:	88 23       	and	r24, r24
    1850:	b1 f0       	breq	.+44     	; 0x187e <gc_execute_line+0x8b0>
      if (inverse_feed_rate < 0 && gc.motion_mode != MOTION_MODE_CANCEL) {
    1852:	5d a1       	ldd	r21, Y+37	; 0x25
    1854:	4e a1       	ldd	r20, Y+38	; 0x26
    1856:	3f a1       	ldd	r19, Y+39	; 0x27
    1858:	28 a5       	ldd	r18, Y+40	; 0x28
    185a:	65 2f       	mov	r22, r21
    185c:	74 2f       	mov	r23, r20
    185e:	83 2f       	mov	r24, r19
    1860:	92 2f       	mov	r25, r18
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	a9 01       	movw	r20, r18
    1868:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    186c:	87 ff       	sbrs	r24, 7
    186e:	07 c0       	rjmp	.+14     	; 0x187e <gc_execute_line+0x8b0>
    1870:	80 91 37 01 	lds	r24, 0x0137
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	19 f0       	breq	.+6      	; 0x187e <gc_execute_line+0x8b0>
        FAIL(STATUS_INVALID_COMMAND);
    1878:	86 e0       	ldi	r24, 0x06	; 6
    187a:	80 93 36 01 	sts	0x0136, r24
      }
    }
    // Absolute override G53 only valid with G0 and G1 active.
    if ( absolute_override && !(gc.motion_mode == MOTION_MODE_SEEK || gc.motion_mode == MOTION_MODE_LINEAR)) {
    187e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1880:	ee 23       	and	r30, r30
    1882:	39 f0       	breq	.+14     	; 0x1892 <gc_execute_line+0x8c4>
    1884:	80 91 37 01 	lds	r24, 0x0137
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	18 f0       	brcs	.+6      	; 0x1892 <gc_execute_line+0x8c4>
      FAIL(STATUS_INVALID_COMMAND);
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	80 93 36 01 	sts	0x0136, r24
    }
    // Report any errors.  
    if (gc.status_code) { return(gc.status_code); }
    1892:	80 91 36 01 	lds	r24, 0x0136
    1896:	88 23       	and	r24, r24
    1898:	09 f0       	breq	.+2      	; 0x189c <gc_execute_line+0x8ce>
    189a:	ac c2       	rjmp	.+1368   	; 0x1df4 <gc_execute_line+0xe26>
    // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
    uint8_t i;
    for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used to save flash space.
      if ( bit_istrue(axis_words,bit(i)) ) {
        if (!absolute_override) { // Do not update target in absolute override mode
          if (gc.absolute_mode) {
    189c:	e0 90 3a 01 	lds	r14, 0x013A
    18a0:	b7 e0       	ldi	r27, 0x07	; 7
    18a2:	cb 2e       	mov	r12, r27
    18a4:	d1 2c       	mov	r13, r1
    18a6:	cc 0e       	add	r12, r28
    18a8:	dd 1e       	adc	r13, r29
            target[i] += sys.coord_system[sys.coord_select][i] + sys.coord_offset[i]; // Absolute mode
    18aa:	80 91 19 06 	lds	r24, 0x0619
    18ae:	90 e0       	ldi	r25, 0x00	; 0

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    18b0:	8c 01       	movw	r16, r24
    18b2:	00 0f       	add	r16, r16
    18b4:	11 1f       	adc	r17, r17
    18b6:	08 0f       	add	r16, r24
    18b8:	19 1f       	adc	r17, r25
    18ba:	00 0f       	add	r16, r16
    18bc:	11 1f       	adc	r17, r17
    18be:	00 0f       	add	r16, r16
    18c0:	11 1f       	adc	r17, r17
    18c2:	06 5e       	subi	r16, 0xE6	; 230
    18c4:	19 4f       	sbci	r17, 0xF9	; 249
    // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
    uint8_t i;
    for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used to save flash space.
      if ( bit_istrue(axis_words,bit(i)) ) {
        if (!absolute_override) { // Do not update target in absolute override mode
          if (gc.absolute_mode) {
    18c6:	e6 e2       	ldi	r30, 0x26	; 38
    18c8:	6e 2e       	mov	r6, r30
    18ca:	e6 e0       	ldi	r30, 0x06	; 6
    18cc:	7e 2e       	mov	r7, r30
    18ce:	75 e4       	ldi	r23, 0x45	; 69
    18d0:	a7 2e       	mov	r10, r23
    18d2:	71 e0       	ldi	r23, 0x01	; 1
    18d4:	b7 2e       	mov	r11, r23

// Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. All units and positions are converted and exported to grbl's
// internal functions in terms of (mm, mm/min) and absolute machine coordinates, respectively.
uint8_t gc_execute_line(char *line) 
    18d6:	88 24       	eor	r8, r8
    18d8:	99 24       	eor	r9, r9
    // Convert all target position data to machine coordinates for executing motion. Apply
    // absolute mode coordinate offsets or incremental mode offsets.
    // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
    uint8_t i;
    for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used to save flash space.
      if ( bit_istrue(axis_words,bit(i)) ) {
    18da:	4f 2c       	mov	r4, r15
    18dc:	55 24       	eor	r5, r5
    18de:	2e 2d       	mov	r18, r14
    18e0:	c8 01       	movw	r24, r16
    18e2:	86 01       	movw	r16, r12
    18e4:	cf 2c       	mov	r12, r15
    18e6:	7c 01       	movw	r14, r24
    18e8:	d2 2e       	mov	r13, r18
    18ea:	c2 01       	movw	r24, r4
    18ec:	08 2c       	mov	r0, r8
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <gc_execute_line+0x926>
    18f0:	95 95       	asr	r25
    18f2:	87 95       	ror	r24
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <gc_execute_line+0x922>
    18f8:	80 ff       	sbrs	r24, 0
    18fa:	33 c0       	rjmp	.+102    	; 0x1962 <gc_execute_line+0x994>
        if (!absolute_override) { // Do not update target in absolute override mode
    18fc:	f9 a5       	ldd	r31, Y+41	; 0x29
    18fe:	ff 23       	and	r31, r31
    1900:	d1 f5       	brne	.+116    	; 0x1976 <gc_execute_line+0x9a8>
          if (gc.absolute_mode) {
    1902:	dd 20       	and	r13, r13
    1904:	d9 f0       	breq	.+54     	; 0x193c <gc_execute_line+0x96e>
            target[i] += sys.coord_system[sys.coord_select][i] + sys.coord_offset[i]; // Absolute mode
    1906:	d7 01       	movw	r26, r14
    1908:	6d 91       	ld	r22, X+
    190a:	7d 91       	ld	r23, X+
    190c:	8d 91       	ld	r24, X+
    190e:	9c 91       	ld	r25, X
    1910:	f3 01       	movw	r30, r6
    1912:	20 81       	ld	r18, Z
    1914:	31 81       	ldd	r19, Z+1	; 0x01
    1916:	42 81       	ldd	r20, Z+2	; 0x02
    1918:	53 81       	ldd	r21, Z+3	; 0x03
    191a:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	d8 01       	movw	r26, r16
    1924:	6d 91       	ld	r22, X+
    1926:	7d 91       	ld	r23, X+
    1928:	8d 91       	ld	r24, X+
    192a:	9c 91       	ld	r25, X
    192c:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    1930:	f8 01       	movw	r30, r16
    1932:	60 83       	st	Z, r22
    1934:	71 83       	std	Z+1, r23	; 0x01
    1936:	82 83       	std	Z+2, r24	; 0x02
    1938:	93 83       	std	Z+3, r25	; 0x03
    193a:	1d c0       	rjmp	.+58     	; 0x1976 <gc_execute_line+0x9a8>
          } else {
            target[i] += gc.position[i]; // Incremental mode
    193c:	d8 01       	movw	r26, r16
    193e:	6d 91       	ld	r22, X+
    1940:	7d 91       	ld	r23, X+
    1942:	8d 91       	ld	r24, X+
    1944:	9c 91       	ld	r25, X
    1946:	f5 01       	movw	r30, r10
    1948:	20 81       	ld	r18, Z
    194a:	31 81       	ldd	r19, Z+1	; 0x01
    194c:	42 81       	ldd	r20, Z+2	; 0x02
    194e:	53 81       	ldd	r21, Z+3	; 0x03
    1950:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    1954:	d8 01       	movw	r26, r16
    1956:	6d 93       	st	X+, r22
    1958:	7d 93       	st	X+, r23
    195a:	8d 93       	st	X+, r24
    195c:	9c 93       	st	X, r25
    195e:	13 97       	sbiw	r26, 0x03	; 3
    1960:	0a c0       	rjmp	.+20     	; 0x1976 <gc_execute_line+0x9a8>
          }
        }
      } else {
        target[i] = gc.position[i]; // No axis word in block. Keep same axis position.
    1962:	f5 01       	movw	r30, r10
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	a2 81       	ldd	r26, Z+2	; 0x02
    196a:	b3 81       	ldd	r27, Z+3	; 0x03
    196c:	f8 01       	movw	r30, r16
    196e:	80 83       	st	Z, r24
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	a2 83       	std	Z+2, r26	; 0x02
    1974:	b3 83       	std	Z+3, r27	; 0x03
    1976:	08 94       	sec
    1978:	81 1c       	adc	r8, r1
    197a:	91 1c       	adc	r9, r1
    197c:	0c 5f       	subi	r16, 0xFC	; 252
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	24 e0       	ldi	r18, 0x04	; 4
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	e2 0e       	add	r14, r18
    1986:	f3 1e       	adc	r15, r19
    1988:	62 0e       	add	r6, r18
    198a:	73 1e       	adc	r7, r19
    198c:	a2 0e       	add	r10, r18
    198e:	b3 1e       	adc	r11, r19

    // Convert all target position data to machine coordinates for executing motion. Apply
    // absolute mode coordinate offsets or incremental mode offsets.
    // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
    uint8_t i;
    for (i=0; i<=2; i++) { // Axes indices are consistent, so loop may be used to save flash space.
    1990:	33 e0       	ldi	r19, 0x03	; 3
    1992:	83 16       	cp	r8, r19
    1994:	91 04       	cpc	r9, r1
    1996:	09 f0       	breq	.+2      	; 0x199a <gc_execute_line+0x9cc>
    1998:	a8 cf       	rjmp	.-176    	; 0x18ea <gc_execute_line+0x91c>
    199a:	fc 2c       	mov	r15, r12
      } else {
        target[i] = gc.position[i]; // No axis word in block. Keep same axis position.
      }
    }
  
    switch (gc.motion_mode) {
    199c:	c0 90 37 01 	lds	r12, 0x0137
    19a0:	4c 2d       	mov	r20, r12
    19a2:	44 30       	cpi	r20, 0x04	; 4
    19a4:	48 f4       	brcc	.+18     	; 0x19b8 <gc_execute_line+0x9ea>
    19a6:	42 30       	cpi	r20, 0x02	; 2
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <gc_execute_line+0x9de>
    19aa:	4f c0       	rjmp	.+158    	; 0x1a4a <gc_execute_line+0xa7c>
    19ac:	cc 20       	and	r12, r12
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <gc_execute_line+0x9fa>
    19b0:	41 30       	cpi	r20, 0x01	; 1
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <gc_execute_line+0x9e8>
    19b4:	fe c1       	rjmp	.+1020   	; 0x1db2 <gc_execute_line+0xde4>
    19b6:	21 c0       	rjmp	.+66     	; 0x19fa <gc_execute_line+0xa2c>
    19b8:	5c 2d       	mov	r21, r12
    19ba:	54 30       	cpi	r21, 0x04	; 4
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <gc_execute_line+0x9f2>
    19be:	f9 c1       	rjmp	.+1010   	; 0x1db2 <gc_execute_line+0xde4>
      case MOTION_MODE_CANCEL: 
        if (axis_words) { FAIL(STATUS_INVALID_COMMAND); } // No axis words allowed while active.
    19c0:	ff 20       	and	r15, r15
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <gc_execute_line+0x9f8>
    19c4:	f6 c1       	rjmp	.+1004   	; 0x1db2 <gc_execute_line+0xde4>
    19c6:	88 c0       	rjmp	.+272    	; 0x1ad8 <gc_execute_line+0xb0a>
        break;
      case MOTION_MODE_SEEK:
        if (!axis_words) { FAIL(STATUS_INVALID_COMMAND);} 
    19c8:	ff 20       	and	r15, r15
    19ca:	09 f4       	brne	.+2      	; 0x19ce <gc_execute_line+0xa00>
    19cc:	85 c0       	rjmp	.+266    	; 0x1ad8 <gc_execute_line+0xb0a>
        else { mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], settings.default_seek_rate, false); }
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    19d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    19da:	4d 85       	ldd	r20, Y+13	; 0x0d
    19dc:	5e 85       	ldd	r21, Y+14	; 0x0e
    19de:	ef 84       	ldd	r14, Y+15	; 0x0f
    19e0:	f8 88       	ldd	r15, Y+16	; 0x10
    19e2:	09 89       	ldd	r16, Y+17	; 0x11
    19e4:	1a 89       	ldd	r17, Y+18	; 0x12
    19e6:	a0 90 46 06 	lds	r10, 0x0646
    19ea:	b0 90 47 06 	lds	r11, 0x0647
    19ee:	c0 90 48 06 	lds	r12, 0x0648
    19f2:	d0 90 49 06 	lds	r13, 0x0649
    19f6:	88 24       	eor	r8, r8
    19f8:	25 c0       	rjmp	.+74     	; 0x1a44 <gc_execute_line+0xa76>
        break;
      case MOTION_MODE_LINEAR:
        if (!axis_words) { FAIL(STATUS_INVALID_COMMAND);} 
    19fa:	ff 20       	and	r15, r15
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <gc_execute_line+0xa32>
    19fe:	6c c0       	rjmp	.+216    	; 0x1ad8 <gc_execute_line+0xb0a>
        else { mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    1a0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1a10:	ef 84       	ldd	r14, Y+15	; 0x0f
    1a12:	f8 88       	ldd	r15, Y+16	; 0x10
    1a14:	09 89       	ldd	r16, Y+17	; 0x11
    1a16:	1a 89       	ldd	r17, Y+18	; 0x12
          (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode); }
    1a18:	80 90 38 01 	lds	r8, 0x0138
        if (!axis_words) { FAIL(STATUS_INVALID_COMMAND);} 
        else { mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], settings.default_seek_rate, false); }
        break;
      case MOTION_MODE_LINEAR:
        if (!axis_words) { FAIL(STATUS_INVALID_COMMAND);} 
        else { mc_line(target[X_AXIS], target[Y_AXIS], target[Z_AXIS], 
    1a1c:	88 20       	and	r8, r8
    1a1e:	61 f4       	brne	.+24     	; 0x1a38 <gc_execute_line+0xa6a>
    1a20:	a0 91 3d 01 	lds	r26, 0x013D
    1a24:	ad a3       	std	Y+37, r26	; 0x25
    1a26:	b0 91 3e 01 	lds	r27, 0x013E
    1a2a:	be a3       	std	Y+38, r27	; 0x26
    1a2c:	e0 91 3f 01 	lds	r30, 0x013F
    1a30:	ef a3       	std	Y+39, r30	; 0x27
    1a32:	f0 91 40 01 	lds	r31, 0x0140
    1a36:	f8 a7       	std	Y+40, r31	; 0x28
    1a38:	ed a1       	ldd	r30, Y+37	; 0x25
    1a3a:	fe a1       	ldd	r31, Y+38	; 0x26
    1a3c:	af a1       	ldd	r26, Y+39	; 0x27
    1a3e:	b8 a5       	ldd	r27, Y+40	; 0x28
    1a40:	5f 01       	movw	r10, r30
    1a42:	6d 01       	movw	r12, r26
    1a44:	0e 94 1e 03 	call	0x63c	; 0x63c <mc_line>
    1a48:	b4 c1       	rjmp	.+872    	; 0x1db2 <gc_execute_line+0xde4>
          (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode); }
        break;
      case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC:
        // Check if at least one of the axes of the selected plane has been specified. If in center 
        // format arc mode, also check for at least one of the IJK axes of the selected plane was sent.
        if ( !( bit_false(axis_words,bit(gc.plane_axis_2)) ) || 
    1a4a:	20 91 56 01 	lds	r18, 0x0156
    1a4e:	29 a7       	std	Y+41, r18	; 0x29
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <gc_execute_line+0xa8c>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	2a 95       	dec	r18
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <gc_execute_line+0xa88>
    1a5e:	80 95       	com	r24
    1a60:	8f 21       	and	r24, r15
    1a62:	d1 f1       	breq	.+116    	; 0x1ad8 <gc_execute_line+0xb0a>
             ( !r && !offset[gc.plane_axis_0] && !offset[gc.plane_axis_1] ) ) { 
    1a64:	69 a1       	ldd	r22, Y+33	; 0x21
    1a66:	7a a1       	ldd	r23, Y+34	; 0x22
    1a68:	8b a1       	ldd	r24, Y+35	; 0x23
    1a6a:	9c a1       	ldd	r25, Y+36	; 0x24
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	a9 01       	movw	r20, r18
    1a72:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	99 f5       	brne	.+102    	; 0x1ae0 <gc_execute_line+0xb12>
    1a7a:	e0 91 54 01 	lds	r30, 0x0154
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0f 5f       	subi	r16, 0xFF	; 255
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	e0 0f       	add	r30, r16
    1a90:	f1 1f       	adc	r31, r17
    1a92:	82 88       	ldd	r8, Z+18	; 0x12
    1a94:	93 88       	ldd	r9, Z+19	; 0x13
    1a96:	a4 88       	ldd	r10, Z+20	; 0x14
    1a98:	b5 88       	ldd	r11, Z+21	; 0x15
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	a9 01       	movw	r20, r18
    1aa4:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <gc_execute_line+0xae0>
    1aac:	2b c1       	rjmp	.+598    	; 0x1d04 <gc_execute_line+0xd36>
    1aae:	e0 91 55 01 	lds	r30, 0x0155
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	e0 0f       	add	r30, r16
    1abe:	f1 1f       	adc	r31, r17
    1ac0:	62 89       	ldd	r22, Z+18	; 0x12
    1ac2:	73 89       	ldd	r23, Z+19	; 0x13
    1ac4:	84 89       	ldd	r24, Z+20	; 0x14
    1ac6:	95 89       	ldd	r25, Z+21	; 0x15
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	a9 01       	movw	r20, r18
    1ace:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <gc_execute_line+0xb0a>
    1ad6:	16 c1       	rjmp	.+556    	; 0x1d04 <gc_execute_line+0xd36>
          FAIL(STATUS_INVALID_COMMAND);
    1ad8:	86 e0       	ldi	r24, 0x06	; 6
    1ada:	80 93 36 01 	sts	0x0136, r24
    1ade:	69 c1       	rjmp	.+722    	; 0x1db2 <gc_execute_line+0xde4>
              j = (y + (x * h_x2_div_d))/2
              
            */
            
            // Calculate the change in position along each selected axis
            double x = target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    1ae0:	a0 90 54 01 	lds	r10, 0x0154
    1ae4:	bb 24       	eor	r11, r11
    1ae6:	f5 01       	movw	r30, r10
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	8e 01       	movw	r16, r28
    1af2:	0f 5f       	subi	r16, 0xFF	; 255
    1af4:	1f 4f       	sbci	r17, 0xFF	; 255
    1af6:	d8 01       	movw	r26, r16
    1af8:	ae 0f       	add	r26, r30
    1afa:	bf 1f       	adc	r27, r31
    1afc:	ea 5c       	subi	r30, 0xCA	; 202
    1afe:	fe 4f       	sbci	r31, 0xFE	; 254
    1b00:	16 96       	adiw	r26, 0x06	; 6
    1b02:	6d 91       	ld	r22, X+
    1b04:	7d 91       	ld	r23, X+
    1b06:	8d 91       	ld	r24, X+
    1b08:	9c 91       	ld	r25, X
    1b0a:	19 97       	sbiw	r26, 0x09	; 9
    1b0c:	27 85       	ldd	r18, Z+15	; 0x0f
    1b0e:	30 89       	ldd	r19, Z+16	; 0x10
    1b10:	41 89       	ldd	r20, Z+17	; 0x11
    1b12:	52 89       	ldd	r21, Z+18	; 0x12
    1b14:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    1b18:	86 2e       	mov	r8, r22
    1b1a:	67 2e       	mov	r6, r23
    1b1c:	48 2e       	mov	r4, r24
    1b1e:	d9 2e       	mov	r13, r25
            double y = target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    1b20:	80 91 55 01 	lds	r24, 0x0155
    1b24:	48 2f       	mov	r20, r24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	5b a7       	std	Y+43, r21	; 0x2b
    1b2a:	4a a7       	std	Y+42, r20	; 0x2a
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	d8 01       	movw	r26, r16
    1b38:	ae 0f       	add	r26, r30
    1b3a:	bf 1f       	adc	r27, r31
    1b3c:	ea 5c       	subi	r30, 0xCA	; 202
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	16 96       	adiw	r26, 0x06	; 6
    1b42:	6d 91       	ld	r22, X+
    1b44:	7d 91       	ld	r23, X+
    1b46:	8d 91       	ld	r24, X+
    1b48:	9c 91       	ld	r25, X
    1b4a:	19 97       	sbiw	r26, 0x09	; 9
    1b4c:	27 85       	ldd	r18, Z+15	; 0x0f
    1b4e:	30 89       	ldd	r19, Z+16	; 0x10
    1b50:	41 89       	ldd	r20, Z+17	; 0x11
    1b52:	52 89       	ldd	r21, Z+18	; 0x12
    1b54:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    1b58:	96 2e       	mov	r9, r22
    1b5a:	77 2e       	mov	r7, r23
    1b5c:	58 2e       	mov	r5, r24
    1b5e:	9f 8f       	std	Y+31, r25	; 0x1f
            
            clear_vector(offset);
    1b60:	8c e0       	ldi	r24, 0x0C	; 12
    1b62:	fe 01       	movw	r30, r28
    1b64:	73 96       	adiw	r30, 0x13	; 19
    1b66:	df 01       	movw	r26, r30
    1b68:	1d 92       	st	X+, r1
    1b6a:	8a 95       	dec	r24
    1b6c:	e9 f7       	brne	.-6      	; 0x1b68 <gc_execute_line+0xb9a>
            double h_x2_div_d = -sqrt(4 * r*r - x*x - y*y)/hypot(x,y); // == -(h * 2 / d)
    1b6e:	69 a1       	ldd	r22, Y+33	; 0x21
    1b70:	7a a1       	ldd	r23, Y+34	; 0x22
    1b72:	8b a1       	ldd	r24, Y+35	; 0x23
    1b74:	9c a1       	ldd	r25, Y+36	; 0x24
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	50 e4       	ldi	r21, 0x40	; 64
    1b7e:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1b82:	29 a1       	ldd	r18, Y+33	; 0x21
    1b84:	3a a1       	ldd	r19, Y+34	; 0x22
    1b86:	4b a1       	ldd	r20, Y+35	; 0x23
    1b88:	5c a1       	ldd	r21, Y+36	; 0x24
    1b8a:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1b8e:	7b 01       	movw	r14, r22
    1b90:	8c 01       	movw	r16, r24
    1b92:	68 2d       	mov	r22, r8
    1b94:	76 2d       	mov	r23, r6
    1b96:	84 2d       	mov	r24, r4
    1b98:	9d 2d       	mov	r25, r13
    1b9a:	28 2d       	mov	r18, r8
    1b9c:	36 2d       	mov	r19, r6
    1b9e:	44 2d       	mov	r20, r4
    1ba0:	5d 2d       	mov	r21, r13
    1ba2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	c8 01       	movw	r24, r16
    1bac:	b7 01       	movw	r22, r14
    1bae:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    1bb2:	7b 01       	movw	r14, r22
    1bb4:	8c 01       	movw	r16, r24
    1bb6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1bb8:	69 2d       	mov	r22, r9
    1bba:	77 2d       	mov	r23, r7
    1bbc:	85 2d       	mov	r24, r5
    1bbe:	92 2f       	mov	r25, r18
    1bc0:	29 2d       	mov	r18, r9
    1bc2:	37 2d       	mov	r19, r7
    1bc4:	45 2d       	mov	r20, r5
    1bc6:	59 2f       	mov	r21, r25
    1bc8:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1bcc:	9b 01       	movw	r18, r22
    1bce:	ac 01       	movw	r20, r24
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    1bd8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <sqrt>
    1bdc:	7b 01       	movw	r14, r22
    1bde:	8c 01       	movw	r16, r24
    1be0:	68 2d       	mov	r22, r8
    1be2:	76 2d       	mov	r23, r6
    1be4:	84 2d       	mov	r24, r4
    1be6:	9d 2d       	mov	r25, r13
    1be8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1bea:	29 2d       	mov	r18, r9
    1bec:	37 2d       	mov	r19, r7
    1bee:	45 2d       	mov	r20, r5
    1bf0:	5e 2f       	mov	r21, r30
    1bf2:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <hypot>
    1bf6:	9b 01       	movw	r18, r22
    1bf8:	ac 01       	movw	r20, r24
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	90 58       	subi	r25, 0x80	; 128
    1c00:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    1c04:	b6 2f       	mov	r27, r22
    1c06:	a7 2f       	mov	r26, r23
    1c08:	f8 2f       	mov	r31, r24
    1c0a:	e9 2f       	mov	r30, r25
    1c0c:	e6 2e       	mov	r14, r22
    1c0e:	f7 2e       	mov	r15, r23
    1c10:	08 2f       	mov	r16, r24
    1c12:	19 2f       	mov	r17, r25
            // If r is smaller than d, the arc is now traversing the complex plane beyond the reach of any
            // real CNC, and thus - for practical reasons - we will terminate promptly:
            if(isnan(h_x2_div_d)) { FAIL(STATUS_FLOATING_POINT_ERROR); return(gc.status_code); }
    1c14:	2b 2f       	mov	r18, r27
    1c16:	3a 2f       	mov	r19, r26
    1c18:	4f 2f       	mov	r20, r31
    1c1a:	5e 2f       	mov	r21, r30
    1c1c:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <__unordsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	21 f0       	breq	.+8      	; 0x1c2c <gc_execute_line+0xc5e>
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	80 93 36 01 	sts	0x0136, r24
    1c2a:	e4 c0       	rjmp	.+456    	; 0x1df4 <gc_execute_line+0xe26>
            // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
            if (gc.motion_mode == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
    1c2c:	bc 2d       	mov	r27, r12
    1c2e:	b3 30       	cpi	r27, 0x03	; 3
    1c30:	21 f4       	brne	.+8      	; 0x1c3a <gc_execute_line+0xc6c>
    1c32:	17 fb       	bst	r17, 7
    1c34:	10 95       	com	r17
    1c36:	17 f9       	bld	r17, 7
    1c38:	10 95       	com	r17
    
            // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go figure!), 
            // even though it is advised against ever generating such circles in a single line of g-code. By 
            // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side of the line of
            // travel and thus we get the unadvisably long arcs as prescribed.
            if (r < 0) { 
    1c3a:	69 a1       	ldd	r22, Y+33	; 0x21
    1c3c:	7a a1       	ldd	r23, Y+34	; 0x22
    1c3e:	8b a1       	ldd	r24, Y+35	; 0x23
    1c40:	9c a1       	ldd	r25, Y+36	; 0x24
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    1c4c:	87 ff       	sbrs	r24, 7
    1c4e:	0d c0       	rjmp	.+26     	; 0x1c6a <gc_execute_line+0xc9c>
                h_x2_div_d = -h_x2_div_d; 
    1c50:	17 fb       	bst	r17, 7
    1c52:	10 95       	com	r17
    1c54:	17 f9       	bld	r17, 7
    1c56:	10 95       	com	r17
                r = -r; // Finished with r. Set to positive for mc_arc
    1c58:	29 a1       	ldd	r18, Y+33	; 0x21
    1c5a:	3a a1       	ldd	r19, Y+34	; 0x22
    1c5c:	4b a1       	ldd	r20, Y+35	; 0x23
    1c5e:	5c a1       	ldd	r21, Y+36	; 0x24
    1c60:	50 58       	subi	r21, 0x80	; 128
    1c62:	29 a3       	std	Y+33, r18	; 0x21
    1c64:	3a a3       	std	Y+34, r19	; 0x22
    1c66:	4b a3       	std	Y+35, r20	; 0x23
    1c68:	5c a3       	std	Y+36, r21	; 0x24
            }        
            // Complete the operation by calculating the actual center of the arc
            offset[gc.plane_axis_0] = 0.5*(x-(y*h_x2_div_d));
    1c6a:	aa 0c       	add	r10, r10
    1c6c:	bb 1c       	adc	r11, r11
    1c6e:	aa 0c       	add	r10, r10
    1c70:	bb 1c       	adc	r11, r11
    1c72:	1e 01       	movw	r2, r28
    1c74:	08 94       	sec
    1c76:	21 1c       	adc	r2, r1
    1c78:	31 1c       	adc	r3, r1
    1c7a:	a2 0c       	add	r10, r2
    1c7c:	b3 1c       	adc	r11, r3
    1c7e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1c80:	69 2d       	mov	r22, r9
    1c82:	77 2d       	mov	r23, r7
    1c84:	85 2d       	mov	r24, r5
    1c86:	92 2f       	mov	r25, r18
    1c88:	a8 01       	movw	r20, r16
    1c8a:	97 01       	movw	r18, r14
    1c8c:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	68 2d       	mov	r22, r8
    1c96:	76 2d       	mov	r23, r6
    1c98:	84 2d       	mov	r24, r4
    1c9a:	9d 2d       	mov	r25, r13
    1c9c:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1cac:	d5 01       	movw	r26, r10
    1cae:	52 96       	adiw	r26, 0x12	; 18
    1cb0:	6d 93       	st	X+, r22
    1cb2:	7d 93       	st	X+, r23
    1cb4:	8d 93       	st	X+, r24
    1cb6:	9c 93       	st	X, r25
    1cb8:	55 97       	sbiw	r26, 0x15	; 21
            offset[gc.plane_axis_1] = 0.5*(y+(x*h_x2_div_d));
    1cba:	aa a4       	ldd	r10, Y+42	; 0x2a
    1cbc:	bb a4       	ldd	r11, Y+43	; 0x2b
    1cbe:	aa 0c       	add	r10, r10
    1cc0:	bb 1c       	adc	r11, r11
    1cc2:	aa 0c       	add	r10, r10
    1cc4:	bb 1c       	adc	r11, r11
    1cc6:	a2 0c       	add	r10, r2
    1cc8:	b3 1c       	adc	r11, r3
    1cca:	68 2d       	mov	r22, r8
    1ccc:	76 2d       	mov	r23, r6
    1cce:	84 2d       	mov	r24, r4
    1cd0:	9d 2d       	mov	r25, r13
    1cd2:	a8 01       	movw	r20, r16
    1cd4:	97 01       	movw	r18, r14
    1cd6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1cda:	9b 01       	movw	r18, r22
    1cdc:	ac 01       	movw	r20, r24
    1cde:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1ce0:	69 2d       	mov	r22, r9
    1ce2:	77 2d       	mov	r23, r7
    1ce4:	85 2d       	mov	r24, r5
    1ce6:	9e 2f       	mov	r25, r30
    1ce8:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    1cf8:	f5 01       	movw	r30, r10
    1cfa:	62 8b       	std	Z+18, r22	; 0x12
    1cfc:	73 8b       	std	Z+19, r23	; 0x13
    1cfe:	84 8b       	std	Z+20, r24	; 0x14
    1d00:	95 8b       	std	Z+21, r25	; 0x15
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <gc_execute_line+0xd60>

          } else { // Arc Center Format Offset Mode            
            r = hypot(offset[gc.plane_axis_0], offset[gc.plane_axis_1]); // Compute arc radius for mc_arc
    1d04:	e0 91 55 01 	lds	r30, 0x0155
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	ee 0f       	add	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	ec 0f       	add	r30, r28
    1d14:	fd 1f       	adc	r31, r29
    1d16:	23 89       	ldd	r18, Z+19	; 0x13
    1d18:	34 89       	ldd	r19, Z+20	; 0x14
    1d1a:	45 89       	ldd	r20, Z+21	; 0x15
    1d1c:	56 89       	ldd	r21, Z+22	; 0x16
    1d1e:	c5 01       	movw	r24, r10
    1d20:	b4 01       	movw	r22, r8
    1d22:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <hypot>
    1d26:	69 a3       	std	Y+33, r22	; 0x21
    1d28:	7a a3       	std	Y+34, r23	; 0x22
    1d2a:	8b a3       	std	Y+35, r24	; 0x23
    1d2c:	9c a3       	std	Y+36, r25	; 0x24
          }
          
          // Set clockwise/counter-clockwise sign for mc_arc computations
          uint8_t isclockwise = false;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	fc 2d       	mov	r31, r12
    1d32:	f2 30       	cpi	r31, 0x02	; 2
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <gc_execute_line+0xd6a>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
          if (gc.motion_mode == MOTION_MODE_CW_ARC) { isclockwise = true; }
    
          // Trace the arc
          mc_arc(gc.position, target, offset, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2,
    1d38:	20 91 54 01 	lds	r18, 0x0154
    1d3c:	00 91 55 01 	lds	r16, 0x0155
            (gc.inverse_feed_rate_mode) ? inverse_feed_rate : gc.feed_rate, gc.inverse_feed_rate_mode,
    1d40:	80 90 38 01 	lds	r8, 0x0138
          // Set clockwise/counter-clockwise sign for mc_arc computations
          uint8_t isclockwise = false;
          if (gc.motion_mode == MOTION_MODE_CW_ARC) { isclockwise = true; }
    
          // Trace the arc
          mc_arc(gc.position, target, offset, gc.plane_axis_0, gc.plane_axis_1, gc.plane_axis_2,
    1d44:	88 20       	and	r8, r8
    1d46:	61 f4       	brne	.+24     	; 0x1d60 <gc_execute_line+0xd92>
    1d48:	30 91 3d 01 	lds	r19, 0x013D
    1d4c:	3d a3       	std	Y+37, r19	; 0x25
    1d4e:	40 91 3e 01 	lds	r20, 0x013E
    1d52:	4e a3       	std	Y+38, r20	; 0x26
    1d54:	50 91 3f 01 	lds	r21, 0x013F
    1d58:	5f a3       	std	Y+39, r21	; 0x27
    1d5a:	60 91 40 01 	lds	r22, 0x0140
    1d5e:	68 a7       	std	Y+40, r22	; 0x28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <gc_execute_line+0xd94>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <gc_execute_line+0xd96>
    1d64:	0f 92       	push	r0
    1d66:	49 a1       	ldd	r20, Y+33	; 0x21
    1d68:	5a a1       	ldd	r21, Y+34	; 0x22
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	ad b7       	in	r26, 0x3d	; 61
    1d70:	be b7       	in	r27, 0x3e	; 62
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	4d 93       	st	X+, r20
    1d76:	5d 93       	st	X+, r21
    1d78:	6d 93       	st	X+, r22
    1d7a:	7c 93       	st	X, r23
    1d7c:	14 97       	sbiw	r26, 0x04	; 4
    1d7e:	15 96       	adiw	r26, 0x05	; 5
    1d80:	8c 93       	st	X, r24
    1d82:	85 e4       	ldi	r24, 0x45	; 69
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	be 01       	movw	r22, r28
    1d88:	69 5f       	subi	r22, 0xF9	; 249
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	ae 01       	movw	r20, r28
    1d8e:	4d 5e       	subi	r20, 0xED	; 237
    1d90:	5f 4f       	sbci	r21, 0xFF	; 255
    1d92:	e9 a4       	ldd	r14, Y+41	; 0x29
    1d94:	ad a1       	ldd	r26, Y+37	; 0x25
    1d96:	fe a1       	ldd	r31, Y+38	; 0x26
    1d98:	ef a1       	ldd	r30, Y+39	; 0x27
    1d9a:	38 a5       	ldd	r19, Y+40	; 0x28
    1d9c:	aa 2e       	mov	r10, r26
    1d9e:	bf 2e       	mov	r11, r31
    1da0:	ce 2e       	mov	r12, r30
    1da2:	d3 2e       	mov	r13, r19
    1da4:	0e 94 63 03 	call	0x6c6	; 0x6c6 <mc_arc>
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
        }            
        break;
    }
    
    // Report any errors.
    if (gc.status_code) { return(gc.status_code); }    
    1db2:	80 91 36 01 	lds	r24, 0x0136
    1db6:	88 23       	and	r24, r24
    1db8:	e9 f4       	brne	.+58     	; 0x1df4 <gc_execute_line+0xe26>
    
    // As far as the parser is concerned, the position is now == target. In reality the
    // motion control system might still be processing the action and the real tool position
    // in any intermediate location.
    memcpy(gc.position, target, sizeof(double)*3); // gc.position[] = target[];
    1dba:	a5 e4       	ldi	r26, 0x45	; 69
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	37 96       	adiw	r30, 0x07	; 7
    1dc2:	8c e0       	ldi	r24, 0x0C	; 12
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	0d 92       	st	X+, r0
    1dc8:	81 50       	subi	r24, 0x01	; 1
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <gc_execute_line+0xdf6>
  }
  
  // M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may 
  // refill and can only be resumed by the cycle start run-time command.
  if (gc.program_flow) {
    1dcc:	80 91 3b 01 	lds	r24, 0x013B
    1dd0:	88 23       	and	r24, r24
    1dd2:	71 f0       	breq	.+28     	; 0x1df0 <gc_execute_line+0xe22>
    plan_synchronize(); // Finish all remaining buffered motions. Program paused when complete.
    1dd4:	0e 94 a7 1c 	call	0x394e	; 0x394e <plan_synchronize>
    sys.auto_start = false; // Disable auto cycle start.
    1dd8:	10 92 0c 06 	sts	0x060C, r1
    
    // If complete, reset to reload defaults (G92.2,G54,G17,G90,G94,M48,G40,M5,M9). Otherwise,
    // re-enable program flow after pause complete, where cycle start will resume the program.
    if (gc.program_flow == PROGRAM_FLOW_COMPLETED) { sys.abort = true; }
    1ddc:	80 91 3b 01 	lds	r24, 0x013B
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	21 f4       	brne	.+8      	; 0x1dec <gc_execute_line+0xe1e>
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 0a 06 	sts	0x060A, r24
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <gc_execute_line+0xe22>
    else { gc.program_flow = PROGRAM_FLOW_RUNNING; }
    1dec:	10 92 3b 01 	sts	0x013B, r1
  }    
  
  return(gc.status_code);
    1df0:	80 91 36 01 	lds	r24, 0x0136
}
    1df4:	ac 96       	adiw	r28, 0x2c	; 44
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	9f 90       	pop	r9
    1e16:	8f 90       	pop	r8
    1e18:	7f 90       	pop	r7
    1e1a:	6f 90       	pop	r6
    1e1c:	5f 90       	pop	r5
    1e1e:	4f 90       	pop	r4
    1e20:	3f 90       	pop	r3
    1e22:	2f 90       	pop	r2
    1e24:	08 95       	ret

00001e26 <spindle_stop>:
  spindle_stop();
}

void spindle_stop()
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
    1e26:	8b b1       	in	r24, 0x0b	; 11
    1e28:	8b b9       	out	0x0b, r24	; 11
}
    1e2a:	08 95       	ret

00001e2c <spindle_init>:

static uint8_t current_direction;

void spindle_init()
{
  current_direction = 0;
    1e2c:	10 92 57 01 	sts	0x0157, r1
  SPINDLE_ENABLE_DDR |= (1<<SPINDLE_ENABLE_BIT);
    1e30:	8a b1       	in	r24, 0x0a	; 10
    1e32:	8a b9       	out	0x0a, r24	; 10
  SPINDLE_DIRECTION_DDR |= (1<<SPINDLE_DIRECTION_BIT);  
    1e34:	8a b1       	in	r24, 0x0a	; 10
    1e36:	8a b9       	out	0x0a, r24	; 10
  spindle_stop();
}
    1e38:	f6 cf       	rjmp	.-20     	; 0x1e26 <spindle_stop>

00001e3a <spindle_run>:
{
  SPINDLE_ENABLE_PORT &= ~(1<<SPINDLE_ENABLE_BIT);
}

void spindle_run(int direction, uint32_t rpm) 
{
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	ec 01       	movw	r28, r24
  if (direction != current_direction) {
    1e40:	80 91 57 01 	lds	r24, 0x0157
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	c8 17       	cp	r28, r24
    1e48:	d9 07       	cpc	r29, r25
    1e4a:	61 f0       	breq	.+24     	; 0x1e64 <spindle_run+0x2a>
    plan_synchronize();
    1e4c:	0e 94 a7 1c 	call	0x394e	; 0x394e <plan_synchronize>
    if (direction) {
    1e50:	20 97       	sbiw	r28, 0x00	; 0
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <spindle_run+0x24>
      if(direction > 0) {
        SPINDLE_DIRECTION_PORT &= ~(1<<SPINDLE_DIRECTION_BIT);
      } else {
        SPINDLE_DIRECTION_PORT |= 1<<SPINDLE_DIRECTION_BIT;
    1e54:	8b b1       	in	r24, 0x0b	; 11
    1e56:	8b b9       	out	0x0b, r24	; 11
      }
      SPINDLE_ENABLE_PORT |= 1<<SPINDLE_ENABLE_BIT;
    1e58:	8b b1       	in	r24, 0x0b	; 11
    1e5a:	8b b9       	out	0x0b, r24	; 11
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <spindle_run+0x26>
    } else {
      spindle_stop();     
    1e5e:	e3 df       	rcall	.-58     	; 0x1e26 <spindle_stop>
    }
    current_direction = direction;
    1e60:	c0 93 57 01 	sts	0x0157, r28
  }
}
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <serial_init>:

void serial_init()
{

  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
    1e6a:	84 b7       	in	r24, 0x34	; 52
    1e6c:	87 7f       	andi	r24, 0xF7	; 247
    1e6e:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
    1e70:	88 e1       	ldi	r24, 0x18	; 24
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	80 93 60 00 	sts	0x0060, r24
    1e7a:	10 92 60 00 	sts	0x0060, r1
    1e7e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	80 e8       	ldi	r24, 0x80	; 128
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	80 93 61 00 	sts	0x0061, r24
    1e8c:	90 93 61 00 	sts	0x0061, r25
    1e90:	0f be       	out	0x3f, r0	; 63

  /* Disable clock division */
  clock_prescale_set(clock_div_1);
  USB_Init();
    1e92:	0e 94 a0 24 	call	0x4940	; 0x4940 <USB_Init>

  /* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
  CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	6a e5       	ldi	r22, 0x5A	; 90
    1e9c:	71 e0       	ldi	r23, 0x01	; 1
    1e9e:	0e 94 e5 29 	call	0x53ca	; 0x53ca <CDC_Device_CreateStream>
  sei();
    1ea2:	78 94       	sei
}
    1ea4:	08 95       	ret

00001ea6 <serial_tick>:

void serial_tick() {
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29

  if (connected && !was_connected) {
    1eaa:	80 91 58 01 	lds	r24, 0x0158
    1eae:	88 23       	and	r24, r24
    1eb0:	91 f0       	breq	.+36     	; 0x1ed6 <serial_tick+0x30>
    1eb2:	90 91 59 01 	lds	r25, 0x0159
    1eb6:	99 23       	and	r25, r25
    1eb8:	71 f4       	brne	.+28     	; 0x1ed6 <serial_tick+0x30>
    // Print grbl initialization message
    printPgmString(PSTR("\r\nGrbl "), GRBL_VERSION);
    1eba:	88 e1       	ldi	r24, 0x18	; 24
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	71 e0       	ldi	r23, 0x01	; 1
    1ec2:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    printPgmString(PSTR("\r\n'$' to dump current settings\r\n"));
    1ec6:	87 ef       	ldi	r24, 0xF7	; 247
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    was_connected = true;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 59 01 	sts	0x0159, r24
  sei();
}

void serial_tick() {

  if (connected && !was_connected) {
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <serial_tick+0x40>
    // Print grbl initialization message
    printPgmString(PSTR("\r\nGrbl "), GRBL_VERSION);
    printPgmString(PSTR("\r\n'$' to dump current settings\r\n"));
    was_connected = true;
  } else if (was_connected && !connected) {
    1ed6:	90 91 59 01 	lds	r25, 0x0159
    1eda:	99 23       	and	r25, r25
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <serial_tick+0x40>
    1ede:	88 23       	and	r24, r24
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <serial_tick+0x40>
    // TODO: reset the world, and go idle.
    was_connected = false;
    1ee2:	10 92 59 01 	sts	0x0159, r1
  }

  int bytesAvailable = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
    1ee6:	85 e0       	ldi	r24, 0x05	; 5
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	0e 94 69 29 	call	0x52d2	; 0x52d2 <CDC_Device_BytesReceived>
    1eee:	ec 01       	movw	r28, r24
  while (bytesAvailable--) {
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <serial_tick+0x58>
    protocol_process(CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface));
    1ef2:	85 e0       	ldi	r24, 0x05	; 5
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	0e 94 9e 29 	call	0x533c	; 0x533c <CDC_Device_ReceiveByte>
    1efa:	d9 d1       	rcall	.+946    	; 0x22ae <protocol_process>
    1efc:	21 97       	sbiw	r28, 0x01	; 1
    // TODO: reset the world, and go idle.
    was_connected = false;
  }

  int bytesAvailable = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
  while (bytesAvailable--) {
    1efe:	20 97       	sbiw	r28, 0x00	; 0
    1f00:	c1 f7       	brne	.-16     	; 0x1ef2 <serial_tick+0x4c>
    protocol_process(CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface));
//    printPgmString(PSTR("\r\nReceived Byte\r\n"));//DEBUG ONLY
  }

  CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	0e 94 51 29 	call	0x52a2	; 0x52a2 <CDC_Device_USBTask>
  USB_USBTask();
    1f0a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <USB_USBTask>
}
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <serial_write>:

void serial_write(uint8_t data) {
  fputc(data, &USBSerialStream);
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	6a e5       	ldi	r22, 0x5A	; 90
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	0c 94 67 30 	jmp	0x60ce	; 0x60ce <fputc>

00001f1e <serial_reset_read_buffer>:
}

void serial_reset_read_buffer()
{
  CDC_Device_Flush(&VirtualSerial_CDC_Interface);
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	0c 94 1c 29 	jmp	0x5238	; 0x5238 <CDC_Device_Flush>

00001f26 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{


  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1f26:	85 e0       	ldi	r24, 0x05	; 5
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0c 94 bb 28 	jmp	0x5176	; 0x5176 <CDC_Device_ConfigureEndpoints>

00001f2e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1f2e:	85 e0       	ldi	r24, 0x05	; 5
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	0c 94 0d 28 	jmp	0x501a	; 0x501a <CDC_Device_ProcessControlRequest>

00001f36 <EVENT_CDC_Device_ControLineStateChanged>:
}

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo) {
  connected = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 89       	ldd	r24, Z+16	; 0x10
    1f3a:	91 89       	ldd	r25, Z+17	; 0x11
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	80 93 58 01 	sts	0x0158, r24
}
    1f44:	08 95       	ret

00001f46 <status_message>:
static char line[LINE_BUFFER_SIZE]; // Line to be executed. Zero-terminated.
static uint8_t char_counter; // Last character counter in line variable.
static uint8_t iscomment; // Comment/block delete flag for processor to ignore comment characters.

static void status_message(int status_code)
{
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
  if (status_code == STATUS_SILENT) {
    1f4c:	87 30       	cpi	r24, 0x07	; 7
    1f4e:	91 05       	cpc	r25, r1
    1f50:	e9 f1       	breq	.+122    	; 0x1fcc <status_message+0x86>
    return;
  } else if (status_code == 0) {
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <status_message+0x16>
    printPgmString(PSTR("ok\r\n"));
    1f56:	82 eb       	ldi	r24, 0xB2	; 178
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	36 c0       	rjmp	.+108    	; 0x1fc8 <status_message+0x82>
  } else {
    printPgmString(PSTR("error: "));
    1f5c:	8a ea       	ldi	r24, 0xAA	; 170
    1f5e:	91 e0       	ldi	r25, 0x01	; 1
    1f60:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    switch(status_code) {
    1f64:	c3 30       	cpi	r28, 0x03	; 3
    1f66:	d1 05       	cpc	r29, r1
    1f68:	d1 f0       	breq	.+52     	; 0x1f9e <status_message+0x58>
    1f6a:	c4 30       	cpi	r28, 0x04	; 4
    1f6c:	d1 05       	cpc	r29, r1
    1f6e:	3c f4       	brge	.+14     	; 0x1f7e <status_message+0x38>
    1f70:	c1 30       	cpi	r28, 0x01	; 1
    1f72:	d1 05       	cpc	r29, r1
    1f74:	71 f0       	breq	.+28     	; 0x1f92 <status_message+0x4c>
    1f76:	c2 30       	cpi	r28, 0x02	; 2
    1f78:	d1 05       	cpc	r29, r1
    1f7a:	e9 f4       	brne	.+58     	; 0x1fb6 <status_message+0x70>
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <status_message+0x52>
    1f7e:	c5 30       	cpi	r28, 0x05	; 5
    1f80:	d1 05       	cpc	r29, r1
    1f82:	99 f0       	breq	.+38     	; 0x1faa <status_message+0x64>
    1f84:	c5 30       	cpi	r28, 0x05	; 5
    1f86:	d1 05       	cpc	r29, r1
    1f88:	6c f0       	brlt	.+26     	; 0x1fa4 <status_message+0x5e>
    1f8a:	c6 30       	cpi	r28, 0x06	; 6
    1f8c:	d1 05       	cpc	r29, r1
    1f8e:	99 f4       	brne	.+38     	; 0x1fb6 <status_message+0x70>
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <status_message+0x6a>
      case STATUS_BAD_NUMBER_FORMAT:
      printPgmString(PSTR("Bad number format\r\n")); break;
    1f92:	86 e9       	ldi	r24, 0x96	; 150
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	18 c0       	rjmp	.+48     	; 0x1fc8 <status_message+0x82>
      case STATUS_EXPECTED_COMMAND_LETTER:
      printPgmString(PSTR("Expected command letter\r\n")); break;
    1f98:	8c e7       	ldi	r24, 0x7C	; 124
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	15 c0       	rjmp	.+42     	; 0x1fc8 <status_message+0x82>
      case STATUS_UNSUPPORTED_STATEMENT:
      printPgmString(PSTR("Unsupported statement\r\n")); break;
    1f9e:	84 e6       	ldi	r24, 0x64	; 100
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	12 c0       	rjmp	.+36     	; 0x1fc8 <status_message+0x82>
      case STATUS_FLOATING_POINT_ERROR:
      printPgmString(PSTR("Floating point error\r\n")); break;
    1fa4:	8d e4       	ldi	r24, 0x4D	; 77
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <status_message+0x82>
      case STATUS_MODAL_GROUP_VIOLATION:
      printPgmString(PSTR("Modal group violation\r\n")); break;
    1faa:	85 e3       	ldi	r24, 0x35	; 53
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <status_message+0x82>
      case STATUS_INVALID_COMMAND:
      printPgmString(PSTR("Invalid command\r\n")); break;
    1fb0:	83 e2       	ldi	r24, 0x23	; 35
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <status_message+0x82>
      default:
      printInteger(status_code);
    1fb6:	be 01       	movw	r22, r28
    1fb8:	88 27       	eor	r24, r24
    1fba:	77 fd       	sbrc	r23, 7
    1fbc:	80 95       	com	r24
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <printInteger>
      printPgmString(PSTR("\r\n"));
    1fc4:	80 e2       	ldi	r24, 0x20	; 32
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    }
  }
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <protocol_status_report>:


void protocol_status_report()
{
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	6f 92       	push	r6
    1fd8:	7f 92       	push	r7
    1fda:	8f 92       	push	r8
    1fdc:	9f 92       	push	r9
    1fde:	af 92       	push	r10
    1fe0:	bf 92       	push	r11
    1fe2:	cf 92       	push	r12
    1fe4:	df 92       	push	r13
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	c0 90 0d 06 	lds	r12, 0x060D
    1ff6:	d0 90 0e 06 	lds	r13, 0x060E
    1ffa:	e0 90 0f 06 	lds	r14, 0x060F
    1ffe:	f0 90 10 06 	lds	r15, 0x0610
    2002:	80 90 11 06 	lds	r8, 0x0611
    2006:	90 90 12 06 	lds	r9, 0x0612
    200a:	a0 90 13 06 	lds	r10, 0x0613
    200e:	b0 90 14 06 	lds	r11, 0x0614
    2012:	40 90 15 06 	lds	r4, 0x0615
    2016:	50 90 16 06 	lds	r5, 0x0616
    201a:	60 90 17 06 	lds	r6, 0x0617
    201e:	70 90 18 06 	lds	r7, 0x0618
   printString(","); printFloat(print_position[Z_AXIS]/(settings.steps_per_mm[Z_AXIS]*MM_PER_INCH));
   printString("],WPos:["); printFloat((print_position[X_AXIS]/settings.steps_per_mm[X_AXIS]-sys.coord_system[sys.coord_select][X_AXIS]-sys.coord_offset[X_AXIS])/MM_PER_INCH);
   printString(","); printFloat((print_position[Y_AXIS]/settings.steps_per_mm[Y_AXIS]-sys.coord_system[sys.coord_select][Y_AXIS]-sys.coord_offset[Y_AXIS])/MM_PER_INCH);
   printString(","); printFloat((print_position[Z_AXIS]/settings.steps_per_mm[Z_AXIS]-sys.coord_system[sys.coord_select][Z_AXIS]-sys.coord_offset[Z_AXIS])/MM_PER_INCH);
 #else
   printString("MPos:["); printFloat(print_position[X_AXIS]/(settings.steps_per_mm[X_AXIS]));
    2022:	80 e2       	ldi	r24, 0x20	; 32
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    202a:	c7 01       	movw	r24, r14
    202c:	b6 01       	movw	r22, r12
    202e:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    2032:	6b 01       	movw	r12, r22
    2034:	7c 01       	movw	r14, r24
    2036:	20 91 34 06 	lds	r18, 0x0634
    203a:	30 91 35 06 	lds	r19, 0x0635
    203e:	40 91 36 06 	lds	r20, 0x0636
    2042:	50 91 37 06 	lds	r21, 0x0637
    2046:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    204a:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
   printString(","); printFloat(print_position[Y_AXIS]/(settings.steps_per_mm[Y_AXIS]));
    204e:	07 e2       	ldi	r16, 0x27	; 39
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	c8 01       	movw	r24, r16
    2054:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    2058:	c5 01       	movw	r24, r10
    205a:	b4 01       	movw	r22, r8
    205c:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    2060:	4b 01       	movw	r8, r22
    2062:	5c 01       	movw	r10, r24
    2064:	20 91 38 06 	lds	r18, 0x0638
    2068:	30 91 39 06 	lds	r19, 0x0639
    206c:	40 91 3a 06 	lds	r20, 0x063A
    2070:	50 91 3b 06 	lds	r21, 0x063B
    2074:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    2078:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
   printString(","); printFloat(print_position[Z_AXIS]/(settings.steps_per_mm[Z_AXIS]));
    207c:	c8 01       	movw	r24, r16
    207e:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    2082:	c3 01       	movw	r24, r6
    2084:	b2 01       	movw	r22, r4
    2086:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    208a:	2b 01       	movw	r4, r22
    208c:	3c 01       	movw	r6, r24
    208e:	20 91 3c 06 	lds	r18, 0x063C
    2092:	30 91 3d 06 	lds	r19, 0x063D
    2096:	40 91 3e 06 	lds	r20, 0x063E
    209a:	50 91 3f 06 	lds	r21, 0x063F
    209e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    20a2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
   printString("],WPos:["); printFloat(print_position[X_AXIS]/settings.steps_per_mm[X_AXIS]-sys.coord_system[sys.coord_select][X_AXIS]-sys.coord_offset[X_AXIS]);
    20a6:	89 e2       	ldi	r24, 0x29	; 41
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    20ae:	c7 01       	movw	r24, r14
    20b0:	b6 01       	movw	r22, r12
    20b2:	20 91 34 06 	lds	r18, 0x0634
    20b6:	30 91 35 06 	lds	r19, 0x0635
    20ba:	40 91 36 06 	lds	r20, 0x0636
    20be:	50 91 37 06 	lds	r21, 0x0637
    20c2:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    20c6:	20 91 19 06 	lds	r18, 0x0619
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	ca e0       	ldi	r28, 0x0A	; 10
    20ce:	d6 e0       	ldi	r29, 0x06	; 6
    20d0:	f9 01       	movw	r30, r18
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	e2 0f       	add	r30, r18
    20d8:	f3 1f       	adc	r31, r19
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	ec 0f       	add	r30, r28
    20e4:	fd 1f       	adc	r31, r29
    20e6:	20 89       	ldd	r18, Z+16	; 0x10
    20e8:	31 89       	ldd	r19, Z+17	; 0x11
    20ea:	42 89       	ldd	r20, Z+18	; 0x12
    20ec:	53 89       	ldd	r21, Z+19	; 0x13
    20ee:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    20f2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    20f4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    20f6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    20f8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    20fa:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    20fe:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
   printString(","); printFloat(print_position[Y_AXIS]/settings.steps_per_mm[Y_AXIS]-sys.coord_system[sys.coord_select][Y_AXIS]-sys.coord_offset[Y_AXIS]);
    2102:	c8 01       	movw	r24, r16
    2104:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    2108:	c5 01       	movw	r24, r10
    210a:	b4 01       	movw	r22, r8
    210c:	20 91 38 06 	lds	r18, 0x0638
    2110:	30 91 39 06 	lds	r19, 0x0639
    2114:	40 91 3a 06 	lds	r20, 0x063A
    2118:	50 91 3b 06 	lds	r21, 0x063B
    211c:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    2120:	20 91 19 06 	lds	r18, 0x0619
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	f9 01       	movw	r30, r18
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	ee 0f       	add	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ec 0f       	add	r30, r28
    213a:	fd 1f       	adc	r31, r29
    213c:	24 89       	ldd	r18, Z+20	; 0x14
    213e:	35 89       	ldd	r19, Z+21	; 0x15
    2140:	46 89       	ldd	r20, Z+22	; 0x16
    2142:	57 89       	ldd	r21, Z+23	; 0x17
    2144:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    2148:	28 a1       	ldd	r18, Y+32	; 0x20
    214a:	39 a1       	ldd	r19, Y+33	; 0x21
    214c:	4a a1       	ldd	r20, Y+34	; 0x22
    214e:	5b a1       	ldd	r21, Y+35	; 0x23
    2150:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    2154:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
   printString(","); printFloat(print_position[Z_AXIS]/settings.steps_per_mm[Z_AXIS]-sys.coord_system[sys.coord_select][Z_AXIS]-sys.coord_offset[Z_AXIS]);
    2158:	c8 01       	movw	r24, r16
    215a:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
    215e:	c3 01       	movw	r24, r6
    2160:	b2 01       	movw	r22, r4
    2162:	20 91 3c 06 	lds	r18, 0x063C
    2166:	30 91 3d 06 	lds	r19, 0x063D
    216a:	40 91 3e 06 	lds	r20, 0x063E
    216e:	50 91 3f 06 	lds	r21, 0x063F
    2172:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    2176:	20 91 19 06 	lds	r18, 0x0619
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	f9 01       	movw	r30, r18
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ec 0f       	add	r30, r28
    2190:	fd 1f       	adc	r31, r29
    2192:	20 8d       	ldd	r18, Z+24	; 0x18
    2194:	31 8d       	ldd	r19, Z+25	; 0x19
    2196:	42 8d       	ldd	r20, Z+26	; 0x1a
    2198:	53 8d       	ldd	r21, Z+27	; 0x1b
    219a:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    219e:	2c a1       	ldd	r18, Y+36	; 0x24
    21a0:	3d a1       	ldd	r19, Y+37	; 0x25
    21a2:	4e a1       	ldd	r20, Y+38	; 0x26
    21a4:	5f a1       	ldd	r21, Y+39	; 0x27
    21a6:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    21aa:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
 #endif
 printString("]\r\n");
    21ae:	82 e3       	ldi	r24, 0x32	; 50
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	0e 94 7d 22 	call	0x44fa	; 0x44fa <printString>
}
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	5f 90       	pop	r5
    21d4:	4f 90       	pop	r4
    21d6:	08 95       	ret

000021d8 <protocol_init>:


void protocol_init()
{
  // Print grbl initialization message
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION));
    21d8:	88 ed       	ldi	r24, 0xD8	; 216
    21da:	91 e0       	ldi	r25, 0x01	; 1
    21dc:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
  printPgmString(PSTR("\r\n'$' to dump current settings\r\n"));
    21e0:	87 eb       	ldi	r24, 0xB7	; 183
    21e2:	91 e0       	ldi	r25, 0x01	; 1
    21e4:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>

  char_counter = 0; // Reset line input
    21e8:	10 92 68 01 	sts	0x0168, r1
  iscomment = false;
    21ec:	10 92 9b 01 	sts	0x019B, r1
}
    21f0:	08 95       	ret

000021f2 <protocol_execute_runtime>:
// parsing and planning functions. This function also serves as an interface for the interrupts to
// set the system runtime flags, where only the main program to handles them, removing the need to
// define more computationally-expensive volatile variables.
// NOTE: The sys.execute variable flags are set by the serial read subprogram, except where noted.
void protocol_execute_runtime()
{
    21f2:	1f 93       	push	r17
  if (sys.execute) { // Enter only if any bit flag is true
    21f4:	80 91 33 06 	lds	r24, 0x0633
    21f8:	88 23       	and	r24, r24
    21fa:	59 f1       	breq	.+86     	; 0x2252 <protocol_execute_runtime+0x60>
    uint8_t rt_exec = sys.execute; // Avoid calling volatile multiple times
    21fc:	10 91 33 06 	lds	r17, 0x0633

    // System abort. Steppers have already been force stopped.
    if (rt_exec & EXEC_RESET) {
    2200:	14 ff       	sbrs	r17, 4
    2202:	04 c0       	rjmp	.+8      	; 0x220c <protocol_execute_runtime+0x1a>
      sys.abort = true;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	80 93 0a 06 	sts	0x060A, r24
      return; // Nothing else to do but exit.
    220a:	23 c0       	rjmp	.+70     	; 0x2252 <protocol_execute_runtime+0x60>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
    220c:	10 ff       	sbrs	r17, 0
    220e:	06 c0       	rjmp	.+12     	; 0x221c <protocol_execute_runtime+0x2a>
      protocol_status_report();
    2210:	e0 de       	rcall	.-576    	; 0x1fd2 <protocol_status_report>
      bit_false(sys.execute,EXEC_STATUS_REPORT);
    2212:	80 91 33 06 	lds	r24, 0x0633
    2216:	8e 7f       	andi	r24, 0xFE	; 254
    2218:	80 93 33 06 	sts	0x0633, r24
    }

    // Initiate stepper feed hold
    if (rt_exec & EXEC_FEED_HOLD) {
    221c:	13 ff       	sbrs	r17, 3
    221e:	06 c0       	rjmp	.+12     	; 0x222c <protocol_execute_runtime+0x3a>
      st_feed_hold(); // Initiate feed hold.
    2220:	6e d4       	rcall	.+2268   	; 0x2afe <st_feed_hold>
      bit_false(sys.execute,EXEC_FEED_HOLD);
    2222:	80 91 33 06 	lds	r24, 0x0633
    2226:	87 7f       	andi	r24, 0xF7	; 247
    2228:	80 93 33 06 	sts	0x0633, r24
    }

    // Reinitializes the stepper module running flags and re-plans the buffer after a feed hold.
    // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
    if (rt_exec & EXEC_CYCLE_STOP) {
    222c:	12 ff       	sbrs	r17, 2
    222e:	06 c0       	rjmp	.+12     	; 0x223c <protocol_execute_runtime+0x4a>
      st_cycle_reinitialize();
    2230:	74 d4       	rcall	.+2280   	; 0x2b1a <st_cycle_reinitialize>
      bit_false(sys.execute,EXEC_CYCLE_STOP);
    2232:	80 91 33 06 	lds	r24, 0x0633
    2236:	8b 7f       	andi	r24, 0xFB	; 251
    2238:	80 93 33 06 	sts	0x0633, r24
    }

    if (rt_exec & EXEC_CYCLE_START) {
    223c:	11 ff       	sbrs	r17, 1
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <protocol_execute_runtime+0x60>
      st_cycle_start(); // Issue cycle start command to stepper subsystem
    2240:	41 d4       	rcall	.+2178   	; 0x2ac4 <st_cycle_start>
      #ifdef CYCLE_AUTO_START
        sys.auto_start = true; // Re-enable auto start after feed hold.
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 0c 06 	sts	0x060C, r24
      #endif
      bit_false(sys.execute,EXEC_CYCLE_START);
    2248:	80 91 33 06 	lds	r24, 0x0633
    224c:	8d 7f       	andi	r24, 0xFD	; 253
    224e:	80 93 33 06 	sts	0x0633, r24
    }
  }
}
    2252:	1f 91       	pop	r17
    2254:	08 95       	ret

00002256 <protocol_execute_line>:


// Executes one line of input according to protocol
uint8_t protocol_execute_line(char *current_line)
{	
  switch (current_line[0]) {
    2256:	fc 01       	movw	r30, r24
    2258:	20 81       	ld	r18, Z
    225a:	24 32       	cpi	r18, 0x24	; 36
    225c:	61 f0       	breq	.+24     	; 0x2276 <protocol_execute_line+0x20>
    225e:	25 32       	cpi	r18, 0x25	; 37
    2260:	28 f4       	brcc	.+10     	; 0x226c <protocol_execute_line+0x16>
    2262:	28 31       	cpi	r18, 0x18	; 24
    2264:	a9 f0       	breq	.+42     	; 0x2290 <protocol_execute_line+0x3a>
    2266:	21 32       	cpi	r18, 0x21	; 33
    2268:	01 f5       	brne	.+64     	; 0x22aa <protocol_execute_line+0x54>
    226a:	0e c0       	rjmp	.+28     	; 0x2288 <protocol_execute_line+0x32>
    226c:	2f 33       	cpi	r18, 0x3F	; 63
    226e:	21 f0       	breq	.+8      	; 0x2278 <protocol_execute_line+0x22>
    2270:	2e 37       	cpi	r18, 0x7E	; 126
    2272:	d9 f4       	brne	.+54     	; 0x22aa <protocol_execute_line+0x54>
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <protocol_execute_line+0x2a>
    // are considered defaults and loaded upon startup/reset.
    //   This use is envisioned where '$' itself dumps settings and help. Defined characters
    // proceeding the '$' may be used to setup modes, such as jog mode with a '$J=X100' for X-axis
    // motion with a nominal feedrate of 100mm/min. Writing EEPROM settings will likely stay the
    // same or similar. Should be worked out in upcoming releases.
    return(settings_execute_line(current_line)); // Delegate lines starting with '$' to the settings module
    2276:	5b c7       	rjmp	.+3766   	; 0x312e <settings_execute_line>
    break;

  case CMD_STATUS_REPORT:
    sys.execute |= EXEC_STATUS_REPORT; // Set as true
    2278:	80 91 33 06 	lds	r24, 0x0633
    227c:	81 60       	ori	r24, 0x01	; 1
    227e:	11 c0       	rjmp	.+34     	; 0x22a2 <protocol_execute_line+0x4c>
    return STATUS_SILENT;
    break;

  case CMD_CYCLE_START:
    sys.execute |= EXEC_CYCLE_START; // Set as true
    2280:	80 91 33 06 	lds	r24, 0x0633
    2284:	82 60       	ori	r24, 0x02	; 2
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <protocol_execute_line+0x4c>
    return STATUS_SILENT;
    break;

  case CMD_FEED_HOLD:
    sys.execute |= EXEC_FEED_HOLD; // Set as true
    2288:	80 91 33 06 	lds	r24, 0x0633
    228c:	88 60       	ori	r24, 0x08	; 8
    228e:	09 c0       	rjmp	.+18     	; 0x22a2 <protocol_execute_line+0x4c>
    return STATUS_SILENT;
    break;

  case CMD_RESET:
    // Immediately force stepper and spindle subsystem idle at an interrupt level.
    if (!(sys.execute & EXEC_RESET)) { // Force stop only first time.
    2290:	80 91 33 06 	lds	r24, 0x0633
    2294:	84 fd       	sbrc	r24, 4
    2296:	02 c0       	rjmp	.+4      	; 0x229c <protocol_execute_line+0x46>
      st_go_idle();
    2298:	ed d0       	rcall	.+474    	; 0x2474 <st_go_idle>
      spindle_stop();
    229a:	c5 dd       	rcall	.-1142   	; 0x1e26 <spindle_stop>
    }
    sys.execute |= EXEC_RESET; // Set as true
    229c:	80 91 33 06 	lds	r24, 0x0633
    22a0:	80 61       	ori	r24, 0x10	; 16
    22a2:	80 93 33 06 	sts	0x0633, r24
    return STATUS_SILENT;
    22a6:	87 e0       	ldi	r24, 0x07	; 7
    22a8:	08 95       	ret
    // need to be updated real-time and supplied to the user through status queries.
    //   More controlled exact motions can be taken care of by inputting G0 or G1 commands, which are
    // handled by the planner. It would be possible for the jog subprogram to insert blocks into the
    // block buffer without having the planner plan them. It would need to manage de/ac-celerations
    // on its own carefully. This approach could be effective and possibly size/memory efficient.
    return(gc_execute_line(current_line));    // Everything else is gcode
    22aa:	0c 94 e7 07 	jmp	0xfce	; 0xfce <gc_execute_line>

000022ae <protocol_process>:


// Process one line of incoming serial data. Remove unneeded characters and capitalize.
void protocol_process(uint8_t c)
{
  if ((c == '\n') || (c == '\r')) { // End of line reached
    22ae:	8a 30       	cpi	r24, 0x0A	; 10
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <protocol_process+0x8>
    22b2:	8d 30       	cpi	r24, 0x0D	; 13
    22b4:	c9 f4       	brne	.+50     	; 0x22e8 <protocol_process+0x3a>

    // Runtime command check point before executing line. Prevent any furthur line executions.
    // NOTE: If there is no line, this function should quickly return to the main program when
    // the buffer empties of non-executable data.
    protocol_execute_runtime();
    22b6:	9d df       	rcall	.-198    	; 0x21f2 <protocol_execute_runtime>
    if (sys.abort) { return; } // Bail to main program upon system abort
    22b8:	80 91 0a 06 	lds	r24, 0x060A
    22bc:	88 23       	and	r24, r24
    22be:	09 f0       	breq	.+2      	; 0x22c2 <protocol_process+0x14>
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <protocol_process+0x92>

    if (char_counter > 0) {// Line is complete. Then execute!
    22c2:	e0 91 68 01 	lds	r30, 0x0168
    22c6:	ee 23       	and	r30, r30
    22c8:	49 f0       	breq	.+18     	; 0x22dc <protocol_process+0x2e>
      line[char_counter] = 0; // Terminate string
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	e7 59       	subi	r30, 0x97	; 151
    22ce:	fe 4f       	sbci	r31, 0xFE	; 254
    22d0:	10 82       	st	Z, r1
      status_message(protocol_execute_line(line));
    22d2:	89 e6       	ldi	r24, 0x69	; 105
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	bf df       	rcall	.-130    	; 0x2256 <protocol_execute_line>
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <protocol_process+0x32>
    } else {
      // Empty or comment line. Skip block.
      status_message(STATUS_OK); // Send status message for syncing purposes.
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	32 de       	rcall	.-924    	; 0x1f46 <status_message>
    }
    char_counter = 0; // Reset line buffer index
    22e2:	10 92 68 01 	sts	0x0168, r1
    22e6:	06 c0       	rjmp	.+12     	; 0x22f4 <protocol_process+0x46>
    iscomment = false; // Reset comment flag

  } else {
    if (iscomment) {
    22e8:	90 91 9b 01 	lds	r25, 0x019B
    22ec:	99 23       	and	r25, r25
    22ee:	29 f0       	breq	.+10     	; 0x22fa <protocol_process+0x4c>
      // Throw away all comment characters
      if (c == ')') {
    22f0:	89 32       	cpi	r24, 0x29	; 41
    22f2:	31 f5       	brne	.+76     	; 0x2340 <protocol_process+0x92>
        // End of comment. Resume line.
        iscomment = false;
    22f4:	10 92 9b 01 	sts	0x019B, r1
    22f8:	08 95       	ret
      }
    } else {
      if (c <= ' ') {
    22fa:	81 32       	cpi	r24, 0x21	; 33
    22fc:	08 f1       	brcs	.+66     	; 0x2340 <protocol_process+0x92>
        // Throw away whitepace and control characters
      } else if (c == '/') {
    22fe:	8f 32       	cpi	r24, 0x2F	; 47
    2300:	f9 f0       	breq	.+62     	; 0x2340 <protocol_process+0x92>
        // Disable block delete and throw away characters. Will ignore until EOL.
        #if BLOCK_DELETE_ENABLE
          iscomment = true;
        #endif
      } else if (c == '(') {
    2302:	88 32       	cpi	r24, 0x28	; 40
    2304:	21 f4       	brne	.+8      	; 0x230e <protocol_process+0x60>
        // Enable comments flag and ignore all characters until ')' or EOL.
        iscomment = true;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 93 9b 01 	sts	0x019B, r24
    230c:	08 95       	ret
      } else if (char_counter >= LINE_BUFFER_SIZE-1) {
    230e:	90 91 68 01 	lds	r25, 0x0168
    2312:	91 33       	cpi	r25, 0x31	; 49
    2314:	a8 f4       	brcc	.+42     	; 0x2340 <protocol_process+0x92>
        // Throw away any characters beyond the end of the line buffer
      } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
    2316:	48 2f       	mov	r20, r24
    2318:	41 56       	subi	r20, 0x61	; 97
    231a:	29 2f       	mov	r18, r25
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	9f 5f       	subi	r25, 0xFF	; 255
    2320:	4a 31       	cpi	r20, 0x1A	; 26
    2322:	40 f4       	brcc	.+16     	; 0x2334 <protocol_process+0x86>
        line[char_counter++] = c-'a'+'A';
    2324:	27 59       	subi	r18, 0x97	; 151
    2326:	3e 4f       	sbci	r19, 0xFE	; 254
    2328:	80 52       	subi	r24, 0x20	; 32
    232a:	f9 01       	movw	r30, r18
    232c:	80 83       	st	Z, r24
    232e:	90 93 68 01 	sts	0x0168, r25
    2332:	08 95       	ret
      } else {
        line[char_counter++] = c;
    2334:	27 59       	subi	r18, 0x97	; 151
    2336:	3e 4f       	sbci	r19, 0xFE	; 254
    2338:	f9 01       	movw	r30, r18
    233a:	80 83       	st	Z, r24
    233c:	90 93 68 01 	sts	0x0168, r25
    2340:	08 95       	ret

00002342 <iterate_trapezoid_cycle_counter>:
// This function determines an acceleration velocity change every CYCLES_PER_ACCELERATION_TICK by
// keeping track of the number of elapsed cycles during a de/ac-celeration. The code assumes that 
// step_events occur significantly more often than the acceleration velocity iterations.
inline static uint8_t iterate_trapezoid_cycle_counter() 
{
  st.trapezoid_tick_cycle_counter += st.cycles_per_step_event;  
    2342:	80 91 b2 01 	lds	r24, 0x01B2
    2346:	90 91 b3 01 	lds	r25, 0x01B3
    234a:	a0 91 b4 01 	lds	r26, 0x01B4
    234e:	b0 91 b5 01 	lds	r27, 0x01B5
    2352:	20 91 b6 01 	lds	r18, 0x01B6
    2356:	30 91 b7 01 	lds	r19, 0x01B7
    235a:	40 91 b8 01 	lds	r20, 0x01B8
    235e:	50 91 b9 01 	lds	r21, 0x01B9
    2362:	82 0f       	add	r24, r18
    2364:	93 1f       	adc	r25, r19
    2366:	a4 1f       	adc	r26, r20
    2368:	b5 1f       	adc	r27, r21
    236a:	80 93 b6 01 	sts	0x01B6, r24
    236e:	90 93 b7 01 	sts	0x01B7, r25
    2372:	a0 93 b8 01 	sts	0x01B8, r26
    2376:	b0 93 b9 01 	sts	0x01B9, r27
  if(st.trapezoid_tick_cycle_counter > CYCLES_PER_ACCELERATION_TICK) {
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	22 ee       	ldi	r18, 0xE2	; 226
    237e:	92 07       	cpc	r25, r18
    2380:	24 e0       	ldi	r18, 0x04	; 4
    2382:	a2 07       	cpc	r26, r18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	b2 07       	cpc	r27, r18
    2388:	70 f0       	brcs	.+28     	; 0x23a6 <iterate_trapezoid_cycle_counter+0x64>
    st.trapezoid_tick_cycle_counter -= CYCLES_PER_ACCELERATION_TICK;
    238a:	80 50       	subi	r24, 0x00	; 0
    238c:	92 4e       	sbci	r25, 0xE2	; 226
    238e:	a4 40       	sbci	r26, 0x04	; 4
    2390:	b0 40       	sbci	r27, 0x00	; 0
    2392:	80 93 b6 01 	sts	0x01B6, r24
    2396:	90 93 b7 01 	sts	0x01B7, r25
    239a:	a0 93 b8 01 	sts	0x01B8, r26
    239e:	b0 93 b9 01 	sts	0x01B9, r27
    return(true);
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	08 95       	ret
  } else {
    return(false);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
  }
}          
    23a8:	08 95       	ret

000023aa <set_step_events_per_minute>:
  OCR1A = ceiling;
  return(actual_cycles);
}

static void set_step_events_per_minute(uint32_t steps_per_minute) 
{
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
    23ae:	20 32       	cpi	r18, 0x20	; 32
    23b0:	83 e0       	ldi	r24, 0x03	; 3
    23b2:	38 07       	cpc	r19, r24
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	48 07       	cpc	r20, r24
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	58 07       	cpc	r21, r24
    23bc:	20 f4       	brcc	.+8      	; 0x23c6 <set_step_events_per_minute+0x1c>
    23be:	20 e2       	ldi	r18, 0x20	; 32
    23c0:	33 e0       	ldi	r19, 0x03	; 3
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
  st.cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e7       	ldi	r23, 0x70	; 112
    23ca:	88 e3       	ldi	r24, 0x38	; 56
    23cc:	99 e3       	ldi	r25, 0x39	; 57
    23ce:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__udivmodsi4>
static uint32_t config_step_timer(uint32_t cycles)
{
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
  if (cycles <= 0xffffL) {
    23d2:	20 30       	cpi	r18, 0x00	; 0
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	38 07       	cpc	r19, r24
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	48 07       	cpc	r20, r24
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	58 07       	cpc	r21, r24
    23e0:	30 f4       	brcc	.+12     	; 0x23ee <set_step_events_per_minute+0x44>
    ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
    23e2:	c9 01       	movw	r24, r18
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t ceiling;
  uint16_t prescaler;
  uint32_t actual_cycles;
  if (cycles <= 0xffffL) {
    ceiling = cycles;
    prescaler = 0; // prescaler: 0
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	2f c0       	rjmp	.+94     	; 0x244c <set_step_events_per_minute+0xa2>
    actual_cycles = ceiling;
  } else if (cycles <= 0x7ffffL) {
    23ee:	20 30       	cpi	r18, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	38 07       	cpc	r19, r24
    23f4:	88 e0       	ldi	r24, 0x08	; 8
    23f6:	48 07       	cpc	r20, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	58 07       	cpc	r21, r24
    23fc:	a0 f4       	brcc	.+40     	; 0x2426 <set_step_events_per_minute+0x7c>
    ceiling = cycles >> 3;
    23fe:	e3 e0       	ldi	r30, 0x03	; 3
    2400:	56 95       	lsr	r21
    2402:	47 95       	ror	r20
    2404:	37 95       	ror	r19
    2406:	27 95       	ror	r18
    2408:	ea 95       	dec	r30
    240a:	d1 f7       	brne	.-12     	; 0x2400 <set_step_events_per_minute+0x56>
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
    240c:	c9 01       	movw	r24, r18
    240e:	a0 e0       	ldi	r26, 0x00	; 0
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	73 e0       	ldi	r23, 0x03	; 3
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	aa 1f       	adc	r26, r26
    241a:	bb 1f       	adc	r27, r27
    241c:	7a 95       	dec	r23
    241e:	d1 f7       	brne	.-12     	; 0x2414 <set_step_events_per_minute+0x6a>
    ceiling = cycles;
    prescaler = 0; // prescaler: 0
    actual_cycles = ceiling;
  } else if (cycles <= 0x7ffffL) {
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	13 c0       	rjmp	.+38     	; 0x244c <set_step_events_per_minute+0xa2>
    actual_cycles = ceiling * 8L;
  } else if (cycles <= 0x3fffffL) {
    ceiling =  cycles >> 6;
    2426:	66 e0       	ldi	r22, 0x06	; 6
    2428:	56 95       	lsr	r21
    242a:	47 95       	ror	r20
    242c:	37 95       	ror	r19
    242e:	27 95       	ror	r18
    2430:	6a 95       	dec	r22
    2432:	d1 f7       	brne	.-12     	; 0x2428 <set_step_events_per_minute+0x7e>
    prescaler = 2; // prescaler: 64
    actual_cycles = ceiling * 64L;
    2434:	c9 01       	movw	r24, r18
    2436:	a0 e0       	ldi	r26, 0x00	; 0
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	46 e0       	ldi	r20, 0x06	; 6
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	aa 1f       	adc	r26, r26
    2442:	bb 1f       	adc	r27, r27
    2444:	4a 95       	dec	r20
    2446:	d1 f7       	brne	.-12     	; 0x243c <set_step_events_per_minute+0x92>
    ceiling = cycles >> 3;
    prescaler = 1; // prescaler: 8
    actual_cycles = ceiling * 8L;
  } else if (cycles <= 0x3fffffL) {
    ceiling =  cycles >> 6;
    prescaler = 2; // prescaler: 64
    2448:	42 e0       	ldi	r20, 0x02	; 2
    244a:	50 e0       	ldi	r21, 0x00	; 0
    ceiling = 0xffff;
    prescaler = 4;
    actual_cycles = 0xffff * 1024;
  }
  // Set prescaler
  TCCR1B = (TCCR1B & ~(0x07<<CS10)) | ((prescaler+1)<<CS10);
    244c:	60 91 81 00 	lds	r22, 0x0081
    2450:	4f 5f       	subi	r20, 0xFF	; 255
    2452:	68 7f       	andi	r22, 0xF8	; 248
    2454:	46 2b       	or	r20, r22
    2456:	40 93 81 00 	sts	0x0081, r20
  // Set ceiling
  OCR1A = ceiling;
    245a:	30 93 89 00 	sts	0x0089, r19
    245e:	20 93 88 00 	sts	0x0088, r18
}

static void set_step_events_per_minute(uint32_t steps_per_minute) 
{
  if (steps_per_minute < MINIMUM_STEPS_PER_MINUTE) { steps_per_minute = MINIMUM_STEPS_PER_MINUTE; }
  st.cycles_per_step_event = config_step_timer((TICKS_PER_MICROSECOND*1000000*60)/steps_per_minute);
    2462:	80 93 b2 01 	sts	0x01B2, r24
    2466:	90 93 b3 01 	sts	0x01B3, r25
    246a:	a0 93 b4 01 	sts	0x01B4, r26
    246e:	b0 93 b5 01 	sts	0x01B5, r27
}
    2472:	08 95       	ret

00002474 <st_go_idle>:

// Stepper shutdown
void st_go_idle() 
{
  // Disable stepper driver interrupt
  TIMSK1 &= ~(1<<OCIE1A); 
    2474:	ef e6       	ldi	r30, 0x6F	; 111
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8d 7f       	andi	r24, 0xFD	; 253
    247c:	80 83       	st	Z, r24
    247e:	8f e7       	ldi	r24, 0x7F	; 127
    2480:	98 e3       	ldi	r25, 0x38	; 56
    2482:	a1 e0       	ldi	r26, 0x01	; 1
    2484:	81 50       	subi	r24, 0x01	; 1
    2486:	90 40       	sbci	r25, 0x00	; 0
    2488:	a0 40       	sbci	r26, 0x00	; 0
    248a:	e1 f7       	brne	.-8      	; 0x2484 <st_go_idle+0x10>
    248c:	00 c0       	rjmp	.+0      	; 0x248e <st_go_idle+0x1a>
    248e:	00 00       	nop
  // stop and not drift from residual inertial forces at the end of the last movement.
  #if STEPPER_IDLE_LOCK_TIME > 0
    _delay_ms(STEPPER_IDLE_LOCK_TIME);   
  #endif
  // Disable steppers by setting stepper disable
  STEPPERS_DISABLE_PORT |= (1<<STEPPERS_DISABLE_BIT);
    2490:	58 9a       	sbi	0x0b, 0	; 11
}
    2492:	08 95       	ret

00002494 <__vector_17>:
// "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. It is executed at the rate set with
// config_step_timer. It pops blocks from the block_buffer and executes them by pulsing the stepper pins appropriately. 
// It is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port after each pulse. 
// The bresenham line tracer algorithm controls all three stepper outputs simultaneously with these two interrupts.
ISR(TIMER1_COMPA_vect)
{ 
    2494:	1f 92       	push	r1
    2496:	0f 92       	push	r0
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	0f 92       	push	r0
    249c:	11 24       	eor	r1, r1
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	2f 93       	push	r18
    24a8:	3f 93       	push	r19
    24aa:	4f 93       	push	r20
    24ac:	5f 93       	push	r21
    24ae:	6f 93       	push	r22
    24b0:	7f 93       	push	r23
    24b2:	8f 93       	push	r24
    24b4:	9f 93       	push	r25
    24b6:	af 93       	push	r26
    24b8:	bf 93       	push	r27
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
  	//debug.
//  	printPgmString(PSTR("\r\nPopped TIMER1_COMPA!"));
//  	delay_ms(500);
	//end debug.       

  if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
    24c2:	80 91 c4 01 	lds	r24, 0x01C4
    24c6:	88 23       	and	r24, r24
    24c8:	09 f0       	breq	.+2      	; 0x24cc <__vector_17+0x38>
    24ca:	91 c2       	rjmp	.+1314   	; 0x29ee <__vector_17+0x55a>
  
  // Set the direction pins a couple of nanoseconds before we step the steppers
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    24cc:	95 b1       	in	r25, 0x05	; 5
    24ce:	20 91 c2 01 	lds	r18, 0x01C2
    24d2:	82 2f       	mov	r24, r18
    24d4:	80 7a       	andi	r24, 0xA0	; 160
    24d6:	9f 75       	andi	r25, 0x5F	; 95
    24d8:	89 2b       	or	r24, r25
    24da:	85 b9       	out	0x05, r24	; 5
  // Then pulse the stepping pins
  #if STEP_PULSE_DELAY > 0
    step_bits = (STEPPING_PORT & ~STEP_MASK) | out_bits; // Store out_bits to prevent overwriting.
  #else  // Normal operation
    STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | out_bits;
    24dc:	85 b1       	in	r24, 0x05	; 5
    24de:	8f 7a       	andi	r24, 0xAF	; 175
    24e0:	82 2b       	or	r24, r18
    24e2:	85 b9       	out	0x05, r24	; 5
  // Enable step pulse reset timer so that The Stepper Port Reset Interrupt can reset the signal after
  // exactly settings.pulse_microseconds microseconds, independent of the main Timer1 prescaler.
//  TCNT2 = step_pulse_time; // Reload timer counter
//  TCCR2B = (1<<CS21); // Begin timer3. Full speed, 1/8 prescaler

  TCNT3 = step_pulse_time; // Reload timer counter
    24e4:	80 91 c3 01 	lds	r24, 0x01C3
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	90 93 95 00 	sts	0x0095, r25
    24ee:	80 93 94 00 	sts	0x0094, r24
  TCCR3B = (1<<CS31); // Begin timer3. Full speed, 1/8 prescaler
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	80 93 91 00 	sts	0x0091, r24

  busy = true;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	80 93 c4 01 	sts	0x01C4, r24
  // Re-enable interrupts to allow ISR_TIMER3_OVERFLOW to trigger on-time and allow serial communications
  // regardless of time in this handler. The following code prepares the stepper driver for the next
  // step interrupt compare and will always finish before returning to the main program.
  
  sei(); 
    24fe:	78 94       	sei
//  GlobalInterruptEnable();


  
  // If there is no current block, attempt to pop one from the buffer
  if (current_block == NULL) {
    2500:	80 91 9c 01 	lds	r24, 0x019C
    2504:	90 91 9d 01 	lds	r25, 0x019D
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	09 f0       	breq	.+2      	; 0x250e <__vector_17+0x7a>
    250c:	71 c0       	rjmp	.+226    	; 0x25f0 <__vector_17+0x15c>
    // Anything in the buffer? If so, initialize next motion.
    current_block = plan_get_current_block();
    250e:	0e 94 86 1c 	call	0x390c	; 0x390c <plan_get_current_block>
    2512:	ec 01       	movw	r28, r24
    2514:	90 93 9d 01 	sts	0x019D, r25
    2518:	80 93 9c 01 	sts	0x019C, r24
    if (current_block != NULL) {
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	09 f4       	brne	.+2      	; 0x2522 <__vector_17+0x8e>
    2520:	5f c0       	rjmp	.+190    	; 0x25e0 <__vector_17+0x14c>
      if (!sys.feed_hold) { 
    2522:	80 91 0b 06 	lds	r24, 0x060B
    2526:	88 23       	and	r24, r24
    2528:	c9 f4       	brne	.+50     	; 0x255c <__vector_17+0xc8>
        // During feed hold, do not update rate and trap counter. Keep decelerating.
        st.trapezoid_adjusted_rate = current_block->initial_rate;
    252a:	6b a1       	ldd	r22, Y+35	; 0x23
    252c:	7c a1       	ldd	r23, Y+36	; 0x24
    252e:	8d a1       	ldd	r24, Y+37	; 0x25
    2530:	9e a1       	ldd	r25, Y+38	; 0x26
    2532:	60 93 ba 01 	sts	0x01BA, r22
    2536:	70 93 bb 01 	sts	0x01BB, r23
    253a:	80 93 bc 01 	sts	0x01BC, r24
    253e:	90 93 bd 01 	sts	0x01BD, r25
        set_step_events_per_minute(st.trapezoid_adjusted_rate); // Initialize cycles_per_step_event
    2542:	33 df       	rcall	.-410    	; 0x23aa <set_step_events_per_minute>
        st.trapezoid_tick_cycle_counter = CYCLES_PER_ACCELERATION_TICK/2; // Start halfway for midpoint rule.
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	91 e7       	ldi	r25, 0x71	; 113
    2548:	a2 e0       	ldi	r26, 0x02	; 2
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	80 93 b6 01 	sts	0x01B6, r24
    2550:	90 93 b7 01 	sts	0x01B7, r25
    2554:	a0 93 b8 01 	sts	0x01B8, r26
    2558:	b0 93 b9 01 	sts	0x01B9, r27
      }
      st.min_safe_rate = current_block->rate_delta + (current_block->rate_delta >> 1); // 1.5 x rate_delta
    255c:	2b a5       	ldd	r18, Y+43	; 0x2b
    255e:	3c a5       	ldd	r19, Y+44	; 0x2c
    2560:	4d a5       	ldd	r20, Y+45	; 0x2d
    2562:	5e a5       	ldd	r21, Y+46	; 0x2e
    2564:	da 01       	movw	r26, r20
    2566:	c9 01       	movw	r24, r18
    2568:	b5 95       	asr	r27
    256a:	a7 95       	ror	r26
    256c:	97 95       	ror	r25
    256e:	87 95       	ror	r24
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	a4 1f       	adc	r26, r20
    2576:	b5 1f       	adc	r27, r21
    2578:	80 93 be 01 	sts	0x01BE, r24
    257c:	90 93 bf 01 	sts	0x01BF, r25
    2580:	a0 93 c0 01 	sts	0x01C0, r26
    2584:	b0 93 c1 01 	sts	0x01C1, r27
      st.counter_x = -(current_block->step_event_count >> 1);
    2588:	2d 85       	ldd	r18, Y+13	; 0x0d
    258a:	3e 85       	ldd	r19, Y+14	; 0x0e
    258c:	4f 85       	ldd	r20, Y+15	; 0x0f
    258e:	58 89       	ldd	r21, Y+16	; 0x10
    2590:	da 01       	movw	r26, r20
    2592:	c9 01       	movw	r24, r18
    2594:	b5 95       	asr	r27
    2596:	a7 95       	ror	r26
    2598:	97 95       	ror	r25
    259a:	87 95       	ror	r24
    259c:	b0 95       	com	r27
    259e:	a0 95       	com	r26
    25a0:	90 95       	com	r25
    25a2:	81 95       	neg	r24
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	af 4f       	sbci	r26, 0xFF	; 255
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	ee e9       	ldi	r30, 0x9E	; 158
    25ac:	f1 e0       	ldi	r31, 0x01	; 1
    25ae:	80 93 9e 01 	sts	0x019E, r24
    25b2:	90 93 9f 01 	sts	0x019F, r25
    25b6:	a0 93 a0 01 	sts	0x01A0, r26
    25ba:	b0 93 a1 01 	sts	0x01A1, r27
      st.counter_y = st.counter_x;
    25be:	84 83       	std	Z+4, r24	; 0x04
    25c0:	95 83       	std	Z+5, r25	; 0x05
    25c2:	a6 83       	std	Z+6, r26	; 0x06
    25c4:	b7 83       	std	Z+7, r27	; 0x07
      st.counter_z = st.counter_x;
    25c6:	80 87       	std	Z+8, r24	; 0x08
    25c8:	91 87       	std	Z+9, r25	; 0x09
    25ca:	a2 87       	std	Z+10, r26	; 0x0a
    25cc:	b3 87       	std	Z+11, r27	; 0x0b
      st.event_count = current_block->step_event_count;
    25ce:	24 87       	std	Z+12, r18	; 0x0c
    25d0:	35 87       	std	Z+13, r19	; 0x0d
    25d2:	46 87       	std	Z+14, r20	; 0x0e
    25d4:	57 87       	std	Z+15, r21	; 0x0f
      st.step_events_completed = 0;     
    25d6:	10 8a       	std	Z+16, r1	; 0x10
    25d8:	11 8a       	std	Z+17, r1	; 0x11
    25da:	12 8a       	std	Z+18, r1	; 0x12
    25dc:	13 8a       	std	Z+19, r1	; 0x13
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <__vector_17+0x15c>
    } else {
      st_go_idle();
    25e0:	49 df       	rcall	.-366    	; 0x2474 <st_go_idle>
      sys.cycle_start = false;
    25e2:	10 92 32 06 	sts	0x0632, r1
      bit_true(sys.execute,EXEC_CYCLE_STOP); // Flag main program for cycle end
    25e6:	80 91 33 06 	lds	r24, 0x0633
    25ea:	84 60       	ori	r24, 0x04	; 4
    25ec:	80 93 33 06 	sts	0x0633, r24
    }    
  } 

  if (current_block != NULL) {
    25f0:	c0 91 9c 01 	lds	r28, 0x019C
    25f4:	d0 91 9d 01 	lds	r29, 0x019D
    25f8:	20 97       	sbiw	r28, 0x00	; 0
    25fa:	09 f4       	brne	.+2      	; 0x25fe <__vector_17+0x16a>
    25fc:	ef c1       	rjmp	.+990    	; 0x29dc <__vector_17+0x548>
    // Execute step displacement profile by bresenham line algorithm
    out_bits = current_block->direction_bits;
    25fe:	68 81       	ld	r22, Y
    2600:	60 93 c2 01 	sts	0x01C2, r22
    st.counter_x += current_block->steps_x;
    2604:	80 91 9e 01 	lds	r24, 0x019E
    2608:	90 91 9f 01 	lds	r25, 0x019F
    260c:	a0 91 a0 01 	lds	r26, 0x01A0
    2610:	b0 91 a1 01 	lds	r27, 0x01A1
    2614:	29 81       	ldd	r18, Y+1	; 0x01
    2616:	3a 81       	ldd	r19, Y+2	; 0x02
    2618:	4b 81       	ldd	r20, Y+3	; 0x03
    261a:	5c 81       	ldd	r21, Y+4	; 0x04
    261c:	82 0f       	add	r24, r18
    261e:	93 1f       	adc	r25, r19
    2620:	a4 1f       	adc	r26, r20
    2622:	b5 1f       	adc	r27, r21
    2624:	80 93 9e 01 	sts	0x019E, r24
    2628:	90 93 9f 01 	sts	0x019F, r25
    262c:	a0 93 a0 01 	sts	0x01A0, r26
    2630:	b0 93 a1 01 	sts	0x01A1, r27
    if (st.counter_x > 0) {
    2634:	18 16       	cp	r1, r24
    2636:	19 06       	cpc	r1, r25
    2638:	1a 06       	cpc	r1, r26
    263a:	1b 06       	cpc	r1, r27
    263c:	84 f5       	brge	.+96     	; 0x269e <__vector_17+0x20a>
      out_bits |= (1<<X_STEP_BIT);
    263e:	60 64       	ori	r22, 0x40	; 64
    2640:	60 93 c2 01 	sts	0x01C2, r22
      st.counter_x -= st.event_count;
    2644:	20 91 aa 01 	lds	r18, 0x01AA
    2648:	30 91 ab 01 	lds	r19, 0x01AB
    264c:	40 91 ac 01 	lds	r20, 0x01AC
    2650:	50 91 ad 01 	lds	r21, 0x01AD
    2654:	82 1b       	sub	r24, r18
    2656:	93 0b       	sbc	r25, r19
    2658:	a4 0b       	sbc	r26, r20
    265a:	b5 0b       	sbc	r27, r21
    265c:	80 93 9e 01 	sts	0x019E, r24
    2660:	90 93 9f 01 	sts	0x019F, r25
    2664:	a0 93 a0 01 	sts	0x01A0, r26
    2668:	b0 93 a1 01 	sts	0x01A1, r27
    266c:	80 91 0d 06 	lds	r24, 0x060D
    2670:	90 91 0e 06 	lds	r25, 0x060E
    2674:	a0 91 0f 06 	lds	r26, 0x060F
    2678:	b0 91 10 06 	lds	r27, 0x0610
      if (out_bits & (1<<X_DIRECTION_BIT)) { sys.position[X_AXIS]--; }
    267c:	67 ff       	sbrs	r22, 7
    267e:	04 c0       	rjmp	.+8      	; 0x2688 <__vector_17+0x1f4>
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	a1 09       	sbc	r26, r1
    2684:	b1 09       	sbc	r27, r1
    2686:	03 c0       	rjmp	.+6      	; 0x268e <__vector_17+0x1fa>
      else { sys.position[X_AXIS]++; }
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	a1 1d       	adc	r26, r1
    268c:	b1 1d       	adc	r27, r1
    268e:	80 93 0d 06 	sts	0x060D, r24
    2692:	90 93 0e 06 	sts	0x060E, r25
    2696:	a0 93 0f 06 	sts	0x060F, r26
    269a:	b0 93 10 06 	sts	0x0610, r27
    }
    st.counter_y += current_block->steps_y;
    269e:	80 91 a2 01 	lds	r24, 0x01A2
    26a2:	90 91 a3 01 	lds	r25, 0x01A3
    26a6:	a0 91 a4 01 	lds	r26, 0x01A4
    26aa:	b0 91 a5 01 	lds	r27, 0x01A5
    26ae:	2d 81       	ldd	r18, Y+5	; 0x05
    26b0:	3e 81       	ldd	r19, Y+6	; 0x06
    26b2:	4f 81       	ldd	r20, Y+7	; 0x07
    26b4:	58 85       	ldd	r21, Y+8	; 0x08
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	a4 1f       	adc	r26, r20
    26bc:	b5 1f       	adc	r27, r21
    26be:	80 93 a2 01 	sts	0x01A2, r24
    26c2:	90 93 a3 01 	sts	0x01A3, r25
    26c6:	a0 93 a4 01 	sts	0x01A4, r26
    26ca:	b0 93 a5 01 	sts	0x01A5, r27
    if (st.counter_y > 0) {
    26ce:	18 16       	cp	r1, r24
    26d0:	19 06       	cpc	r1, r25
    26d2:	1a 06       	cpc	r1, r26
    26d4:	1b 06       	cpc	r1, r27
    26d6:	94 f5       	brge	.+100    	; 0x273c <__vector_17+0x2a8>
      out_bits |= (1<<Y_STEP_BIT);
    26d8:	60 91 c2 01 	lds	r22, 0x01C2
    26dc:	60 61       	ori	r22, 0x10	; 16
    26de:	60 93 c2 01 	sts	0x01C2, r22
      st.counter_y -= st.event_count;
    26e2:	20 91 aa 01 	lds	r18, 0x01AA
    26e6:	30 91 ab 01 	lds	r19, 0x01AB
    26ea:	40 91 ac 01 	lds	r20, 0x01AC
    26ee:	50 91 ad 01 	lds	r21, 0x01AD
    26f2:	82 1b       	sub	r24, r18
    26f4:	93 0b       	sbc	r25, r19
    26f6:	a4 0b       	sbc	r26, r20
    26f8:	b5 0b       	sbc	r27, r21
    26fa:	80 93 a2 01 	sts	0x01A2, r24
    26fe:	90 93 a3 01 	sts	0x01A3, r25
    2702:	a0 93 a4 01 	sts	0x01A4, r26
    2706:	b0 93 a5 01 	sts	0x01A5, r27
    270a:	80 91 11 06 	lds	r24, 0x0611
    270e:	90 91 12 06 	lds	r25, 0x0612
    2712:	a0 91 13 06 	lds	r26, 0x0613
    2716:	b0 91 14 06 	lds	r27, 0x0614
      if (out_bits & (1<<Y_DIRECTION_BIT)) { sys.position[Y_AXIS]--; }
    271a:	65 ff       	sbrs	r22, 5
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <__vector_17+0x292>
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	a1 09       	sbc	r26, r1
    2722:	b1 09       	sbc	r27, r1
    2724:	03 c0       	rjmp	.+6      	; 0x272c <__vector_17+0x298>
      else { sys.position[Y_AXIS]++; }
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	a1 1d       	adc	r26, r1
    272a:	b1 1d       	adc	r27, r1
    272c:	80 93 11 06 	sts	0x0611, r24
    2730:	90 93 12 06 	sts	0x0612, r25
    2734:	a0 93 13 06 	sts	0x0613, r26
    2738:	b0 93 14 06 	sts	0x0614, r27
    }
    st.counter_z += current_block->steps_z;
    273c:	80 91 a6 01 	lds	r24, 0x01A6
    2740:	90 91 a7 01 	lds	r25, 0x01A7
    2744:	a0 91 a8 01 	lds	r26, 0x01A8
    2748:	b0 91 a9 01 	lds	r27, 0x01A9
    274c:	29 85       	ldd	r18, Y+9	; 0x09
    274e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2750:	4b 85       	ldd	r20, Y+11	; 0x0b
    2752:	5c 85       	ldd	r21, Y+12	; 0x0c
    2754:	82 0f       	add	r24, r18
    2756:	93 1f       	adc	r25, r19
    2758:	a4 1f       	adc	r26, r20
    275a:	b5 1f       	adc	r27, r21
    275c:	80 93 a6 01 	sts	0x01A6, r24
    2760:	90 93 a7 01 	sts	0x01A7, r25
    2764:	a0 93 a8 01 	sts	0x01A8, r26
    2768:	b0 93 a9 01 	sts	0x01A9, r27
    if (st.counter_z > 0) {
    276c:	18 16       	cp	r1, r24
    276e:	19 06       	cpc	r1, r25
    2770:	1a 06       	cpc	r1, r26
    2772:	1b 06       	cpc	r1, r27
    2774:	3c f5       	brge	.+78     	; 0x27c4 <__vector_17+0x330>
      out_bits |= (1<<Z_STEP_BIT);
      st.counter_z -= st.event_count;
    2776:	20 91 aa 01 	lds	r18, 0x01AA
    277a:	30 91 ab 01 	lds	r19, 0x01AB
    277e:	40 91 ac 01 	lds	r20, 0x01AC
    2782:	50 91 ad 01 	lds	r21, 0x01AD
    2786:	82 1b       	sub	r24, r18
    2788:	93 0b       	sbc	r25, r19
    278a:	a4 0b       	sbc	r26, r20
    278c:	b5 0b       	sbc	r27, r21
    278e:	80 93 a6 01 	sts	0x01A6, r24
    2792:	90 93 a7 01 	sts	0x01A7, r25
    2796:	a0 93 a8 01 	sts	0x01A8, r26
    279a:	b0 93 a9 01 	sts	0x01A9, r27
      if (out_bits & (1<<Z_DIRECTION_BIT)) { sys.position[Z_AXIS]--; }
      else { sys.position[Z_AXIS]++; }
    279e:	80 91 15 06 	lds	r24, 0x0615
    27a2:	90 91 16 06 	lds	r25, 0x0616
    27a6:	a0 91 17 06 	lds	r26, 0x0617
    27aa:	b0 91 18 06 	lds	r27, 0x0618
    27ae:	01 96       	adiw	r24, 0x01	; 1
    27b0:	a1 1d       	adc	r26, r1
    27b2:	b1 1d       	adc	r27, r1
    27b4:	80 93 15 06 	sts	0x0615, r24
    27b8:	90 93 16 06 	sts	0x0616, r25
    27bc:	a0 93 17 06 	sts	0x0617, r26
    27c0:	b0 93 18 06 	sts	0x0618, r27
    }
    
    st.step_events_completed++; // Iterate step events
    27c4:	80 91 ae 01 	lds	r24, 0x01AE
    27c8:	90 91 af 01 	lds	r25, 0x01AF
    27cc:	a0 91 b0 01 	lds	r26, 0x01B0
    27d0:	b0 91 b1 01 	lds	r27, 0x01B1
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	a1 1d       	adc	r26, r1
    27d8:	b1 1d       	adc	r27, r1
    27da:	80 93 ae 01 	sts	0x01AE, r24
    27de:	90 93 af 01 	sts	0x01AF, r25
    27e2:	a0 93 b0 01 	sts	0x01B0, r26
    27e6:	b0 93 b1 01 	sts	0x01B1, r27

    // While in block steps, check for de/ac-celeration events and execute them accordingly.
    if (st.step_events_completed < current_block->step_event_count) {
    27ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    27ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    27ee:	4f 85       	ldd	r20, Y+15	; 0x0f
    27f0:	58 89       	ldd	r21, Y+16	; 0x10
    27f2:	82 17       	cp	r24, r18
    27f4:	93 07       	cpc	r25, r19
    27f6:	a4 07       	cpc	r26, r20
    27f8:	b5 07       	cpc	r27, r21
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <__vector_17+0x36a>
    27fc:	ea c0       	rjmp	.+468    	; 0x29d2 <__vector_17+0x53e>
      if (sys.feed_hold) {
    27fe:	20 91 0b 06 	lds	r18, 0x060B
    2802:	22 23       	and	r18, r18
    2804:	39 f1       	breq	.+78     	; 0x2854 <__vector_17+0x3c0>
        // deceleration spans more than one block, the initial rate of the following blocks are not
        // updated and deceleration is continued according to their corresponding rate_delta.
        // NOTE: The trapezoid tick cycle counter is not updated intentionally. This ensures that 
        // the deceleration is smooth regardless of where the feed hold is initiated and if the
        // deceleration distance spans multiple blocks.
        if ( iterate_trapezoid_cycle_counter() ) {                    
    2806:	9d dd       	rcall	.-1222   	; 0x2342 <iterate_trapezoid_cycle_counter>
    2808:	88 23       	and	r24, r24
    280a:	09 f4       	brne	.+2      	; 0x280e <__vector_17+0x37a>
    280c:	e7 c0       	rjmp	.+462    	; 0x29dc <__vector_17+0x548>
          // If deceleration complete, set system flags and shutdown steppers.
          if (st.trapezoid_adjusted_rate <= current_block->rate_delta) {
    280e:	20 91 ba 01 	lds	r18, 0x01BA
    2812:	30 91 bb 01 	lds	r19, 0x01BB
    2816:	40 91 bc 01 	lds	r20, 0x01BC
    281a:	50 91 bd 01 	lds	r21, 0x01BD
    281e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2820:	9c a5       	ldd	r25, Y+44	; 0x2c
    2822:	ad a5       	ldd	r26, Y+45	; 0x2d
    2824:	be a5       	ldd	r27, Y+46	; 0x2e
    2826:	82 17       	cp	r24, r18
    2828:	93 07       	cpc	r25, r19
    282a:	a4 07       	cpc	r26, r20
    282c:	b5 07       	cpc	r27, r21
    282e:	48 f0       	brcs	.+18     	; 0x2842 <__vector_17+0x3ae>
            // Just go idle. Do not NULL current block. The bresenham algorithm variables must
            // remain intact to ensure the stepper path is exactly the same. Feed hold is still
            // active and is released after the buffer has been reinitialized.
            st_go_idle();
    2830:	21 de       	rcall	.-958    	; 0x2474 <st_go_idle>
            sys.cycle_start = false;
    2832:	10 92 32 06 	sts	0x0632, r1
            bit_true(sys.execute,EXEC_CYCLE_STOP); // Flag main program that feed hold is complete.
    2836:	80 91 33 06 	lds	r24, 0x0633
    283a:	84 60       	ori	r24, 0x04	; 4
    283c:	80 93 33 06 	sts	0x0633, r24
    2840:	cd c0       	rjmp	.+410    	; 0x29dc <__vector_17+0x548>
          } else {
            st.trapezoid_adjusted_rate -= current_block->rate_delta;
    2842:	79 01       	movw	r14, r18
    2844:	8a 01       	movw	r16, r20
    2846:	e8 1a       	sub	r14, r24
    2848:	f9 0a       	sbc	r15, r25
    284a:	0a 0b       	sbc	r16, r26
    284c:	1b 0b       	sbc	r17, r27
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	b6 c0       	rjmp	.+364    	; 0x29c0 <__vector_17+0x52c>
        // the target position and speed. 
        // NOTE: By increasing the ACCELERATION_TICKS_PER_SECOND in config.h, the resolution of the 
        // discrete velocity changes increase and accuracy can increase as well to a point. Numerical 
        // round-off errors can effect this, if set too high. This is important to note if a user has 
        // very high acceleration and/or feedrate requirements for their machine.
        if (st.step_events_completed < current_block->accelerate_until) {
    2854:	2f a5       	ldd	r18, Y+47	; 0x2f
    2856:	38 a9       	ldd	r19, Y+48	; 0x30
    2858:	49 a9       	ldd	r20, Y+49	; 0x31
    285a:	5a a9       	ldd	r21, Y+50	; 0x32
    285c:	82 17       	cp	r24, r18
    285e:	93 07       	cpc	r25, r19
    2860:	a4 07       	cpc	r26, r20
    2862:	b5 07       	cpc	r27, r21
    2864:	b8 f5       	brcc	.+110    	; 0x28d4 <__vector_17+0x440>
          // Iterate cycle counter and check if speeds need to be increased.
          if ( iterate_trapezoid_cycle_counter() ) {
    2866:	6d dd       	rcall	.-1318   	; 0x2342 <iterate_trapezoid_cycle_counter>
    2868:	88 23       	and	r24, r24
    286a:	09 f4       	brne	.+2      	; 0x286e <__vector_17+0x3da>
    286c:	b7 c0       	rjmp	.+366    	; 0x29dc <__vector_17+0x548>
            st.trapezoid_adjusted_rate += current_block->rate_delta;
    286e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2870:	9c a5       	ldd	r25, Y+44	; 0x2c
    2872:	ad a5       	ldd	r26, Y+45	; 0x2d
    2874:	be a5       	ldd	r27, Y+46	; 0x2e
    2876:	20 91 ba 01 	lds	r18, 0x01BA
    287a:	30 91 bb 01 	lds	r19, 0x01BB
    287e:	40 91 bc 01 	lds	r20, 0x01BC
    2882:	50 91 bd 01 	lds	r21, 0x01BD
    2886:	82 0f       	add	r24, r18
    2888:	93 1f       	adc	r25, r19
    288a:	a4 1f       	adc	r26, r20
    288c:	b5 1f       	adc	r27, r21
    288e:	80 93 ba 01 	sts	0x01BA, r24
    2892:	90 93 bb 01 	sts	0x01BB, r25
    2896:	a0 93 bc 01 	sts	0x01BC, r26
    289a:	b0 93 bd 01 	sts	0x01BD, r27
            if (st.trapezoid_adjusted_rate >= current_block->nominal_rate) {
    289e:	2f a9       	ldd	r18, Y+55	; 0x37
    28a0:	38 ad       	ldd	r19, Y+56	; 0x38
    28a2:	49 ad       	ldd	r20, Y+57	; 0x39
    28a4:	5a ad       	ldd	r21, Y+58	; 0x3a
    28a6:	82 17       	cp	r24, r18
    28a8:	93 07       	cpc	r25, r19
    28aa:	a4 07       	cpc	r26, r20
    28ac:	b5 07       	cpc	r27, r21
    28ae:	40 f0       	brcs	.+16     	; 0x28c0 <__vector_17+0x42c>
              // Reached nominal rate a little early. Cruise at nominal rate until decelerate_after.
              st.trapezoid_adjusted_rate = current_block->nominal_rate;
    28b0:	20 93 ba 01 	sts	0x01BA, r18
    28b4:	30 93 bb 01 	sts	0x01BB, r19
    28b8:	40 93 bc 01 	sts	0x01BC, r20
    28bc:	50 93 bd 01 	sts	0x01BD, r21
            }
            set_step_events_per_minute(st.trapezoid_adjusted_rate);
    28c0:	60 91 ba 01 	lds	r22, 0x01BA
    28c4:	70 91 bb 01 	lds	r23, 0x01BB
    28c8:	80 91 bc 01 	lds	r24, 0x01BC
    28cc:	90 91 bd 01 	lds	r25, 0x01BD
    28d0:	6c dd       	rcall	.-1320   	; 0x23aa <set_step_events_per_minute>
    28d2:	84 c0       	rjmp	.+264    	; 0x29dc <__vector_17+0x548>
          }
        } else if (st.step_events_completed >= current_block->decelerate_after) {
    28d4:	2b a9       	ldd	r18, Y+51	; 0x33
    28d6:	3c a9       	ldd	r19, Y+52	; 0x34
    28d8:	4d a9       	ldd	r20, Y+53	; 0x35
    28da:	5e a9       	ldd	r21, Y+54	; 0x36
    28dc:	82 17       	cp	r24, r18
    28de:	93 07       	cpc	r25, r19
    28e0:	a4 07       	cpc	r26, r20
    28e2:	b5 07       	cpc	r27, r21
    28e4:	08 f4       	brcc	.+2      	; 0x28e8 <__vector_17+0x454>
    28e6:	5b c0       	rjmp	.+182    	; 0x299e <__vector_17+0x50a>
          // Reset trapezoid tick cycle counter to make sure that the deceleration is performed the
          // same every time. Reset to CYCLES_PER_ACCELERATION_TICK/2 to follow the midpoint rule for
          // an accurate approximation of the deceleration curve.
          if (st.step_events_completed == current_block-> decelerate_after) {
    28e8:	82 17       	cp	r24, r18
    28ea:	93 07       	cpc	r25, r19
    28ec:	a4 07       	cpc	r26, r20
    28ee:	b5 07       	cpc	r27, r21
    28f0:	69 f4       	brne	.+26     	; 0x290c <__vector_17+0x478>
            st.trapezoid_tick_cycle_counter = CYCLES_PER_ACCELERATION_TICK/2;
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	91 e7       	ldi	r25, 0x71	; 113
    28f6:	a2 e0       	ldi	r26, 0x02	; 2
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	80 93 b6 01 	sts	0x01B6, r24
    28fe:	90 93 b7 01 	sts	0x01B7, r25
    2902:	a0 93 b8 01 	sts	0x01B8, r26
    2906:	b0 93 b9 01 	sts	0x01B9, r27
    290a:	68 c0       	rjmp	.+208    	; 0x29dc <__vector_17+0x548>
          } else {
            // Iterate cycle counter and check if speeds need to be reduced.
            if ( iterate_trapezoid_cycle_counter() ) {  
    290c:	1a dd       	rcall	.-1484   	; 0x2342 <iterate_trapezoid_cycle_counter>
    290e:	88 23       	and	r24, r24
    2910:	09 f4       	brne	.+2      	; 0x2914 <__vector_17+0x480>
    2912:	64 c0       	rjmp	.+200    	; 0x29dc <__vector_17+0x548>
              // CNC acceleration limits, because they will never be greater than rate_delta. This catches
              // small errors that might leave steps hanging after the last trapezoid tick or a very slow
              // step rate at the end of a full stop deceleration in certain situations. The half rate 
              // reductions should only be called once or twice per block and create a nice smooth 
              // end deceleration.
              if (st.trapezoid_adjusted_rate > st.min_safe_rate) {
    2914:	80 91 ba 01 	lds	r24, 0x01BA
    2918:	90 91 bb 01 	lds	r25, 0x01BB
    291c:	a0 91 bc 01 	lds	r26, 0x01BC
    2920:	b0 91 bd 01 	lds	r27, 0x01BD
    2924:	20 91 be 01 	lds	r18, 0x01BE
    2928:	30 91 bf 01 	lds	r19, 0x01BF
    292c:	40 91 c0 01 	lds	r20, 0x01C0
    2930:	50 91 c1 01 	lds	r21, 0x01C1
    2934:	28 17       	cp	r18, r24
    2936:	39 07       	cpc	r19, r25
    2938:	4a 07       	cpc	r20, r26
    293a:	5b 07       	cpc	r21, r27
    293c:	48 f4       	brcc	.+18     	; 0x2950 <__vector_17+0x4bc>
                st.trapezoid_adjusted_rate -= current_block->rate_delta;
    293e:	2b a5       	ldd	r18, Y+43	; 0x2b
    2940:	3c a5       	ldd	r19, Y+44	; 0x2c
    2942:	4d a5       	ldd	r20, Y+45	; 0x2d
    2944:	5e a5       	ldd	r21, Y+46	; 0x2e
    2946:	82 1b       	sub	r24, r18
    2948:	93 0b       	sbc	r25, r19
    294a:	a4 0b       	sbc	r26, r20
    294c:	b5 0b       	sbc	r27, r21
    294e:	04 c0       	rjmp	.+8      	; 0x2958 <__vector_17+0x4c4>
              } else {
                st.trapezoid_adjusted_rate >>= 1; // Bit shift divide by 2
    2950:	b6 95       	lsr	r27
    2952:	a7 95       	ror	r26
    2954:	97 95       	ror	r25
    2956:	87 95       	ror	r24
    2958:	80 93 ba 01 	sts	0x01BA, r24
    295c:	90 93 bb 01 	sts	0x01BB, r25
    2960:	a0 93 bc 01 	sts	0x01BC, r26
    2964:	b0 93 bd 01 	sts	0x01BD, r27
              }
              if (st.trapezoid_adjusted_rate < current_block->final_rate) {
    2968:	8f a1       	ldd	r24, Y+39	; 0x27
    296a:	98 a5       	ldd	r25, Y+40	; 0x28
    296c:	a9 a5       	ldd	r26, Y+41	; 0x29
    296e:	ba a5       	ldd	r27, Y+42	; 0x2a
    2970:	20 91 ba 01 	lds	r18, 0x01BA
    2974:	30 91 bb 01 	lds	r19, 0x01BB
    2978:	40 91 bc 01 	lds	r20, 0x01BC
    297c:	50 91 bd 01 	lds	r21, 0x01BD
    2980:	28 17       	cp	r18, r24
    2982:	39 07       	cpc	r19, r25
    2984:	4a 07       	cpc	r20, r26
    2986:	5b 07       	cpc	r21, r27
    2988:	08 f0       	brcs	.+2      	; 0x298c <__vector_17+0x4f8>
    298a:	9a cf       	rjmp	.-204    	; 0x28c0 <__vector_17+0x42c>
                // Reached final rate a little early. Cruise to end of block at final rate.
                st.trapezoid_adjusted_rate = current_block->final_rate;
    298c:	80 93 ba 01 	sts	0x01BA, r24
    2990:	90 93 bb 01 	sts	0x01BB, r25
    2994:	a0 93 bc 01 	sts	0x01BC, r26
    2998:	b0 93 bd 01 	sts	0x01BD, r27
    299c:	91 cf       	rjmp	.-222    	; 0x28c0 <__vector_17+0x42c>
              set_step_events_per_minute(st.trapezoid_adjusted_rate);
            }
          }
        } else {
          // No accelerations. Make sure we cruise exactly at the nominal rate.
          if (st.trapezoid_adjusted_rate != current_block->nominal_rate) {
    299e:	6f a9       	ldd	r22, Y+55	; 0x37
    29a0:	78 ad       	ldd	r23, Y+56	; 0x38
    29a2:	89 ad       	ldd	r24, Y+57	; 0x39
    29a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    29a6:	20 91 ba 01 	lds	r18, 0x01BA
    29aa:	30 91 bb 01 	lds	r19, 0x01BB
    29ae:	40 91 bc 01 	lds	r20, 0x01BC
    29b2:	50 91 bd 01 	lds	r21, 0x01BD
    29b6:	26 17       	cp	r18, r22
    29b8:	37 07       	cpc	r19, r23
    29ba:	48 07       	cpc	r20, r24
    29bc:	59 07       	cpc	r21, r25
    29be:	71 f0       	breq	.+28     	; 0x29dc <__vector_17+0x548>
            st.trapezoid_adjusted_rate = current_block->nominal_rate;
    29c0:	60 93 ba 01 	sts	0x01BA, r22
    29c4:	70 93 bb 01 	sts	0x01BB, r23
    29c8:	80 93 bc 01 	sts	0x01BC, r24
    29cc:	90 93 bd 01 	sts	0x01BD, r25
    29d0:	7f cf       	rjmp	.-258    	; 0x28d0 <__vector_17+0x43c>
          }
        }
      }            
    } else {   
      // If current block is finished, reset pointer 
      current_block = NULL;
    29d2:	10 92 9d 01 	sts	0x019D, r1
    29d6:	10 92 9c 01 	sts	0x019C, r1
      plan_discard_current_block();
    29da:	8c d7       	rcall	.+3864   	; 0x38f4 <plan_discard_current_block>
    }
  }
  out_bits ^= settings.invert_mask;  // Apply stepper invert mask    
    29dc:	80 91 c2 01 	lds	r24, 0x01C2
    29e0:	90 91 4a 06 	lds	r25, 0x064A
    29e4:	89 27       	eor	r24, r25
    29e6:	80 93 c2 01 	sts	0x01C2, r24
  busy = false;
    29ea:	10 92 c4 01 	sts	0x01C4, r1
}
    29ee:	ff 91       	pop	r31
    29f0:	ef 91       	pop	r30
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	bf 91       	pop	r27
    29f8:	af 91       	pop	r26
    29fa:	9f 91       	pop	r25
    29fc:	8f 91       	pop	r24
    29fe:	7f 91       	pop	r23
    2a00:	6f 91       	pop	r22
    2a02:	5f 91       	pop	r21
    2a04:	4f 91       	pop	r20
    2a06:	3f 91       	pop	r19
    2a08:	2f 91       	pop	r18
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <__vector_35>:
// This interrupt is set up by ISR_TIMER1_COMPAREA when it sets the motor port bits. It resets
// the motor port after a short period (settings.pulse_microseconds) completing one step cycle.
// TODO: It is possible for the serial interrupts to delay this interrupt by a few microseconds, if
// they execute right before this interrupt. Not a big deal, but could use some TLC at some point.
ISR(TIMER3_OVF_vect)
{
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	8f 93       	push	r24
    2a28:	9f 93       	push	r25
  // Reset stepping pins (leave the direction pins)
  STEPPING_PORT = (STEPPING_PORT & ~STEP_MASK) | (settings.invert_mask & STEP_MASK); 
    2a2a:	95 b1       	in	r25, 0x05	; 5
    2a2c:	80 91 4a 06 	lds	r24, 0x064A
    2a30:	80 75       	andi	r24, 0x50	; 80
    2a32:	9f 7a       	andi	r25, 0xAF	; 175
    2a34:	89 2b       	or	r24, r25
    2a36:	85 b9       	out	0x05, r24	; 5
  TCCR3B = 0; // Disable Timer3 to prevent re-entering this interrupt when it's not needed. 
    2a38:	10 92 91 00 	sts	0x0091, r1
}
    2a3c:	9f 91       	pop	r25
    2a3e:	8f 91       	pop	r24
    2a40:	0f 90       	pop	r0
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	0f 90       	pop	r0
    2a46:	1f 90       	pop	r1
    2a48:	18 95       	reti

00002a4a <st_reset>:
#endif

// Reset and clear stepper subsystem variables
void st_reset()
{
  memset(&st, 0, sizeof(st));
    2a4a:	84 e2       	ldi	r24, 0x24	; 36
    2a4c:	ee e9       	ldi	r30, 0x9E	; 158
    2a4e:	f1 e0       	ldi	r31, 0x01	; 1
    2a50:	df 01       	movw	r26, r30
    2a52:	1d 92       	st	X+, r1
    2a54:	8a 95       	dec	r24
    2a56:	e9 f7       	brne	.-6      	; 0x2a52 <st_reset+0x8>
  set_step_events_per_minute(MINIMUM_STEPS_PER_MINUTE);
    2a58:	60 e2       	ldi	r22, 0x20	; 32
    2a5a:	73 e0       	ldi	r23, 0x03	; 3
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a4 dc       	rcall	.-1720   	; 0x23aa <set_step_events_per_minute>
  current_block = NULL;
    2a62:	10 92 9d 01 	sts	0x019D, r1
    2a66:	10 92 9c 01 	sts	0x019C, r1
  busy = false;
    2a6a:	10 92 c4 01 	sts	0x01C4, r1
}
    2a6e:	08 95       	ret

00002a70 <st_init>:

// Initialize and start the stepper motor subsystem
void st_init()
{
  // Configure directions of interface pins
  STEPPING_DDR |= STEPPING_MASK;
    2a70:	84 b1       	in	r24, 0x04	; 4
    2a72:	80 6f       	ori	r24, 0xF0	; 240
    2a74:	84 b9       	out	0x04, r24	; 4
  STEPPING_PORT = (STEPPING_PORT & ~STEPPING_MASK) | settings.invert_mask;
    2a76:	85 b1       	in	r24, 0x05	; 5
    2a78:	8f 70       	andi	r24, 0x0F	; 15
    2a7a:	90 91 4a 06 	lds	r25, 0x064A
    2a7e:	89 2b       	or	r24, r25
    2a80:	85 b9       	out	0x05, r24	; 5
  STEPPERS_DISABLE_DDR |= 1<<STEPPERS_DISABLE_BIT;
    2a82:	50 9a       	sbi	0x0a, 0	; 10

  // waveform generation = 0100 = CTC
  TCCR1B &= ~(1<<WGM13);
    2a84:	e1 e8       	ldi	r30, 0x81	; 129
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	8f 7e       	andi	r24, 0xEF	; 239
    2a8c:	80 83       	st	Z, r24
  TCCR1B |=  (1<<WGM12);
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 60       	ori	r24, 0x08	; 8
    2a92:	80 83       	st	Z, r24
  TCCR1A &= ~(1<<WGM11); 
    2a94:	e0 e8       	ldi	r30, 0x80	; 128
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8d 7f       	andi	r24, 0xFD	; 253
    2a9c:	80 83       	st	Z, r24
  TCCR1A &= ~(1<<WGM10);
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8e 7f       	andi	r24, 0xFE	; 254
    2aa2:	80 83       	st	Z, r24

  // output mode = 00 (disconnected)
  TCCR1A &= ~(3<<COM1A0); 
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 73       	andi	r24, 0x3F	; 63
    2aa8:	80 83       	st	Z, r24
  TCCR1A &= ~(3<<COM1B0); 
    2aaa:	80 81       	ld	r24, Z
    2aac:	8f 7c       	andi	r24, 0xCF	; 207
    2aae:	80 83       	st	Z, r24
	
  // Configure Timer 3
  TCCR3A = 0; // Normal operation
    2ab0:	10 92 90 00 	sts	0x0090, r1
  TCCR3B = 0; // Disable timer until needed.
    2ab4:	10 92 91 00 	sts	0x0091, r1
  TIMSK3 |= (1<<TOIE3);      
    2ab8:	e1 e7       	ldi	r30, 0x71	; 113
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	81 60       	ori	r24, 0x01	; 1
    2ac0:	80 83       	st	Z, r24
    TIMSK3 |= (1<<OCIE3A); // Enable Timer3 Compare Match A interrupt
  #endif
  
  // Start in the idle state
  st_go_idle();
}
    2ac2:	d8 cc       	rjmp	.-1616   	; 0x2474 <st_go_idle>

00002ac4 <st_cycle_start>:

// Planner external interface to start stepper interrupt and execute the blocks in queue. Called
// by the main program functions: planner auto-start and run-time command execution.
void st_cycle_start() 
{
  if (!sys.cycle_start) {
    2ac4:	80 91 32 06 	lds	r24, 0x0632
    2ac8:	88 23       	and	r24, r24
    2aca:	c1 f4       	brne	.+48     	; 0x2afc <st_cycle_start+0x38>
    if (!sys.feed_hold) {
    2acc:	80 91 0b 06 	lds	r24, 0x060B
    2ad0:	88 23       	and	r24, r24
    2ad2:	a1 f4       	brne	.+40     	; 0x2afc <st_cycle_start+0x38>
      sys.cycle_start = true;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 32 06 	sts	0x0632, r24

// Stepper state initialization
static void st_wake_up() 
{
  // Initialize stepper output bits
  out_bits = (0) ^ (settings.invert_mask); 
    2ada:	80 91 4a 06 	lds	r24, 0x064A
    2ade:	80 93 c2 01 	sts	0x01C2, r24
    step_pulse_time = -(((settings.pulse_microseconds+STEP_PULSE_DELAY-2)*TICKS_PER_MICROSECOND) >> 3);
    // Set delay between direction pin write and step command.
    OCR2A = -(((settings.pulse_microseconds)*TICKS_PER_MICROSECOND) >> 3);
  #else // Normal operation
    // Set step pulse time. Ad hoc computation from oscilloscope. Uses two's complement.
    step_pulse_time = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND) >> 3);
    2ae2:	80 91 41 06 	lds	r24, 0x0641
    2ae6:	88 0f       	add	r24, r24
    2ae8:	84 50       	subi	r24, 0x04	; 4
    2aea:	81 95       	neg	r24
    2aec:	80 93 c3 01 	sts	0x01C3, r24
  #endif
  // Enable steppers by resetting the stepper disable port
  STEPPERS_DISABLE_PORT &= ~(1<<STEPPERS_DISABLE_BIT);
    2af0:	58 98       	cbi	0x0b, 0	; 11
  // Enable stepper driver interrupt
  TIMSK1 |= (1<<OCIE1A);
    2af2:	80 91 6f 00 	lds	r24, 0x006F
    2af6:	82 60       	ori	r24, 0x02	; 2
    2af8:	80 93 6f 00 	sts	0x006F, r24
    2afc:	08 95       	ret

00002afe <st_feed_hold>:
}

// Execute a feed hold with deceleration, only during cycle. Called by main program.
void st_feed_hold() 
{
  if (!sys.feed_hold) {
    2afe:	80 91 0b 06 	lds	r24, 0x060B
    2b02:	88 23       	and	r24, r24
    2b04:	49 f4       	brne	.+18     	; 0x2b18 <st_feed_hold+0x1a>
    if (sys.cycle_start) {
    2b06:	80 91 32 06 	lds	r24, 0x0632
    2b0a:	88 23       	and	r24, r24
    2b0c:	29 f0       	breq	.+10     	; 0x2b18 <st_feed_hold+0x1a>
      sys.auto_start = false; // Disable planner auto start upon feed hold.
    2b0e:	10 92 0c 06 	sts	0x060C, r1
      sys.feed_hold = true;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	80 93 0b 06 	sts	0x060B, r24
    2b18:	08 95       	ret

00002b1a <st_cycle_reinitialize>:
// NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
// cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
// Only the planner de/ac-celerations profiles and stepper rates have been updated.
void st_cycle_reinitialize()
{
  if (current_block != NULL) {
    2b1a:	e0 91 9c 01 	lds	r30, 0x019C
    2b1e:	f0 91 9d 01 	lds	r31, 0x019D
    2b22:	30 97       	sbiw	r30, 0x00	; 0
    2b24:	91 f1       	breq	.+100    	; 0x2b8a <st_cycle_reinitialize+0x70>
    // Replan buffer from the feed hold stop location.
    plan_cycle_reinitialize(current_block->step_event_count - st.step_events_completed);
    2b26:	65 85       	ldd	r22, Z+13	; 0x0d
    2b28:	76 85       	ldd	r23, Z+14	; 0x0e
    2b2a:	87 85       	ldd	r24, Z+15	; 0x0f
    2b2c:	90 89       	ldd	r25, Z+16	; 0x10
    2b2e:	20 91 ae 01 	lds	r18, 0x01AE
    2b32:	30 91 af 01 	lds	r19, 0x01AF
    2b36:	40 91 b0 01 	lds	r20, 0x01B0
    2b3a:	50 91 b1 01 	lds	r21, 0x01B1
    2b3e:	62 1b       	sub	r22, r18
    2b40:	73 0b       	sbc	r23, r19
    2b42:	84 0b       	sbc	r24, r20
    2b44:	95 0b       	sbc	r25, r21
    2b46:	0e 94 3f 21 	call	0x427e	; 0x427e <plan_cycle_reinitialize>
    // Update initial rate and timers after feed hold.
    st.trapezoid_adjusted_rate = 0; // Resumes from rest
    2b4a:	10 92 ba 01 	sts	0x01BA, r1
    2b4e:	10 92 bb 01 	sts	0x01BB, r1
    2b52:	10 92 bc 01 	sts	0x01BC, r1
    2b56:	10 92 bd 01 	sts	0x01BD, r1
    set_step_events_per_minute(st.trapezoid_adjusted_rate);
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	cb 01       	movw	r24, r22
    2b60:	24 dc       	rcall	.-1976   	; 0x23aa <set_step_events_per_minute>
    st.trapezoid_tick_cycle_counter = CYCLES_PER_ACCELERATION_TICK/2; // Start halfway for midpoint rule.
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	91 e7       	ldi	r25, 0x71	; 113
    2b66:	a2 e0       	ldi	r26, 0x02	; 2
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	80 93 b6 01 	sts	0x01B6, r24
    2b6e:	90 93 b7 01 	sts	0x01B7, r25
    2b72:	a0 93 b8 01 	sts	0x01B8, r26
    2b76:	b0 93 b9 01 	sts	0x01B9, r27
    st.step_events_completed = 0;
    2b7a:	10 92 ae 01 	sts	0x01AE, r1
    2b7e:	10 92 af 01 	sts	0x01AF, r1
    2b82:	10 92 b0 01 	sts	0x01B0, r1
    2b86:	10 92 b1 01 	sts	0x01B1, r1
  }
  sys.feed_hold = false; // Release feed hold. Cycle is ready to re-start.
    2b8a:	10 92 0b 06 	sts	0x060B, r1
}
    2b8e:	08 95       	ret

00002b90 <eeprom_get_char>:
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
    2b90:	f9 99       	sbic	0x1f, 1	; 31
    2b92:	fe cf       	rjmp	.-4      	; 0x2b90 <eeprom_get_char>
	EEAR = addr; // Set EEPROM address register.
    2b94:	92 bd       	out	0x22, r25	; 34
    2b96:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	8f bb       	out	0x1f, r24	; 31
	return EEDR; // Return the byte read from EEPROM.
    2b9c:	80 b5       	in	r24, 0x20	; 32
}
    2b9e:	08 95       	ret

00002ba0 <eeprom_put_char>:
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
	char old_value; // Old EEPROM value.
	char diff_mask; // Difference mask, i.e. old value XOR new value.

	cli(); // Ensure atomic operation for the write operation.
    2ba0:	f8 94       	cli
	
	do {} while( EECR & (1<<EEPE) ); // Wait for completion of previous write.
    2ba2:	f9 99       	sbic	0x1f, 1	; 31
    2ba4:	fe cf       	rjmp	.-4      	; 0x2ba2 <eeprom_put_char+0x2>
	#ifndef EEPROM_IGNORE_SELFPROG
	do {} while( SPMCSR & (1<<SELFPRGEN) ); // Wait for completion of SPM.
	#endif
	
	EEAR = addr; // Set EEPROM address register.
    2ba6:	92 bd       	out	0x22, r25	; 34
    2ba8:	81 bd       	out	0x21, r24	; 33
	EECR = (1<<EERE); // Start EEPROM read operation.
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	8f bb       	out	0x1f, r24	; 31
	old_value = EEDR; // Get old EEPROM value.
    2bae:	80 b5       	in	r24, 0x20	; 32
	diff_mask = old_value ^ new_value; // Get bit differences.
    2bb0:	86 27       	eor	r24, r22
	
	// Check if any bits are changed to '1' in the new value.
	if( diff_mask & new_value ) {
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	96 23       	and	r25, r22
    2bb6:	39 f0       	breq	.+14     	; 0x2bc6 <eeprom_put_char+0x26>
		// Now we know that _some_ bits need to be erased to '1'.
		
		// Check if any bits in the new value are '0'.
		if( new_value != 0xff ) {
    2bb8:	6f 3f       	cpi	r22, 0xFF	; 255
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <eeprom_put_char+0x22>
			// Now we know that some bits need to be programmed to '0' also.
			
			EEDR = new_value; // Set EEPROM data register.
    2bbc:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	06 c0       	rjmp	.+12     	; 0x2bce <eeprom_put_char+0x2e>
			       (0<<EEPM1) | (0<<EEPM0); // ...and Erase+Write mode.
			EECR |= (1<<EEPE);  // Start Erase+Write operation.
		} else {
			// Now we know that all bits should be erased.

			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
    2bc2:	84 e1       	ldi	r24, 0x14	; 20
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <eeprom_put_char+0x2e>
		}
	} else {
		// Now we know that _no_ bits need to be erased to '1'.
		
		// Check if any bits are changed from '1' in the old value.
		if( diff_mask ) {
    2bc6:	88 23       	and	r24, r24
    2bc8:	21 f0       	breq	.+8      	; 0x2bd2 <eeprom_put_char+0x32>
			// Now we know that _some_ bits need to the programmed to '0'.
			
			EEDR = new_value;   // Set EEPROM data register.
    2bca:	60 bd       	out	0x20, r22	; 32
			EECR = (1<<EEMPE) | // Set Master Write Enable bit...
    2bcc:	84 e2       	ldi	r24, 0x24	; 36
    2bce:	8f bb       	out	0x1f, r24	; 31
			       (1<<EEPM1);  // ...and Write-only mode.
			EECR |= (1<<EEPE);  // Start Write-only operation.
    2bd0:	f9 9a       	sbi	0x1f, 1	; 31
		}
	}
	
	sei(); // Restore interrupt flag state.
    2bd2:	78 94       	sei
}
    2bd4:	08 95       	ret

00002bd6 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    2bd6:	8f 92       	push	r8
    2bd8:	9f 92       	push	r9
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	0f 92       	push	r0
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	5c 01       	movw	r10, r24
    2bf6:	6b 01       	movw	r12, r22
    2bf8:	7a 01       	movw	r14, r20
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    2bfa:	4a 01       	movw	r8, r20

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
  for(; size > 0; size--) { 
    2bfe:	1a c0       	rjmp	.+52     	; 0x2c34 <memcpy_to_eeprom_with_checksum+0x5e>
    checksum = (checksum << 1) || (checksum >> 7);
    2c00:	22 23       	and	r18, r18
    2c02:	41 f4       	brne	.+16     	; 0x2c14 <memcpy_to_eeprom_with_checksum+0x3e>
    2c04:	33 27       	eor	r19, r19
    2c06:	27 fd       	sbrc	r18, 7
    2c08:	30 95       	com	r19
    2c0a:	22 27       	eor	r18, r18
    2c0c:	33 0f       	add	r19, r19
    2c0e:	22 1f       	adc	r18, r18
    2c10:	33 27       	eor	r19, r19
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <memcpy_to_eeprom_with_checksum+0x42>
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    checksum += *source;
    2c18:	f6 01       	movw	r30, r12
    2c1a:	61 91       	ld	r22, Z+
    2c1c:	6f 01       	movw	r12, r30
    2c1e:	26 0f       	add	r18, r22
    eeprom_put_char(destination++, *(source++)); 
    2c20:	8c 01       	movw	r16, r24
    2c22:	0f 5f       	subi	r16, 0xFF	; 255
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	29 83       	std	Y+1, r18	; 0x01
    2c28:	bb df       	rcall	.-138    	; 0x2ba0 <eeprom_put_char>
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    2c2a:	08 94       	sec
    2c2c:	81 08       	sbc	r8, r1
    2c2e:	91 08       	sbc	r9, r1
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
    2c30:	c8 01       	movw	r24, r16
    2c32:	29 81       	ldd	r18, Y+1	; 0x01
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    2c34:	81 14       	cp	r8, r1
    2c36:	91 04       	cpc	r9, r1
    2c38:	19 f7       	brne	.-58     	; 0x2c00 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    2c3a:	c7 01       	movw	r24, r14
    2c3c:	8a 0d       	add	r24, r10
    2c3e:	9b 1d       	adc	r25, r11
    2c40:	62 2f       	mov	r22, r18
    2c42:	ae df       	rcall	.-164    	; 0x2ba0 <eeprom_put_char>
}
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	df 90       	pop	r13
    2c54:	cf 90       	pop	r12
    2c56:	bf 90       	pop	r11
    2c58:	af 90       	pop	r10
    2c5a:	9f 90       	pop	r9
    2c5c:	8f 90       	pop	r8
    2c5e:	08 95       	ret

00002c60 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    2c60:	9f 92       	push	r9
    2c62:	af 92       	push	r10
    2c64:	bf 92       	push	r11
    2c66:	cf 92       	push	r12
    2c68:	df 92       	push	r13
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	6c 01       	movw	r12, r24
    2c78:	eb 01       	movw	r28, r22
    2c7a:	7a 01       	movw	r14, r20
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    2c7c:	8a 01       	movw	r16, r20
    2c7e:	cb 01       	movw	r24, r22
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
    2c80:	99 24       	eor	r9, r9
  for(; size > 0; size--) { 
    2c82:	1a c0       	rjmp	.+52     	; 0x2cb8 <memcpy_from_eeprom_with_checksum+0x58>
    data = eeprom_get_char(source++);
    2c84:	5c 01       	movw	r10, r24
    2c86:	08 94       	sec
    2c88:	a1 1c       	adc	r10, r1
    2c8a:	b1 1c       	adc	r11, r1
    2c8c:	81 df       	rcall	.-254    	; 0x2b90 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    2c8e:	99 20       	and	r9, r9
    2c90:	49 f4       	brne	.+18     	; 0x2ca4 <memcpy_from_eeprom_with_checksum+0x44>
    2c92:	29 2d       	mov	r18, r9
    2c94:	33 27       	eor	r19, r19
    2c96:	27 fd       	sbrc	r18, 7
    2c98:	30 95       	com	r19
    2c9a:	22 27       	eor	r18, r18
    2c9c:	33 0f       	add	r19, r19
    2c9e:	22 1f       	adc	r18, r18
    2ca0:	33 27       	eor	r19, r19
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <memcpy_from_eeprom_with_checksum+0x48>
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    checksum += data;    
    2ca8:	98 2e       	mov	r9, r24
    2caa:	92 0e       	add	r9, r18
    *(destination++) = data; 
    2cac:	f6 01       	movw	r30, r12
    2cae:	81 93       	st	Z+, r24
    2cb0:	6f 01       	movw	r12, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    2cb2:	01 50       	subi	r16, 0x01	; 1
    2cb4:	10 40       	sbci	r17, 0x00	; 0
    data = eeprom_get_char(source++);
    2cb6:	c5 01       	movw	r24, r10
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    2cb8:	01 15       	cp	r16, r1
    2cba:	11 05       	cpc	r17, r1
    2cbc:	19 f7       	brne	.-58     	; 0x2c84 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    2cbe:	c7 01       	movw	r24, r14
    2cc0:	8c 0f       	add	r24, r28
    2cc2:	9d 1f       	adc	r25, r29
    2cc4:	65 df       	rcall	.-310    	; 0x2b90 <eeprom_get_char>
    2cc6:	21 e0       	ldi	r18, 0x01	; 1
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	98 16       	cp	r9, r24
    2ccc:	11 f0       	breq	.+4      	; 0x2cd2 <memcpy_from_eeprom_with_checksum+0x72>
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
}
    2cd2:	c9 01       	movw	r24, r18
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
    2ce4:	bf 90       	pop	r11
    2ce6:	af 90       	pop	r10
    2ce8:	9f 90       	pop	r9
    2cea:	08 95       	ret

00002cec <settings_reset>:
#define DEFAULT_JUNCTION_DEVIATION 0.05 // mm
#define DEFAULT_STEPPING_INVERT_MASK ((1<<X_STEP_BIT)|(1<<Y_STEP_BIT)|(1<<Z_STEP_BIT))
// #define DEFAULT_AUTO_START 1 // Boolean

void settings_reset() {
  settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
    2cec:	84 ef       	ldi	r24, 0xF4	; 244
    2cee:	99 ef       	ldi	r25, 0xF9	; 249
    2cf0:	ac e3       	ldi	r26, 0x3C	; 60
    2cf2:	b4 e4       	ldi	r27, 0x44	; 68
    2cf4:	80 93 34 06 	sts	0x0634, r24
    2cf8:	90 93 35 06 	sts	0x0635, r25
    2cfc:	a0 93 36 06 	sts	0x0636, r26
    2d00:	b0 93 37 06 	sts	0x0637, r27
  settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
    2d04:	80 93 38 06 	sts	0x0638, r24
    2d08:	90 93 39 06 	sts	0x0639, r25
    2d0c:	a0 93 3a 06 	sts	0x063A, r26
    2d10:	b0 93 3b 06 	sts	0x063B, r27
  settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
    2d14:	80 93 3c 06 	sts	0x063C, r24
    2d18:	90 93 3d 06 	sts	0x063D, r25
    2d1c:	a0 93 3e 06 	sts	0x063E, r26
    2d20:	b0 93 3f 06 	sts	0x063F, r27
  settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
    2d24:	8e e1       	ldi	r24, 0x1E	; 30
    2d26:	80 93 41 06 	sts	0x0641, r24
  settings.default_feed_rate = DEFAULT_FEEDRATE;
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	aa ef       	ldi	r26, 0xFA	; 250
    2d30:	b3 e4       	ldi	r27, 0x43	; 67
    2d32:	80 93 42 06 	sts	0x0642, r24
    2d36:	90 93 43 06 	sts	0x0643, r25
    2d3a:	a0 93 44 06 	sts	0x0644, r26
    2d3e:	b0 93 45 06 	sts	0x0645, r27
  settings.default_seek_rate = DEFAULT_RAPID_FEEDRATE;
    2d42:	80 93 46 06 	sts	0x0646, r24
    2d46:	90 93 47 06 	sts	0x0647, r25
    2d4a:	a0 93 48 06 	sts	0x0648, r26
    2d4e:	b0 93 49 06 	sts	0x0649, r27
  settings.acceleration = DEFAULT_ACCELERATION;
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	98 ec       	ldi	r25, 0xC8	; 200
    2d56:	af e2       	ldi	r26, 0x2F	; 47
    2d58:	b8 e4       	ldi	r27, 0x48	; 72
    2d5a:	80 93 4f 06 	sts	0x064F, r24
    2d5e:	90 93 50 06 	sts	0x0650, r25
    2d62:	a0 93 51 06 	sts	0x0651, r26
    2d66:	b0 93 52 06 	sts	0x0652, r27
  settings.mm_per_arc_segment = DEFAULT_MM_PER_ARC_SEGMENT;
    2d6a:	8d ec       	ldi	r24, 0xCD	; 205
    2d6c:	9c ec       	ldi	r25, 0xCC	; 204
    2d6e:	ac ec       	ldi	r26, 0xCC	; 204
    2d70:	bd e3       	ldi	r27, 0x3D	; 61
    2d72:	80 93 4b 06 	sts	0x064B, r24
    2d76:	90 93 4c 06 	sts	0x064C, r25
    2d7a:	a0 93 4d 06 	sts	0x064D, r26
    2d7e:	b0 93 4e 06 	sts	0x064E, r27
  settings.invert_mask = DEFAULT_STEPPING_INVERT_MASK;
    2d82:	80 e5       	ldi	r24, 0x50	; 80
    2d84:	80 93 4a 06 	sts	0x064A, r24
  settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
    2d88:	8d ec       	ldi	r24, 0xCD	; 205
    2d8a:	9c ec       	ldi	r25, 0xCC	; 204
    2d8c:	ac e4       	ldi	r26, 0x4C	; 76
    2d8e:	bd e3       	ldi	r27, 0x3D	; 61
    2d90:	80 93 53 06 	sts	0x0653, r24
    2d94:	90 93 54 06 	sts	0x0654, r25
    2d98:	a0 93 55 06 	sts	0x0655, r26
    2d9c:	b0 93 56 06 	sts	0x0656, r27
}
    2da0:	08 95       	ret

00002da2 <settings_dump>:

void settings_dump() {
  printPgmString(PSTR("$0 = ")); printFloat(settings.steps_per_mm[X_AXIS]);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	94 e0       	ldi	r25, 0x04	; 4
    2da6:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2daa:	60 91 34 06 	lds	r22, 0x0634
    2dae:	70 91 35 06 	lds	r23, 0x0635
    2db2:	80 91 36 06 	lds	r24, 0x0636
    2db6:	90 91 37 06 	lds	r25, 0x0637
    2dba:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (steps/mm x)\r\n$1 = ")); printFloat(settings.steps_per_mm[Y_AXIS]);
    2dbe:	8d ee       	ldi	r24, 0xED	; 237
    2dc0:	93 e0       	ldi	r25, 0x03	; 3
    2dc2:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2dc6:	60 91 38 06 	lds	r22, 0x0638
    2dca:	70 91 39 06 	lds	r23, 0x0639
    2dce:	80 91 3a 06 	lds	r24, 0x063A
    2dd2:	90 91 3b 06 	lds	r25, 0x063B
    2dd6:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (steps/mm y)\r\n$2 = ")); printFloat(settings.steps_per_mm[Z_AXIS]);
    2dda:	88 ed       	ldi	r24, 0xD8	; 216
    2ddc:	93 e0       	ldi	r25, 0x03	; 3
    2dde:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2de2:	60 91 3c 06 	lds	r22, 0x063C
    2de6:	70 91 3d 06 	lds	r23, 0x063D
    2dea:	80 91 3e 06 	lds	r24, 0x063E
    2dee:	90 91 3f 06 	lds	r25, 0x063F
    2df2:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (steps/mm z)\r\n$3 = ")); printInteger(settings.pulse_microseconds);
    2df6:	83 ec       	ldi	r24, 0xC3	; 195
    2df8:	93 e0       	ldi	r25, 0x03	; 3
    2dfa:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2dfe:	60 91 41 06 	lds	r22, 0x0641
    2e02:	70 e0       	ldi	r23, 0x00	; 0
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <printInteger>
  printPgmString(PSTR(" (microseconds step pulse)\r\n$4 = ")); printFloat(settings.default_feed_rate);
    2e0c:	81 ea       	ldi	r24, 0xA1	; 161
    2e0e:	93 e0       	ldi	r25, 0x03	; 3
    2e10:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e14:	60 91 42 06 	lds	r22, 0x0642
    2e18:	70 91 43 06 	lds	r23, 0x0643
    2e1c:	80 91 44 06 	lds	r24, 0x0644
    2e20:	90 91 45 06 	lds	r25, 0x0645
    2e24:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (mm/min default feed rate)\r\n$5 = ")); printFloat(settings.default_seek_rate);
    2e28:	8e e7       	ldi	r24, 0x7E	; 126
    2e2a:	93 e0       	ldi	r25, 0x03	; 3
    2e2c:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e30:	60 91 46 06 	lds	r22, 0x0646
    2e34:	70 91 47 06 	lds	r23, 0x0647
    2e38:	80 91 48 06 	lds	r24, 0x0648
    2e3c:	90 91 49 06 	lds	r25, 0x0649
    2e40:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (mm/min default seek rate)\r\n$6 = ")); printFloat(settings.mm_per_arc_segment);
    2e44:	8b e5       	ldi	r24, 0x5B	; 91
    2e46:	93 e0       	ldi	r25, 0x03	; 3
    2e48:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e4c:	60 91 4b 06 	lds	r22, 0x064B
    2e50:	70 91 4c 06 	lds	r23, 0x064C
    2e54:	80 91 4d 06 	lds	r24, 0x064D
    2e58:	90 91 4e 06 	lds	r25, 0x064E
    2e5c:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (mm/arc segment)\r\n$7 = ")); printInteger(settings.invert_mask); 
    2e60:	82 e4       	ldi	r24, 0x42	; 66
    2e62:	93 e0       	ldi	r25, 0x03	; 3
    2e64:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e68:	60 91 4a 06 	lds	r22, 0x064A
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <printInteger>
  printPgmString(PSTR(" (step port invert mask. binary = ")); print_uint8_base2(settings.invert_mask);  
    2e76:	8f e1       	ldi	r24, 0x1F	; 31
    2e78:	93 e0       	ldi	r25, 0x03	; 3
    2e7a:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e7e:	80 91 4a 06 	lds	r24, 0x064A
    2e82:	0e 94 9f 22 	call	0x453e	; 0x453e <print_uint8_base2>
  printPgmString(PSTR(")\r\n$8 = ")); printFloat(settings.acceleration/(60*60)); // Convert from mm/min^2 for human readability
    2e86:	86 e1       	ldi	r24, 0x16	; 22
    2e88:	93 e0       	ldi	r25, 0x03	; 3
    2e8a:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2e8e:	60 91 4f 06 	lds	r22, 0x064F
    2e92:	70 91 50 06 	lds	r23, 0x0650
    2e96:	80 91 51 06 	lds	r24, 0x0651
    2e9a:	90 91 52 06 	lds	r25, 0x0652
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	41 e6       	ldi	r20, 0x61	; 97
    2ea4:	55 e4       	ldi	r21, 0x45	; 69
    2ea6:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    2eaa:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (acceleration in mm/sec^2)\r\n$9 = ")); printFloat(settings.junction_deviation);
    2eae:	83 ef       	ldi	r24, 0xF3	; 243
    2eb0:	92 e0       	ldi	r25, 0x02	; 2
    2eb2:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    2eb6:	60 91 53 06 	lds	r22, 0x0653
    2eba:	70 91 54 06 	lds	r23, 0x0654
    2ebe:	80 91 55 06 	lds	r24, 0x0655
    2ec2:	90 91 56 06 	lds	r25, 0x0656
    2ec6:	0e 94 ee 22 	call	0x45dc	; 0x45dc <printFloat>
  printPgmString(PSTR(" (cornering junction deviation in mm)"));//\r\n$10 = ")); // printInteger(settings.auto_start);
    2eca:	8d ec       	ldi	r24, 0xCD	; 205
    2ecc:	92 e0       	ldi	r25, 0x02	; 2
    2ece:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
//   printPgmString(PSTR(" (auto-start boolean)"));
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
    2ed2:	88 e8       	ldi	r24, 0x88	; 136
    2ed4:	92 e0       	ldi	r25, 0x02	; 2
    2ed6:	0c 94 91 22 	jmp	0x4522	; 0x4522 <printPgmString>

00002eda <write_settings>:
  settings_store_setting(parameter, value);
  return(STATUS_OK);
}

void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	64 e0       	ldi	r22, 0x04	; 4
    2ee0:	5f de       	rcall	.-834    	; 0x2ba0 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	64 e3       	ldi	r22, 0x34	; 52
    2ee8:	76 e0       	ldi	r23, 0x06	; 6
    2eea:	43 e2       	ldi	r20, 0x23	; 35
    2eec:	50 e0       	ldi	r21, 0x00	; 0
}
    2eee:	73 ce       	rjmp	.-794    	; 0x2bd6 <memcpy_to_eeprom_with_checksum>

00002ef0 <read_settings>:

int read_settings() {
    2ef0:	1f 93       	push	r17
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	4c de       	rcall	.-872    	; 0x2b90 <eeprom_get_char>
    2ef8:	18 2f       	mov	r17, r24
  
  if (version == SETTINGS_VERSION) {
    2efa:	84 30       	cpi	r24, 0x04	; 4
    2efc:	69 f4       	brne	.+26     	; 0x2f18 <read_settings+0x28>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2efe:	84 e3       	ldi	r24, 0x34	; 52
    2f00:	96 e0       	ldi	r25, 0x06	; 6
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	43 e2       	ldi	r20, 0x23	; 35
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	aa de       	rcall	.-684    	; 0x2c60 <memcpy_from_eeprom_with_checksum>
void write_settings() {
  eeprom_put_char(0, SETTINGS_VERSION);
  memcpy_to_eeprom_with_checksum(1, (char*)&settings, sizeof(settings_t));
}

int read_settings() {
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <read_settings+0x26>
    2f14:	5c c0       	rjmp	.+184    	; 0x2fce <read_settings+0xde>
    2f16:	59 c0       	rjmp	.+178    	; 0x2fca <read_settings+0xda>
  if (version == SETTINGS_VERSION) {
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(false);
    }
  } else if (version == 1) {
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	19 f5       	brne	.+70     	; 0x2f62 <read_settings+0x72>
    // Migrate from settings version 1
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_v1_t)))) {
    2f1c:	84 e3       	ldi	r24, 0x34	; 52
    2f1e:	96 e0       	ldi	r25, 0x06	; 6
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	4b e1       	ldi	r20, 0x1B	; 27
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	9b de       	rcall	.-714    	; 0x2c60 <memcpy_from_eeprom_with_checksum>
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <read_settings+0x40>
    2f2e:	4d c0       	rjmp	.+154    	; 0x2fca <read_settings+0xda>
      return(false);
    }
    settings.acceleration = DEFAULT_ACCELERATION;
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	98 ec       	ldi	r25, 0xC8	; 200
    2f34:	af e2       	ldi	r26, 0x2F	; 47
    2f36:	b8 e4       	ldi	r27, 0x48	; 72
    2f38:	80 93 4f 06 	sts	0x064F, r24
    2f3c:	90 93 50 06 	sts	0x0650, r25
    2f40:	a0 93 51 06 	sts	0x0651, r26
    2f44:	b0 93 52 06 	sts	0x0652, r27
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
    2f48:	8d ec       	ldi	r24, 0xCD	; 205
    2f4a:	9c ec       	ldi	r25, 0xCC	; 204
    2f4c:	ac e4       	ldi	r26, 0x4C	; 76
    2f4e:	bd e3       	ldi	r27, 0x3D	; 61
    2f50:	80 93 53 06 	sts	0x0653, r24
    2f54:	90 93 54 06 	sts	0x0654, r25
    2f58:	a0 93 55 06 	sts	0x0655, r26
    2f5c:	b0 93 56 06 	sts	0x0656, r27
    2f60:	30 c0       	rjmp	.+96     	; 0x2fc2 <read_settings+0xd2>
//     settings.auto_start = DEFAULT_AUTO_START;
    write_settings();
  } else if ((version == 2) || (version == 3)) {
    2f62:	82 50       	subi	r24, 0x02	; 2
    2f64:	82 30       	cpi	r24, 0x02	; 2
    2f66:	88 f5       	brcc	.+98     	; 0x2fca <read_settings+0xda>
    // Migrate from settings version 2 and 3
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
    2f68:	84 e3       	ldi	r24, 0x34	; 52
    2f6a:	96 e0       	ldi	r25, 0x06	; 6
    2f6c:	61 e0       	ldi	r22, 0x01	; 1
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	43 e2       	ldi	r20, 0x23	; 35
    2f72:	50 e0       	ldi	r21, 0x00	; 0
    2f74:	75 de       	rcall	.-790    	; 0x2c60 <memcpy_from_eeprom_with_checksum>
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	41 f1       	breq	.+80     	; 0x2fca <read_settings+0xda>
      return(false);
    }
    if (version == 2) { settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION; }    
    2f7a:	12 30       	cpi	r17, 0x02	; 2
    2f7c:	61 f4       	brne	.+24     	; 0x2f96 <read_settings+0xa6>
    2f7e:	8d ec       	ldi	r24, 0xCD	; 205
    2f80:	9c ec       	ldi	r25, 0xCC	; 204
    2f82:	ac e4       	ldi	r26, 0x4C	; 76
    2f84:	bd e3       	ldi	r27, 0x3D	; 61
    2f86:	80 93 53 06 	sts	0x0653, r24
    2f8a:	90 93 54 06 	sts	0x0654, r25
    2f8e:	a0 93 55 06 	sts	0x0655, r26
    2f92:	b0 93 56 06 	sts	0x0656, r27
    settings.acceleration *= 3600; // Convert to mm/min^2 from mm/sec^2
    2f96:	60 91 4f 06 	lds	r22, 0x064F
    2f9a:	70 91 50 06 	lds	r23, 0x0650
    2f9e:	80 91 51 06 	lds	r24, 0x0651
    2fa2:	90 91 52 06 	lds	r25, 0x0652
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	41 e6       	ldi	r20, 0x61	; 97
    2fac:	55 e4       	ldi	r21, 0x45	; 69
    2fae:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    2fb2:	60 93 4f 06 	sts	0x064F, r22
    2fb6:	70 93 50 06 	sts	0x0650, r23
    2fba:	80 93 51 06 	sts	0x0651, r24
    2fbe:	90 93 52 06 	sts	0x0652, r25
//     settings.auto_start = DEFAULT_AUTO_START;
    write_settings();
    2fc2:	8b df       	rcall	.-234    	; 0x2eda <write_settings>
//     settings.auto_start = DEFAULT_AUTO_START;
//     write_settings();
  } else {      
    return(false);
  }
  return(true);
    2fc4:	21 e0       	ldi	r18, 0x01	; 1
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <read_settings+0xde>
//     settings.auto_start = DEFAULT_AUTO_START;
    write_settings();
  } else if ((version == 2) || (version == 3)) {
    // Migrate from settings version 2 and 3
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, 1, sizeof(settings_t)))) {
      return(false);
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
//     write_settings();
  } else {      
    return(false);
  }
  return(true);
}
    2fce:	c9 01       	movw	r24, r18
    2fd0:	1f 91       	pop	r17
    2fd2:	08 95       	ret

00002fd4 <settings_store_setting>:

// A helper method to set settings from command line
void settings_store_setting(int parameter, double value) {
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	7a 01       	movw	r14, r20
    2fe4:	8b 01       	movw	r16, r22
  switch(parameter) {
    2fe6:	85 30       	cpi	r24, 0x05	; 5
    2fe8:	91 05       	cpc	r25, r1
    2fea:	09 f4       	brne	.+2      	; 0x2fee <settings_store_setting+0x1a>
    2fec:	54 c0       	rjmp	.+168    	; 0x3096 <settings_store_setting+0xc2>
    2fee:	86 30       	cpi	r24, 0x06	; 6
    2ff0:	91 05       	cpc	r25, r1
    2ff2:	54 f4       	brge	.+20     	; 0x3008 <settings_store_setting+0x34>
    2ff4:	83 30       	cpi	r24, 0x03	; 3
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	79 f1       	breq	.+94     	; 0x3058 <settings_store_setting+0x84>
    2ffa:	84 30       	cpi	r24, 0x04	; 4
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	0c f0       	brlt	.+2      	; 0x3002 <settings_store_setting+0x2e>
    3000:	41 c0       	rjmp	.+130    	; 0x3084 <settings_store_setting+0xb0>
    3002:	97 ff       	sbrs	r25, 7
    3004:	12 c0       	rjmp	.+36     	; 0x302a <settings_store_setting+0x56>
    3006:	84 c0       	rjmp	.+264    	; 0x3110 <settings_store_setting+0x13c>
    3008:	87 30       	cpi	r24, 0x07	; 7
    300a:	91 05       	cpc	r25, r1
    300c:	09 f4       	brne	.+2      	; 0x3010 <settings_store_setting+0x3c>
    300e:	55 c0       	rjmp	.+170    	; 0x30ba <settings_store_setting+0xe6>
    3010:	87 30       	cpi	r24, 0x07	; 7
    3012:	91 05       	cpc	r25, r1
    3014:	0c f4       	brge	.+2      	; 0x3018 <settings_store_setting+0x44>
    3016:	48 c0       	rjmp	.+144    	; 0x30a8 <settings_store_setting+0xd4>
    3018:	88 30       	cpi	r24, 0x08	; 8
    301a:	91 05       	cpc	r25, r1
    301c:	09 f4       	brne	.+2      	; 0x3020 <settings_store_setting+0x4c>
    301e:	56 c0       	rjmp	.+172    	; 0x30cc <settings_store_setting+0xf8>
    3020:	89 30       	cpi	r24, 0x09	; 9
    3022:	91 05       	cpc	r25, r1
    3024:	09 f0       	breq	.+2      	; 0x3028 <settings_store_setting+0x54>
    3026:	74 c0       	rjmp	.+232    	; 0x3110 <settings_store_setting+0x13c>
    3028:	68 c0       	rjmp	.+208    	; 0x30fa <settings_store_setting+0x126>
    case 0: case 1: case 2:
    if (value <= 0.0) {
    302a:	cb 01       	movw	r24, r22
    302c:	ba 01       	movw	r22, r20
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	a9 01       	movw	r20, r18
    3034:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    3038:	18 16       	cp	r1, r24
    303a:	1c f0       	brlt	.+6      	; 0x3042 <settings_store_setting+0x6e>
      printPgmString(PSTR("Steps/mm must be > 0.0\r\n"));
    303c:	8f e6       	ldi	r24, 0x6F	; 111
    303e:	92 e0       	ldi	r25, 0x02	; 2
    3040:	6d c0       	rjmp	.+218    	; 0x311c <settings_store_setting+0x148>
      return;
    }
    settings.steps_per_mm[parameter] = value; break;
    3042:	cc 0f       	add	r28, r28
    3044:	dd 1f       	adc	r29, r29
    3046:	cc 0f       	add	r28, r28
    3048:	dd 1f       	adc	r29, r29
    304a:	cc 5c       	subi	r28, 0xCC	; 204
    304c:	d9 4f       	sbci	r29, 0xF9	; 249
    304e:	e8 82       	st	Y, r14
    3050:	f9 82       	std	Y+1, r15	; 0x01
    3052:	0a 83       	std	Y+2, r16	; 0x02
    3054:	1b 83       	std	Y+3, r17	; 0x03
    3056:	5f c0       	rjmp	.+190    	; 0x3116 <settings_store_setting+0x142>
    case 3: 
    if (value < 3) {
    3058:	cb 01       	movw	r24, r22
    305a:	ba 01       	movw	r22, r20
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e4       	ldi	r20, 0x40	; 64
    3062:	50 e4       	ldi	r21, 0x40	; 64
    3064:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    3068:	87 ff       	sbrs	r24, 7
    306a:	03 c0       	rjmp	.+6      	; 0x3072 <settings_store_setting+0x9e>
      printPgmString(PSTR("Step pulse must be >= 3 microseconds\r\n"));
    306c:	88 e4       	ldi	r24, 0x48	; 72
    306e:	92 e0       	ldi	r25, 0x02	; 2
    3070:	55 c0       	rjmp	.+170    	; 0x311c <settings_store_setting+0x148>
      return;
    }
    settings.pulse_microseconds = round(value); break;
    3072:	c8 01       	movw	r24, r16
    3074:	b7 01       	movw	r22, r14
    3076:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <round>
    307a:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    307e:	60 93 41 06 	sts	0x0641, r22
    3082:	49 c0       	rjmp	.+146    	; 0x3116 <settings_store_setting+0x142>
    case 4: settings.default_feed_rate = value; break;
    3084:	40 93 42 06 	sts	0x0642, r20
    3088:	50 93 43 06 	sts	0x0643, r21
    308c:	60 93 44 06 	sts	0x0644, r22
    3090:	70 93 45 06 	sts	0x0645, r23
    3094:	40 c0       	rjmp	.+128    	; 0x3116 <settings_store_setting+0x142>
    case 5: settings.default_seek_rate = value; break;
    3096:	40 93 46 06 	sts	0x0646, r20
    309a:	50 93 47 06 	sts	0x0647, r21
    309e:	60 93 48 06 	sts	0x0648, r22
    30a2:	70 93 49 06 	sts	0x0649, r23
    30a6:	37 c0       	rjmp	.+110    	; 0x3116 <settings_store_setting+0x142>
    case 6: settings.mm_per_arc_segment = value; break;
    30a8:	40 93 4b 06 	sts	0x064B, r20
    30ac:	50 93 4c 06 	sts	0x064C, r21
    30b0:	60 93 4d 06 	sts	0x064D, r22
    30b4:	70 93 4e 06 	sts	0x064E, r23
    30b8:	2e c0       	rjmp	.+92     	; 0x3116 <settings_store_setting+0x142>
    case 7: settings.invert_mask = trunc(value); break;
    30ba:	cb 01       	movw	r24, r22
    30bc:	ba 01       	movw	r22, r20
    30be:	0e 94 76 2e 	call	0x5cec	; 0x5cec <trunc>
    30c2:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    30c6:	60 93 4a 06 	sts	0x064A, r22
    30ca:	25 c0       	rjmp	.+74     	; 0x3116 <settings_store_setting+0x142>
    case 8: settings.acceleration = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
    30cc:	cb 01       	movw	r24, r22
    30ce:	ba 01       	movw	r22, r20
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e7       	ldi	r20, 0x70	; 112
    30d6:	52 e4       	ldi	r21, 0x42	; 66
    30d8:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	40 e7       	ldi	r20, 0x70	; 112
    30e2:	52 e4       	ldi	r21, 0x42	; 66
    30e4:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    30e8:	60 93 4f 06 	sts	0x064F, r22
    30ec:	70 93 50 06 	sts	0x0650, r23
    30f0:	80 93 51 06 	sts	0x0651, r24
    30f4:	90 93 52 06 	sts	0x0652, r25
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <settings_store_setting+0x142>
    case 9: settings.junction_deviation = fabs(value); break;
    30fa:	e8 94       	clt
    30fc:	17 f9       	bld	r17, 7
    30fe:	e0 92 53 06 	sts	0x0653, r14
    3102:	f0 92 54 06 	sts	0x0654, r15
    3106:	00 93 55 06 	sts	0x0655, r16
    310a:	10 93 56 06 	sts	0x0656, r17
    310e:	03 c0       	rjmp	.+6      	; 0x3116 <settings_store_setting+0x142>
//     case 10: settings.auto_start = value; break;
    default: 
      printPgmString(PSTR("Unknown parameter\r\n"));
    3110:	84 e3       	ldi	r24, 0x34	; 52
    3112:	92 e0       	ldi	r25, 0x02	; 2
    3114:	03 c0       	rjmp	.+6      	; 0x311c <settings_store_setting+0x148>
      return;
  }
  write_settings();
    3116:	e1 de       	rcall	.-574    	; 0x2eda <write_settings>
  printPgmString(PSTR("Stored new setting\r\n"));
    3118:	8f e1       	ldi	r24, 0x1F	; 31
    311a:	92 e0       	ldi	r25, 0x02	; 2
    311c:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
}
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	08 95       	ret

0000312e <settings_execute_line>:
//   printPgmString(PSTR(" (auto-start boolean)"));
  printPgmString(PSTR("\r\n'$x=value' to set parameter or just '$' to dump current settings\r\n"));
}

// Parameter lines are on the form '$4=374.3' or '$' to dump current settings
uint8_t settings_execute_line(char *line) {
    312e:	ef 92       	push	r14
    3130:	ff 92       	push	r15
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	29 97       	sbiw	r28, 0x09	; 9
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	8c 01       	movw	r16, r24
  uint8_t char_counter = 1;
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	89 83       	std	Y+1, r24	; 0x01
  double parameter, value;
  if(line[0] != '$') { 
    3150:	f8 01       	movw	r30, r16
    3152:	80 81       	ld	r24, Z
    3154:	84 32       	cpi	r24, 0x24	; 36
    3156:	e1 f5       	brne	.+120    	; 0x31d0 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(line[char_counter] == 0) { 
    3158:	81 81       	ldd	r24, Z+1	; 0x01
    315a:	88 23       	and	r24, r24
    315c:	11 f4       	brne	.+4      	; 0x3162 <settings_execute_line+0x34>
    settings_dump(); return(STATUS_OK); 
    315e:	21 de       	rcall	.-958    	; 0x2da2 <settings_dump>
    3160:	33 c0       	rjmp	.+102    	; 0x31c8 <settings_execute_line+0x9a>
  }
  if(!read_double(line, &char_counter, &parameter)) {
    3162:	c8 01       	movw	r24, r16
    3164:	7e 01       	movw	r14, r28
    3166:	08 94       	sec
    3168:	e1 1c       	adc	r14, r1
    316a:	f1 1c       	adc	r15, r1
    316c:	b7 01       	movw	r22, r14
    316e:	ae 01       	movw	r20, r28
    3170:	4e 5f       	subi	r20, 0xFE	; 254
    3172:	5f 4f       	sbci	r21, 0xFF	; 255
    3174:	0e 94 93 21 	call	0x4326	; 0x4326 <read_double>
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	41 f1       	breq	.+80     	; 0x31cc <settings_execute_line+0x9e>
    return(STATUS_BAD_NUMBER_FORMAT);
  };
  if(line[char_counter++] != '=') { 
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	f8 01       	movw	r30, r16
    3180:	e8 0f       	add	r30, r24
    3182:	f1 1d       	adc	r31, r1
    3184:	90 81       	ld	r25, Z
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	9d 33       	cpi	r25, 0x3D	; 61
    318c:	09 f5       	brne	.+66     	; 0x31d0 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(!read_double(line, &char_counter, &value)) {
    318e:	c8 01       	movw	r24, r16
    3190:	b7 01       	movw	r22, r14
    3192:	ae 01       	movw	r20, r28
    3194:	4a 5f       	subi	r20, 0xFA	; 250
    3196:	5f 4f       	sbci	r21, 0xFF	; 255
    3198:	0e 94 93 21 	call	0x4326	; 0x4326 <read_double>
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	b1 f0       	breq	.+44     	; 0x31cc <settings_execute_line+0x9e>
    return(STATUS_BAD_NUMBER_FORMAT);
  }
  if(line[char_counter] != 0) { 
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	f8 01       	movw	r30, r16
    31a4:	e8 0f       	add	r30, r24
    31a6:	f1 1d       	adc	r31, r1
    31a8:	80 81       	ld	r24, Z
    31aa:	88 23       	and	r24, r24
    31ac:	89 f4       	brne	.+34     	; 0x31d0 <settings_execute_line+0xa2>
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  settings_store_setting(parameter, value);
    31ae:	6a 81       	ldd	r22, Y+2	; 0x02
    31b0:	7b 81       	ldd	r23, Y+3	; 0x03
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	9d 81       	ldd	r25, Y+5	; 0x05
    31b6:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	4e 81       	ldd	r20, Y+6	; 0x06
    31c0:	5f 81       	ldd	r21, Y+7	; 0x07
    31c2:	68 85       	ldd	r22, Y+8	; 0x08
    31c4:	79 85       	ldd	r23, Y+9	; 0x09
    31c6:	06 df       	rcall	.-500    	; 0x2fd4 <settings_store_setting>
  return(STATUS_OK);
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	03 c0       	rjmp	.+6      	; 0x31d2 <settings_execute_line+0xa4>
  };
  if(line[char_counter++] != '=') { 
    return(STATUS_UNSUPPORTED_STATEMENT); 
  }
  if(!read_double(line, &char_counter, &value)) {
    return(STATUS_BAD_NUMBER_FORMAT);
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <settings_execute_line+0xa4>
  }
  if(line[char_counter] != 0) { 
    return(STATUS_UNSUPPORTED_STATEMENT); 
    31d0:	83 e0       	ldi	r24, 0x03	; 3
  }
  settings_store_setting(parameter, value);
  return(STATUS_OK);
}
    31d2:	29 96       	adiw	r28, 0x09	; 9
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	08 95       	ret

000031ec <settings_init>:
  printPgmString(PSTR("Stored new setting\r\n"));
}

// Initialize the config subsystem
void settings_init() {
  if(!read_settings()) {
    31ec:	81 de       	rcall	.-766    	; 0x2ef0 <read_settings>
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	39 f4       	brne	.+14     	; 0x3200 <settings_init+0x14>
    printPgmString(PSTR("Warning: Failed to read EEPROM settings. Using defaults.\r\n"));
    31f2:	84 ee       	ldi	r24, 0xE4	; 228
    31f4:	91 e0       	ldi	r25, 0x01	; 1
    31f6:	0e 94 91 22 	call	0x4522	; 0x4522 <printPgmString>
    settings_reset();
    31fa:	78 dd       	rcall	.-1296   	; 0x2cec <settings_reset>
    write_settings();
    31fc:	6e de       	rcall	.-804    	; 0x2eda <write_settings>
    settings_dump();
    31fe:	d1 cd       	rjmp	.-1118   	; 0x2da2 <settings_dump>
    3200:	08 95       	ret

00003202 <next_block_index>:

// Returns the index of the next block in the ring buffer
// NOTE: Removed modulo (%) operator, which uses an expensive divide and multiplication.
static uint8_t next_block_index(uint8_t block_index) 
{
  block_index++;
    3202:	8f 5f       	subi	r24, 0xFF	; 255
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
    3204:	82 31       	cpi	r24, 0x12	; 18
    3206:	09 f4       	brne	.+2      	; 0x320a <next_block_index+0x8>
    3208:	80 e0       	ldi	r24, 0x00	; 0
  return(block_index);
}
    320a:	08 95       	ret

0000320c <estimate_acceleration_distance>:


// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
// given acceleration:
static double estimate_acceleration_distance(double initial_rate, double target_rate, double acceleration) 
{
    320c:	6f 92       	push	r6
    320e:	7f 92       	push	r7
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	5b 01       	movw	r10, r22
    3226:	6c 01       	movw	r12, r24
  return( (target_rate*target_rate-initial_rate*initial_rate)/(2*acceleration) );
    3228:	ca 01       	movw	r24, r20
    322a:	b9 01       	movw	r22, r18
    322c:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3230:	3b 01       	movw	r6, r22
    3232:	4c 01       	movw	r8, r24
    3234:	c6 01       	movw	r24, r12
    3236:	b5 01       	movw	r22, r10
    3238:	a6 01       	movw	r20, r12
    323a:	95 01       	movw	r18, r10
    323c:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3240:	9b 01       	movw	r18, r22
    3242:	ac 01       	movw	r20, r24
    3244:	c4 01       	movw	r24, r8
    3246:	b3 01       	movw	r22, r6
    3248:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    324c:	5b 01       	movw	r10, r22
    324e:	6c 01       	movw	r12, r24
    3250:	c8 01       	movw	r24, r16
    3252:	b7 01       	movw	r22, r14
    3254:	a8 01       	movw	r20, r16
    3256:	97 01       	movw	r18, r14
    3258:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    325c:	9b 01       	movw	r18, r22
    325e:	ac 01       	movw	r20, r24
    3260:	c6 01       	movw	r24, r12
    3262:	b5 01       	movw	r22, r10
    3264:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
}
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	7f 90       	pop	r7
    327e:	6f 90       	pop	r6
    3280:	08 95       	ret

00003282 <max_allowable_speed>:
// using the acceleration within the allotted distance.
// NOTE: sqrt() reimplimented here from prior version due to improved planner logic. Increases speed
// in time critical computations, i.e. arcs or rapid short lines from curves. Guaranteed to not exceed
// BLOCK_BUFFER_SIZE calls per planner cycle.
static double max_allowable_speed(double acceleration, double target_velocity, double distance) 
{
    3282:	6f 92       	push	r6
    3284:	7f 92       	push	r7
    3286:	8f 92       	push	r8
    3288:	9f 92       	push	r9
    328a:	af 92       	push	r10
    328c:	bf 92       	push	r11
    328e:	cf 92       	push	r12
    3290:	df 92       	push	r13
    3292:	ef 92       	push	r14
    3294:	ff 92       	push	r15
    3296:	0f 93       	push	r16
    3298:	1f 93       	push	r17
    329a:	5b 01       	movw	r10, r22
    329c:	6c 01       	movw	r12, r24
  return( sqrt(target_velocity*target_velocity-2*acceleration*distance) );
    329e:	ca 01       	movw	r24, r20
    32a0:	b9 01       	movw	r22, r18
    32a2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    32a6:	3b 01       	movw	r6, r22
    32a8:	4c 01       	movw	r8, r24
    32aa:	c6 01       	movw	r24, r12
    32ac:	b5 01       	movw	r22, r10
    32ae:	a6 01       	movw	r20, r12
    32b0:	95 01       	movw	r18, r10
    32b2:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    32b6:	a8 01       	movw	r20, r16
    32b8:	97 01       	movw	r18, r14
    32ba:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    32be:	9b 01       	movw	r18, r22
    32c0:	ac 01       	movw	r20, r24
    32c2:	c4 01       	movw	r24, r8
    32c4:	b3 01       	movw	r22, r6
    32c6:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    32ca:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <sqrt>
}
    32ce:	1f 91       	pop	r17
    32d0:	0f 91       	pop	r16
    32d2:	ff 90       	pop	r15
    32d4:	ef 90       	pop	r14
    32d6:	df 90       	pop	r13
    32d8:	cf 90       	pop	r12
    32da:	bf 90       	pop	r11
    32dc:	af 90       	pop	r10
    32de:	9f 90       	pop	r9
    32e0:	8f 90       	pop	r8
    32e2:	7f 90       	pop	r7
    32e4:	6f 90       	pop	r6
    32e6:	08 95       	ret

000032e8 <calculate_trapezoid_for_block>:
// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
// The factors represent a factor of braking and must be in the range 0.0-1.0.
// This converts the planner parameters to the data required by the stepper controller.
// NOTE: Final rates must be computed in terms of their respective blocks.
static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) 
{  
    32e8:	2f 92       	push	r2
    32ea:	3f 92       	push	r3
    32ec:	4f 92       	push	r4
    32ee:	5f 92       	push	r5
    32f0:	6f 92       	push	r6
    32f2:	7f 92       	push	r7
    32f4:	8f 92       	push	r8
    32f6:	9f 92       	push	r9
    32f8:	af 92       	push	r10
    32fa:	bf 92       	push	r11
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	2e 97       	sbiw	r28, 0x0e	; 14
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	9e 87       	std	Y+14, r25	; 0x0e
    331e:	8d 87       	std	Y+13, r24	; 0x0d
    3320:	5a 01       	movw	r10, r20
    3322:	6b 01       	movw	r12, r22
    3324:	78 01       	movw	r14, r16
    3326:	89 01       	movw	r16, r18
  block->initial_rate = ceil(block->nominal_rate*entry_factor); // (step/min)
    3328:	dc 01       	movw	r26, r24
    332a:	d7 96       	adiw	r26, 0x37	; 55
    332c:	6d 91       	ld	r22, X+
    332e:	7d 91       	ld	r23, X+
    3330:	8d 91       	ld	r24, X+
    3332:	9c 91       	ld	r25, X
    3334:	da 97       	sbiw	r26, 0x3a	; 58
    3336:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
    333a:	3b 01       	movw	r6, r22
    333c:	4c 01       	movw	r8, r24
    333e:	a6 01       	movw	r20, r12
    3340:	95 01       	movw	r18, r10
    3342:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3346:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
    334a:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    334e:	5b 01       	movw	r10, r22
    3350:	6c 01       	movw	r12, r24
    3352:	ed 85       	ldd	r30, Y+13	; 0x0d
    3354:	fe 85       	ldd	r31, Y+14	; 0x0e
    3356:	63 a3       	std	Z+35, r22	; 0x23
    3358:	74 a3       	std	Z+36, r23	; 0x24
    335a:	85 a3       	std	Z+37, r24	; 0x25
    335c:	96 a3       	std	Z+38, r25	; 0x26
  block->final_rate = ceil(block->nominal_rate*exit_factor); // (step/min)
    335e:	c4 01       	movw	r24, r8
    3360:	b3 01       	movw	r22, r6
    3362:	a8 01       	movw	r20, r16
    3364:	97 01       	movw	r18, r14
    3366:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    336a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
    336e:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    3372:	69 83       	std	Y+1, r22	; 0x01
    3374:	7a 83       	std	Y+2, r23	; 0x02
    3376:	8b 83       	std	Y+3, r24	; 0x03
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	ad 85       	ldd	r26, Y+13	; 0x0d
    337c:	be 85       	ldd	r27, Y+14	; 0x0e
    337e:	97 96       	adiw	r26, 0x27	; 39
    3380:	6d 93       	st	X+, r22
    3382:	7d 93       	st	X+, r23
    3384:	8d 93       	st	X+, r24
    3386:	9c 93       	st	X, r25
    3388:	9a 97       	sbiw	r26, 0x2a	; 42
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0; // (step/min^2)
    338a:	9b 96       	adiw	r26, 0x2b	; 43
    338c:	6d 91       	ld	r22, X+
    338e:	7d 91       	ld	r23, X+
    3390:	8d 91       	ld	r24, X+
    3392:	9c 91       	ld	r25, X
    3394:	9e 97       	sbiw	r26, 0x2e	; 46
    3396:	22 e3       	ldi	r18, 0x32	; 50
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e0       	ldi	r20, 0x00	; 0
    339c:	50 e0       	ldi	r21, 0x00	; 0
    339e:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <__mulsi3>
    33a2:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e7       	ldi	r20, 0x70	; 112
    33ac:	52 e4       	ldi	r21, 0x42	; 66
    33ae:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    33b2:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    33b6:	1b 01       	movw	r2, r22
    33b8:	2c 01       	movw	r4, r24
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
    33ba:	c6 01       	movw	r24, r12
    33bc:	b5 01       	movw	r22, r10
    33be:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
    33c2:	69 87       	std	Y+9, r22	; 0x09
    33c4:	7a 87       	std	Y+10, r23	; 0x0a
    33c6:	8b 87       	std	Y+11, r24	; 0x0b
    33c8:	9c 87       	std	Y+12, r25	; 0x0c
    33ca:	c2 01       	movw	r24, r4
    33cc:	b1 01       	movw	r22, r2
    33ce:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    33d2:	6d 83       	std	Y+5, r22	; 0x05
    33d4:	7e 83       	std	Y+6, r23	; 0x06
    33d6:	8f 83       	std	Y+7, r24	; 0x07
    33d8:	98 87       	std	Y+8, r25	; 0x08
    33da:	69 85       	ldd	r22, Y+9	; 0x09
    33dc:	7a 85       	ldd	r23, Y+10	; 0x0a
    33de:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33e2:	a4 01       	movw	r20, r8
    33e4:	93 01       	movw	r18, r6
    33e6:	ed 80       	ldd	r14, Y+5	; 0x05
    33e8:	fe 80       	ldd	r15, Y+6	; 0x06
    33ea:	0f 81       	ldd	r16, Y+7	; 0x07
    33ec:	18 85       	ldd	r17, Y+8	; 0x08
    33ee:	0e df       	rcall	.-484    	; 0x320c <estimate_acceleration_distance>
    33f0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
static void calculate_trapezoid_for_block(block_t *block, double entry_factor, double exit_factor) 
{  
  block->initial_rate = ceil(block->nominal_rate*entry_factor); // (step/min)
  block->final_rate = ceil(block->nominal_rate*exit_factor); // (step/min)
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0; // (step/min^2)
  int32_t accelerate_steps = 
    33f4:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    33f8:	a6 2e       	mov	r10, r22
    33fa:	b7 2e       	mov	r11, r23
    33fc:	c8 2e       	mov	r12, r24
    33fe:	d9 2e       	mov	r13, r25
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    3400:	69 81       	ldd	r22, Y+1	; 0x01
    3402:	7a 81       	ldd	r23, Y+2	; 0x02
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__floatunsisf>
    340c:	69 83       	std	Y+1, r22	; 0x01
    340e:	7a 83       	std	Y+2, r23	; 0x02
    3410:	8b 83       	std	Y+3, r24	; 0x03
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	66 27       	eor	r22, r22
    3416:	77 27       	eor	r23, r23
    3418:	cb 01       	movw	r24, r22
    341a:	62 19       	sub	r22, r2
    341c:	73 09       	sbc	r23, r3
    341e:	84 09       	sbc	r24, r4
    3420:	95 09       	sbc	r25, r5
    3422:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3426:	7b 01       	movw	r14, r22
    3428:	8c 01       	movw	r16, r24
    342a:	c4 01       	movw	r24, r8
    342c:	b3 01       	movw	r22, r6
    342e:	29 81       	ldd	r18, Y+1	; 0x01
    3430:	3a 81       	ldd	r19, Y+2	; 0x02
    3432:	4b 81       	ldd	r20, Y+3	; 0x03
    3434:	5c 81       	ldd	r21, Y+4	; 0x04
    3436:	ea de       	rcall	.-556    	; 0x320c <estimate_acceleration_distance>
    3438:	0e 94 b0 2b 	call	0x5760	; 0x5760 <floor>
    
  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    343c:	ed 85       	ldd	r30, Y+13	; 0x0d
    343e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3440:	65 84       	ldd	r6, Z+13	; 0x0d
    3442:	76 84       	ldd	r7, Z+14	; 0x0e
    3444:	87 84       	ldd	r8, Z+15	; 0x0f
    3446:	90 88       	ldd	r9, Z+16	; 0x10
    3448:	84 01       	movw	r16, r8
    344a:	73 01       	movw	r14, r6
    344c:	ea 18       	sub	r14, r10
    344e:	fb 08       	sbc	r15, r11
    3450:	0c 09       	sbc	r16, r12
    3452:	1d 09       	sbc	r17, r13
  block->initial_rate = ceil(block->nominal_rate*entry_factor); // (step/min)
  block->final_rate = ceil(block->nominal_rate*exit_factor); // (step/min)
  int32_t acceleration_per_minute = block->rate_delta*ACCELERATION_TICKS_PER_SECOND*60.0; // (step/min^2)
  int32_t accelerate_steps = 
    ceil(estimate_acceleration_distance(block->initial_rate, block->nominal_rate, acceleration_per_minute));
  int32_t decelerate_steps = 
    3454:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    floor(estimate_acceleration_distance(block->nominal_rate, block->final_rate, -acceleration_per_minute));
    
  // Calculate the size of Plateau of Nominal Rate. 
  int32_t plateau_steps = block->step_event_count-accelerate_steps-decelerate_steps;
    3458:	e6 1a       	sub	r14, r22
    345a:	f7 0a       	sbc	r15, r23
    345c:	08 0b       	sbc	r16, r24
    345e:	19 0b       	sbc	r17, r25
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    3460:	17 ff       	sbrs	r17, 7
    3462:	5d c0       	rjmp	.+186    	; 0x351e <calculate_trapezoid_for_block+0x236>
// you started at speed initial_rate and accelerated until this point and want to end at the final_rate after
// a total travel of distance. This can be used to compute the intersection point between acceleration and
// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)
static double intersection_distance(double initial_rate, double final_rate, double acceleration, double distance) 
{
  return( (2*acceleration*distance-initial_rate*initial_rate+final_rate*final_rate)/(4*acceleration) );
    3464:	6d 81       	ldd	r22, Y+5	; 0x05
    3466:	7e 81       	ldd	r23, Y+6	; 0x06
    3468:	8f 81       	ldd	r24, Y+7	; 0x07
    346a:	98 85       	ldd	r25, Y+8	; 0x08
    346c:	9b 01       	movw	r18, r22
    346e:	ac 01       	movw	r20, r24
    3470:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    3474:	7b 01       	movw	r14, r22
    3476:	8c 01       	movw	r16, r24
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    3478:	c4 01       	movw	r24, r8
    347a:	b3 01       	movw	r22, r6
    347c:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3480:	9b 01       	movw	r18, r22
    3482:	ac 01       	movw	r20, r24
// you started at speed initial_rate and accelerated until this point and want to end at the final_rate after
// a total travel of distance. This can be used to compute the intersection point between acceleration and
// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)
static double intersection_distance(double initial_rate, double final_rate, double acceleration, double distance) 
{
  return( (2*acceleration*distance-initial_rate*initial_rate+final_rate*final_rate)/(4*acceleration) );
    3484:	c8 01       	movw	r24, r16
    3486:	b7 01       	movw	r22, r14
    3488:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    348c:	7b 01       	movw	r14, r22
    348e:	8c 01       	movw	r16, r24
    3490:	69 85       	ldd	r22, Y+9	; 0x09
    3492:	7a 85       	ldd	r23, Y+10	; 0x0a
    3494:	8b 85       	ldd	r24, Y+11	; 0x0b
    3496:	9c 85       	ldd	r25, Y+12	; 0x0c
    3498:	9b 01       	movw	r18, r22
    349a:	ac 01       	movw	r20, r24
    349c:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    34a0:	9b 01       	movw	r18, r22
    34a2:	ac 01       	movw	r20, r24
    34a4:	c8 01       	movw	r24, r16
    34a6:	b7 01       	movw	r22, r14
    34a8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    34ac:	7b 01       	movw	r14, r22
    34ae:	8c 01       	movw	r16, r24
    34b0:	69 81       	ldd	r22, Y+1	; 0x01
    34b2:	7a 81       	ldd	r23, Y+2	; 0x02
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	9b 01       	movw	r18, r22
    34ba:	ac 01       	movw	r20, r24
    34bc:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    34c0:	9b 01       	movw	r18, r22
    34c2:	ac 01       	movw	r20, r24
    34c4:	c8 01       	movw	r24, r16
    34c6:	b7 01       	movw	r22, r14
    34c8:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    34cc:	7b 01       	movw	r14, r22
    34ce:	8c 01       	movw	r16, r24
    34d0:	6d 81       	ldd	r22, Y+5	; 0x05
    34d2:	7e 81       	ldd	r23, Y+6	; 0x06
    34d4:	8f 81       	ldd	r24, Y+7	; 0x07
    34d6:	98 85       	ldd	r25, Y+8	; 0x08
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e8       	ldi	r20, 0x80	; 128
    34de:	50 e4       	ldi	r21, 0x40	; 64
    34e0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    34e4:	9b 01       	movw	r18, r22
    34e6:	ac 01       	movw	r20, r24
    34e8:	c8 01       	movw	r24, r16
    34ea:	b7 01       	movw	r22, r14
    34ec:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
  
  // Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
  // have to use intersection_distance() to calculate when to abort acceleration and start braking 
  // in order to reach the final_rate exactly at the end of this block.
  if (plateau_steps < 0) {  
    accelerate_steps = ceil(
    34f0:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
    34f4:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
      intersection_distance(block->initial_rate, block->final_rate, acceleration_per_minute, block->step_event_count));
    accelerate_steps = max(accelerate_steps,0); // Check limits due to numerical round-off
    34f8:	a6 2e       	mov	r10, r22
    34fa:	b7 2e       	mov	r11, r23
    34fc:	c8 2e       	mov	r12, r24
    34fe:	d9 2e       	mov	r13, r25
    3500:	d7 fe       	sbrs	r13, 7
    3502:	03 c0       	rjmp	.+6      	; 0x350a <calculate_trapezoid_for_block+0x222>
    3504:	aa 24       	eor	r10, r10
    3506:	bb 24       	eor	r11, r11
    3508:	65 01       	movw	r12, r10
    accelerate_steps = min(accelerate_steps,block->step_event_count);
    350a:	6a 14       	cp	r6, r10
    350c:	7b 04       	cpc	r7, r11
    350e:	8c 04       	cpc	r8, r12
    3510:	9d 04       	cpc	r9, r13
    3512:	14 f4       	brge	.+4      	; 0x3518 <calculate_trapezoid_for_block+0x230>
    3514:	64 01       	movw	r12, r8
    3516:	53 01       	movw	r10, r6
    plateau_steps = 0;
    3518:	ee 24       	eor	r14, r14
    351a:	ff 24       	eor	r15, r15
    351c:	87 01       	movw	r16, r14
  }  
  
  block->accelerate_until = accelerate_steps;
    351e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3520:	be 85       	ldd	r27, Y+14	; 0x0e
    3522:	9f 96       	adiw	r26, 0x2f	; 47
    3524:	ad 92       	st	X+, r10
    3526:	bd 92       	st	X+, r11
    3528:	cd 92       	st	X+, r12
    352a:	dc 92       	st	X, r13
    352c:	d2 97       	sbiw	r26, 0x32	; 50
  block->decelerate_after = accelerate_steps+plateau_steps;
    352e:	ea 0c       	add	r14, r10
    3530:	fb 1c       	adc	r15, r11
    3532:	0c 1d       	adc	r16, r12
    3534:	1d 1d       	adc	r17, r13
    3536:	fd 01       	movw	r30, r26
    3538:	e3 aa       	std	Z+51, r14	; 0x33
    353a:	f4 aa       	std	Z+52, r15	; 0x34
    353c:	05 ab       	std	Z+53, r16	; 0x35
    353e:	16 ab       	std	Z+54, r17	; 0x36
}     
    3540:	2e 96       	adiw	r28, 0x0e	; 14
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	bf 90       	pop	r11
    355e:	af 90       	pop	r10
    3560:	9f 90       	pop	r9
    3562:	8f 90       	pop	r8
    3564:	7f 90       	pop	r7
    3566:	6f 90       	pop	r6
    3568:	5f 90       	pop	r5
    356a:	4f 90       	pop	r4
    356c:	3f 90       	pop	r3
    356e:	2f 90       	pop	r2
    3570:	08 95       	ret

00003572 <planner_forward_pass_kernel.clone.1>:
  // Skip buffer tail/first block to prevent over-writing the initial entry speed.
}


// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
static void planner_forward_pass_kernel(block_t *previous, block_t *current, block_t *next) 
    3572:	4f 92       	push	r4
    3574:	5f 92       	push	r5
    3576:	6f 92       	push	r6
    3578:	7f 92       	push	r7
    357a:	8f 92       	push	r8
    357c:	9f 92       	push	r9
    357e:	af 92       	push	r10
    3580:	bf 92       	push	r11
    3582:	cf 92       	push	r12
    3584:	df 92       	push	r13
    3586:	ef 92       	push	r14
    3588:	ff 92       	push	r15
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	ec 01       	movw	r28, r24
    3594:	6b 01       	movw	r12, r22
{
  if(!previous) { return; }  // Begin planning after buffer_tail
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	09 f4       	brne	.+2      	; 0x359c <planner_forward_pass_kernel.clone.1+0x2a>
    359a:	56 c0       	rjmp	.+172    	; 0x3648 <planner_forward_pass_kernel.clone.1+0xd6>
  
  // If the previous block is an acceleration block, but it is not long enough to complete the
  // full speed change within the block, we need to adjust the entry speed accordingly. Entry
  // speeds have already been reset, maximized, and reverse planned by reverse planner.
  // If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.  
  if (!previous->nominal_length_flag) {
    359c:	8a a1       	ldd	r24, Y+34	; 0x22
    359e:	88 23       	and	r24, r24
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <planner_forward_pass_kernel.clone.1+0x32>
    35a2:	52 c0       	rjmp	.+164    	; 0x3648 <planner_forward_pass_kernel.clone.1+0xd6>
    if (previous->entry_speed < current->entry_speed) {
    35a4:	4d 88       	ldd	r4, Y+21	; 0x15
    35a6:	5e 88       	ldd	r5, Y+22	; 0x16
    35a8:	6f 88       	ldd	r6, Y+23	; 0x17
    35aa:	78 8c       	ldd	r7, Y+24	; 0x18
    35ac:	fb 01       	movw	r30, r22
    35ae:	b5 88       	ldd	r11, Z+21	; 0x15
    35b0:	a6 88       	ldd	r10, Z+22	; 0x16
    35b2:	97 88       	ldd	r9, Z+23	; 0x17
    35b4:	80 8c       	ldd	r8, Z+24	; 0x18
    35b6:	c3 01       	movw	r24, r6
    35b8:	b2 01       	movw	r22, r4
    35ba:	d5 01       	movw	r26, r10
    35bc:	f4 01       	movw	r30, r8
    35be:	2b 2f       	mov	r18, r27
    35c0:	3a 2f       	mov	r19, r26
    35c2:	4f 2f       	mov	r20, r31
    35c4:	5e 2f       	mov	r21, r30
    35c6:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    35ca:	87 ff       	sbrs	r24, 7
    35cc:	3d c0       	rjmp	.+122    	; 0x3648 <planner_forward_pass_kernel.clone.1+0xd6>
      double entry_speed = min( current->entry_speed,
    35ce:	60 91 4f 06 	lds	r22, 0x064F
    35d2:	70 91 50 06 	lds	r23, 0x0650
    35d6:	80 91 51 06 	lds	r24, 0x0651
    35da:	90 91 52 06 	lds	r25, 0x0652
    35de:	90 58       	subi	r25, 0x80	; 128
    35e0:	ed 8c       	ldd	r14, Y+29	; 0x1d
    35e2:	fe 8c       	ldd	r15, Y+30	; 0x1e
    35e4:	0f 8d       	ldd	r16, Y+31	; 0x1f
    35e6:	18 a1       	ldd	r17, Y+32	; 0x20
    35e8:	a3 01       	movw	r20, r6
    35ea:	92 01       	movw	r18, r4
    35ec:	4a de       	rcall	.-876    	; 0x3282 <max_allowable_speed>
    35ee:	8b 01       	movw	r16, r22
    35f0:	7c 01       	movw	r14, r24
    35f2:	a5 01       	movw	r20, r10
    35f4:	94 01       	movw	r18, r8
    35f6:	65 2f       	mov	r22, r21
    35f8:	74 2f       	mov	r23, r20
    35fa:	83 2f       	mov	r24, r19
    35fc:	92 2f       	mov	r25, r18
    35fe:	20 2f       	mov	r18, r16
    3600:	31 2f       	mov	r19, r17
    3602:	4e 2d       	mov	r20, r14
    3604:	5f 2d       	mov	r21, r15
    3606:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    360a:	87 ff       	sbrs	r24, 7
    360c:	04 c0       	rjmp	.+8      	; 0x3616 <planner_forward_pass_kernel.clone.1+0xa4>
    360e:	0b 2d       	mov	r16, r11
    3610:	1a 2d       	mov	r17, r10
    3612:	e9 2c       	mov	r14, r9
    3614:	f8 2c       	mov	r15, r8
        max_allowable_speed(-settings.acceleration,previous->entry_speed,previous->millimeters) );

      // Check for junction speed change
      if (current->entry_speed != entry_speed) {
    3616:	a5 01       	movw	r20, r10
    3618:	94 01       	movw	r18, r8
    361a:	65 2f       	mov	r22, r21
    361c:	7a 2d       	mov	r23, r10
    361e:	83 2f       	mov	r24, r19
    3620:	98 2d       	mov	r25, r8
    3622:	20 2f       	mov	r18, r16
    3624:	31 2f       	mov	r19, r17
    3626:	4e 2d       	mov	r20, r14
    3628:	5f 2d       	mov	r21, r15
    362a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    362e:	88 23       	and	r24, r24
    3630:	59 f0       	breq	.+22     	; 0x3648 <planner_forward_pass_kernel.clone.1+0xd6>
        current->entry_speed = entry_speed;
    3632:	80 2f       	mov	r24, r16
    3634:	91 2f       	mov	r25, r17
    3636:	ae 2d       	mov	r26, r14
    3638:	bf 2d       	mov	r27, r15
    363a:	f6 01       	movw	r30, r12
    363c:	85 8b       	std	Z+21, r24	; 0x15
    363e:	96 8b       	std	Z+22, r25	; 0x16
    3640:	a7 8b       	std	Z+23, r26	; 0x17
    3642:	b0 8f       	std	Z+24, r27	; 0x18
        current->recalculate_flag = true;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	81 a3       	std	Z+33, r24	; 0x21
      }
    }    
  }
}
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	1f 91       	pop	r17
    364e:	0f 91       	pop	r16
    3650:	ff 90       	pop	r15
    3652:	ef 90       	pop	r14
    3654:	df 90       	pop	r13
    3656:	cf 90       	pop	r12
    3658:	bf 90       	pop	r11
    365a:	af 90       	pop	r10
    365c:	9f 90       	pop	r9
    365e:	8f 90       	pop	r8
    3660:	7f 90       	pop	r7
    3662:	6f 90       	pop	r6
    3664:	5f 90       	pop	r5
    3666:	4f 90       	pop	r4
    3668:	08 95       	ret

0000366a <planner_recalculate>:
//
// All planner computations are performed with doubles (float on Arduinos) to minimize numerical round-
// off errors. Only when planned values are converted to stepper rate parameters, these are integers.

static void planner_recalculate() 
{     
    366a:	2f 92       	push	r2
    366c:	3f 92       	push	r3
    366e:	4f 92       	push	r4
    3670:	5f 92       	push	r5
    3672:	6f 92       	push	r6
    3674:	7f 92       	push	r7
    3676:	8f 92       	push	r8
    3678:	9f 92       	push	r9
    367a:	af 92       	push	r10
    367c:	bf 92       	push	r11
    367e:	cf 92       	push	r12
    3680:	df 92       	push	r13
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the reverse pass.
static void planner_reverse_pass() 
{
  uint8_t block_index = block_buffer_head;
    368e:	d0 90 ec 05 	lds	r13, 0x05EC
  block_t *block[3] = {NULL, NULL, NULL};
    3692:	00 e0       	ldi	r16, 0x00	; 0
    3694:	10 e0       	ldi	r17, 0x00	; 0
    3696:	c0 e0       	ldi	r28, 0x00	; 0
    3698:	d0 e0       	ldi	r29, 0x00	; 0
    369a:	76 c0       	rjmp	.+236    	; 0x3788 <planner_recalculate+0x11e>


// Returns the index of the previous block in the ring buffer
static uint8_t prev_block_index(uint8_t block_index) 
{
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
    369c:	dd 20       	and	r13, r13
    369e:	11 f4       	brne	.+4      	; 0x36a4 <planner_recalculate+0x3a>
    36a0:	32 e1       	ldi	r19, 0x12	; 18
    36a2:	d3 2e       	mov	r13, r19
  block_index--;
    36a4:	da 94       	dec	r13
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    block_index = prev_block_index( block_index );
    block[2]= block[1];
    block[1]= block[0];
    block[0] = &block_buffer[block_index];
    36a6:	8d 2d       	mov	r24, r13
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	2b e3       	ldi	r18, 0x3B	; 59
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	82 9f       	mul	r24, r18
    36b0:	10 01       	movw	r2, r0
    36b2:	83 9f       	mul	r24, r19
    36b4:	30 0c       	add	r3, r0
    36b6:	92 9f       	mul	r25, r18
    36b8:	30 0c       	add	r3, r0
    36ba:	11 24       	eor	r1, r1
    36bc:	86 ec       	ldi	r24, 0xC6	; 198
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	28 0e       	add	r2, r24
    36c2:	39 1e       	adc	r3, r25


// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
static void planner_reverse_pass_kernel(block_t *previous, block_t *current, block_t *next) 
{
  if (!current) { return; }  // Cannot operate on nothing.
    36c4:	20 97       	sbiw	r28, 0x00	; 0
    36c6:	09 f4       	brne	.+2      	; 0x36ca <planner_recalculate+0x60>
    36c8:	5d c0       	rjmp	.+186    	; 0x3784 <planner_recalculate+0x11a>
  
  if (next) { 
    36ca:	01 15       	cp	r16, r1
    36cc:	11 05       	cpc	r17, r1
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <planner_recalculate+0x68>
    36d0:	59 c0       	rjmp	.+178    	; 0x3784 <planner_recalculate+0x11a>
    // If entry speed is already at the maximum entry speed, no need to recheck. Block is cruising.
    // If not, block in state of acceleration or deceleration. Reset entry speed to maximum and 
    // check for maximum allowable speed reductions to ensure maximum possible planned speed.
    if (current->entry_speed != current->max_entry_speed) {
    36d2:	89 8c       	ldd	r8, Y+25	; 0x19
    36d4:	ba 8c       	ldd	r11, Y+26	; 0x1a
    36d6:	ab 8c       	ldd	r10, Y+27	; 0x1b
    36d8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    36da:	6d 89       	ldd	r22, Y+21	; 0x15
    36dc:	7e 89       	ldd	r23, Y+22	; 0x16
    36de:	8f 89       	ldd	r24, Y+23	; 0x17
    36e0:	98 8d       	ldd	r25, Y+24	; 0x18
    36e2:	28 2d       	mov	r18, r8
    36e4:	3b 2d       	mov	r19, r11
    36e6:	4a 2d       	mov	r20, r10
    36e8:	59 2d       	mov	r21, r9
    36ea:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    36ee:	88 23       	and	r24, r24
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <planner_recalculate+0x8a>
    36f2:	48 c0       	rjmp	.+144    	; 0x3784 <planner_recalculate+0x11a>
    
      // If nominal length true, max junction speed is guaranteed to be reached. Only compute
      // for max allowable speed if block is decelerating and nominal length is false.
      if ((!current->nominal_length_flag) && (current->max_entry_speed > next->entry_speed)) {
    36f4:	8a a1       	ldd	r24, Y+34	; 0x22
    36f6:	88 23       	and	r24, r24
    36f8:	b9 f5       	brne	.+110    	; 0x3768 <planner_recalculate+0xfe>
    36fa:	f8 01       	movw	r30, r16
    36fc:	45 88       	ldd	r4, Z+21	; 0x15
    36fe:	56 88       	ldd	r5, Z+22	; 0x16
    3700:	67 88       	ldd	r6, Z+23	; 0x17
    3702:	70 8c       	ldd	r7, Z+24	; 0x18
    3704:	68 2d       	mov	r22, r8
    3706:	7b 2d       	mov	r23, r11
    3708:	8a 2d       	mov	r24, r10
    370a:	99 2d       	mov	r25, r9
    370c:	a3 01       	movw	r20, r6
    370e:	92 01       	movw	r18, r4
    3710:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__gesf2>
    3714:	18 16       	cp	r1, r24
    3716:	44 f5       	brge	.+80     	; 0x3768 <planner_recalculate+0xfe>
        current->entry_speed = min( current->max_entry_speed,
    3718:	60 91 4f 06 	lds	r22, 0x064F
    371c:	70 91 50 06 	lds	r23, 0x0650
    3720:	80 91 51 06 	lds	r24, 0x0651
    3724:	90 91 52 06 	lds	r25, 0x0652
    3728:	90 58       	subi	r25, 0x80	; 128
    372a:	ed 8c       	ldd	r14, Y+29	; 0x1d
    372c:	fe 8c       	ldd	r15, Y+30	; 0x1e
    372e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3730:	18 a1       	ldd	r17, Y+32	; 0x20
    3732:	a3 01       	movw	r20, r6
    3734:	92 01       	movw	r18, r4
    3736:	a5 dd       	rcall	.-1206   	; 0x3282 <max_allowable_speed>
    3738:	06 2f       	mov	r16, r22
    373a:	f7 2e       	mov	r15, r23
    373c:	e8 2e       	mov	r14, r24
    373e:	c9 2e       	mov	r12, r25
    3740:	68 2d       	mov	r22, r8
    3742:	7b 2d       	mov	r23, r11
    3744:	8a 2d       	mov	r24, r10
    3746:	99 2d       	mov	r25, r9
    3748:	20 2f       	mov	r18, r16
    374a:	3f 2d       	mov	r19, r15
    374c:	4e 2d       	mov	r20, r14
    374e:	5c 2d       	mov	r21, r12
    3750:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    3754:	87 ff       	sbrs	r24, 7
    3756:	03 c0       	rjmp	.+6      	; 0x375e <planner_recalculate+0xf4>
    3758:	08 2d       	mov	r16, r8
    375a:	75 01       	movw	r14, r10
    375c:	c9 2c       	mov	r12, r9
    375e:	50 2f       	mov	r21, r16
    3760:	4f 2d       	mov	r20, r15
    3762:	3e 2d       	mov	r19, r14
    3764:	2c 2d       	mov	r18, r12
    3766:	04 c0       	rjmp	.+8      	; 0x3770 <planner_recalculate+0x106>
          max_allowable_speed(-settings.acceleration,next->entry_speed,current->millimeters));
      } else {
        current->entry_speed = current->max_entry_speed;
    3768:	58 2d       	mov	r21, r8
    376a:	4b 2d       	mov	r20, r11
    376c:	3a 2d       	mov	r19, r10
    376e:	29 2d       	mov	r18, r9
    3770:	85 2f       	mov	r24, r21
    3772:	94 2f       	mov	r25, r20
    3774:	a3 2f       	mov	r26, r19
    3776:	b2 2f       	mov	r27, r18
    3778:	8d 8b       	std	Y+21, r24	; 0x15
    377a:	9e 8b       	std	Y+22, r25	; 0x16
    377c:	af 8b       	std	Y+23, r26	; 0x17
    377e:	b8 8f       	std	Y+24, r27	; 0x18
      } 
      current->recalculate_flag = true;    
    3780:	f1 e0       	ldi	r31, 0x01	; 1
    3782:	f9 a3       	std	Y+33, r31	; 0x21
    if (current->entry_speed != current->max_entry_speed) {
    
      // If nominal length true, max junction speed is guaranteed to be reached. Only compute
      // for max allowable speed if block is decelerating and nominal length is false.
      if ((!current->nominal_length_flag) && (current->max_entry_speed > next->entry_speed)) {
        current->entry_speed = min( current->max_entry_speed,
    3784:	8e 01       	movw	r16, r28
    3786:	e1 01       	movw	r28, r2
// implements the reverse pass.
static void planner_reverse_pass() 
{
  uint8_t block_index = block_buffer_head;
  block_t *block[3] = {NULL, NULL, NULL};
  while(block_index != block_buffer_tail) {    
    3788:	80 91 c5 01 	lds	r24, 0x01C5
    378c:	d8 16       	cp	r13, r24
    378e:	09 f0       	breq	.+2      	; 0x3792 <planner_recalculate+0x128>
    3790:	85 cf       	rjmp	.-246    	; 0x369c <planner_recalculate+0x32>

// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
// implements the forward pass.
static void planner_forward_pass() 
{
  uint8_t block_index = block_buffer_tail;
    3792:	d0 90 c5 01 	lds	r13, 0x01C5
  block_t *block[3] = {NULL, NULL, NULL};
    3796:	c0 e0       	ldi	r28, 0x00	; 0
    3798:	d0 e0       	ldi	r29, 0x00	; 0
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    379e:	2b e3       	ldi	r18, 0x3B	; 59
    37a0:	e2 2e       	mov	r14, r18
    37a2:	f1 2c       	mov	r15, r1
    37a4:	12 c0       	rjmp	.+36     	; 0x37ca <planner_recalculate+0x160>
    37a6:	2d 2d       	mov	r18, r13
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	2e 9d       	mul	r18, r14
    37ac:	80 01       	movw	r16, r0
    37ae:	2f 9d       	mul	r18, r15
    37b0:	10 0d       	add	r17, r0
    37b2:	3e 9d       	mul	r19, r14
    37b4:	10 0d       	add	r17, r0
    37b6:	11 24       	eor	r1, r1
    37b8:	0a 53       	subi	r16, 0x3A	; 58
    37ba:	1e 4f       	sbci	r17, 0xFE	; 254
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    37bc:	be 01       	movw	r22, r28
    37be:	d9 de       	rcall	.-590    	; 0x3572 <planner_forward_pass_kernel.clone.1>
    block_index = next_block_index( block_index );
    37c0:	8d 2d       	mov	r24, r13
    37c2:	1f dd       	rcall	.-1474   	; 0x3202 <next_block_index>
    37c4:	d8 2e       	mov	r13, r24
    37c6:	ce 01       	movw	r24, r28
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    block[0] = block[1];
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    37c8:	e8 01       	movw	r28, r16
static void planner_forward_pass() 
{
  uint8_t block_index = block_buffer_tail;
  block_t *block[3] = {NULL, NULL, NULL};
  
  while(block_index != block_buffer_head) {
    37ca:	20 91 ec 05 	lds	r18, 0x05EC
    37ce:	d2 16       	cp	r13, r18
    37d0:	51 f7       	brne	.-44     	; 0x37a6 <planner_recalculate+0x13c>
    block[1] = block[2];
    block[2] = &block_buffer[block_index];
    planner_forward_pass_kernel(block[0],block[1],block[2]);
    block_index = next_block_index( block_index );
  }
  planner_forward_pass_kernel(block[1], block[2], NULL);
    37d2:	be 01       	movw	r22, r28
    37d4:	ce de       	rcall	.-612    	; 0x3572 <planner_forward_pass_kernel.clone.1>
// planner_recalculate() after updating the blocks. Any recalulate flagged junction will
// compute the two adjacent trapezoids to the junction, since the junction speed corresponds 
// to exit speed and entry speed of one another.
static void planner_recalculate_trapezoids() 
{
  uint8_t block_index = block_buffer_tail;
    37d6:	f0 90 c5 01 	lds	r15, 0x01C5
  block_t *current;
  block_t *next = NULL;
    37da:	c0 e0       	ldi	r28, 0x00	; 0
    37dc:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    37de:	8b e3       	ldi	r24, 0x3B	; 59
    37e0:	68 2e       	mov	r6, r24
    37e2:	71 2c       	mov	r7, r1
    37e4:	40 c0       	rjmp	.+128    	; 0x3866 <planner_recalculate+0x1fc>
    37e6:	0f 2d       	mov	r16, r15
    37e8:	10 e0       	ldi	r17, 0x00	; 0
    37ea:	06 9d       	mul	r16, r6
    37ec:	60 01       	movw	r12, r0
    37ee:	07 9d       	mul	r16, r7
    37f0:	d0 0c       	add	r13, r0
    37f2:	16 9d       	mul	r17, r6
    37f4:	d0 0c       	add	r13, r0
    37f6:	11 24       	eor	r1, r1
    37f8:	26 ec       	ldi	r18, 0xC6	; 198
    37fa:	31 e0       	ldi	r19, 0x01	; 1
    37fc:	c2 0e       	add	r12, r18
    37fe:	d3 1e       	adc	r13, r19
    if (current) {
    3800:	20 97       	sbiw	r28, 0x00	; 0
    3802:	69 f1       	breq	.+90     	; 0x385e <planner_recalculate+0x1f4>
      // Recalculate if current block entry or exit junction speed has changed.
      if (current->recalculate_flag || next->recalculate_flag) {
    3804:	89 a1       	ldd	r24, Y+33	; 0x21
    3806:	88 23       	and	r24, r24
    3808:	21 f4       	brne	.+8      	; 0x3812 <planner_recalculate+0x1a8>
    380a:	f6 01       	movw	r30, r12
    380c:	81 a1       	ldd	r24, Z+33	; 0x21
    380e:	88 23       	and	r24, r24
    3810:	31 f1       	breq	.+76     	; 0x385e <planner_recalculate+0x1f4>
        // NOTE: Entry and exit factors always > 0 by all previous logic operations.     
        calculate_trapezoid_for_block(current, current->entry_speed/current->nominal_speed,
    3812:	89 88       	ldd	r8, Y+17	; 0x11
    3814:	9a 88       	ldd	r9, Y+18	; 0x12
    3816:	ab 88       	ldd	r10, Y+19	; 0x13
    3818:	bc 88       	ldd	r11, Y+20	; 0x14
    381a:	6d 89       	ldd	r22, Y+21	; 0x15
    381c:	7e 89       	ldd	r23, Y+22	; 0x16
    381e:	8f 89       	ldd	r24, Y+23	; 0x17
    3820:	98 8d       	ldd	r25, Y+24	; 0x18
    3822:	a5 01       	movw	r20, r10
    3824:	94 01       	movw	r18, r8
    3826:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    382a:	1b 01       	movw	r2, r22
    382c:	2c 01       	movw	r4, r24
          next->entry_speed/current->nominal_speed);      
    382e:	06 9d       	mul	r16, r6
    3830:	f0 01       	movw	r30, r0
    3832:	07 9d       	mul	r16, r7
    3834:	f0 0d       	add	r31, r0
    3836:	16 9d       	mul	r17, r6
    3838:	f0 0d       	add	r31, r0
    383a:	11 24       	eor	r1, r1
    383c:	ea 53       	subi	r30, 0x3A	; 58
    383e:	fe 4f       	sbci	r31, 0xFE	; 254
    next = &block_buffer[block_index];
    if (current) {
      // Recalculate if current block entry or exit junction speed has changed.
      if (current->recalculate_flag || next->recalculate_flag) {
        // NOTE: Entry and exit factors always > 0 by all previous logic operations.     
        calculate_trapezoid_for_block(current, current->entry_speed/current->nominal_speed,
    3840:	65 89       	ldd	r22, Z+21	; 0x15
    3842:	76 89       	ldd	r23, Z+22	; 0x16
    3844:	87 89       	ldd	r24, Z+23	; 0x17
    3846:	90 8d       	ldd	r25, Z+24	; 0x18
    3848:	a5 01       	movw	r20, r10
    384a:	94 01       	movw	r18, r8
    384c:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3850:	8b 01       	movw	r16, r22
    3852:	9c 01       	movw	r18, r24
    3854:	ce 01       	movw	r24, r28
    3856:	b2 01       	movw	r22, r4
    3858:	a1 01       	movw	r20, r2
    385a:	46 dd       	rcall	.-1396   	; 0x32e8 <calculate_trapezoid_for_block>
          next->entry_speed/current->nominal_speed);      
        current->recalculate_flag = false; // Reset current only to ensure next trapezoid is computed
    385c:	19 a2       	std	Y+33, r1	; 0x21
      }
    }
    block_index = next_block_index( block_index );
    385e:	8f 2d       	mov	r24, r15
    3860:	d0 dc       	rcall	.-1632   	; 0x3202 <next_block_index>
    3862:	f8 2e       	mov	r15, r24
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    current = next;
    next = &block_buffer[block_index];
    3864:	e6 01       	movw	r28, r12
{
  uint8_t block_index = block_buffer_tail;
  block_t *current;
  block_t *next = NULL;
  
  while(block_index != block_buffer_head) {
    3866:	80 91 ec 05 	lds	r24, 0x05EC
    386a:	f8 16       	cp	r15, r24
    386c:	09 f0       	breq	.+2      	; 0x3870 <planner_recalculate+0x206>
    386e:	bb cf       	rjmp	.-138    	; 0x37e6 <planner_recalculate+0x17c>
      }
    }
    block_index = next_block_index( block_index );
  }
  // Last/newest block in buffer. Exit speed is set with MINIMUM_PLANNER_SPEED. Always recalculated.
  calculate_trapezoid_for_block(next, next->entry_speed/next->nominal_speed,
    3870:	e9 88       	ldd	r14, Y+17	; 0x11
    3872:	fa 88       	ldd	r15, Y+18	; 0x12
    3874:	0b 89       	ldd	r16, Y+19	; 0x13
    3876:	1c 89       	ldd	r17, Y+20	; 0x14
    3878:	6d 89       	ldd	r22, Y+21	; 0x15
    387a:	7e 89       	ldd	r23, Y+22	; 0x16
    387c:	8f 89       	ldd	r24, Y+23	; 0x17
    387e:	98 8d       	ldd	r25, Y+24	; 0x18
    3880:	a8 01       	movw	r20, r16
    3882:	97 01       	movw	r18, r14
    3884:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3888:	5b 01       	movw	r10, r22
    388a:	6c 01       	movw	r12, r24
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	70 e0       	ldi	r23, 0x00	; 0
    3890:	cb 01       	movw	r24, r22
    3892:	a8 01       	movw	r20, r16
    3894:	97 01       	movw	r18, r14
    3896:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    389a:	8b 01       	movw	r16, r22
    389c:	9c 01       	movw	r18, r24
    389e:	ce 01       	movw	r24, r28
    38a0:	b6 01       	movw	r22, r12
    38a2:	a5 01       	movw	r20, r10
    38a4:	21 dd       	rcall	.-1470   	; 0x32e8 <calculate_trapezoid_for_block>
    MINIMUM_PLANNER_SPEED/next->nominal_speed);
  next->recalculate_flag = false;
    38a6:	19 a2       	std	Y+33, r1	; 0x21
static void planner_recalculate() 
{     
  planner_reverse_pass();
  planner_forward_pass();
  planner_recalculate_trapezoids();
}
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	9f 90       	pop	r9
    38be:	8f 90       	pop	r8
    38c0:	7f 90       	pop	r7
    38c2:	6f 90       	pop	r6
    38c4:	5f 90       	pop	r5
    38c6:	4f 90       	pop	r4
    38c8:	3f 90       	pop	r3
    38ca:	2f 90       	pop	r2
    38cc:	08 95       	ret

000038ce <plan_reset_buffer>:

void plan_reset_buffer() 
{
  block_buffer_tail = block_buffer_head;
    38ce:	80 91 ec 05 	lds	r24, 0x05EC
    38d2:	80 93 c5 01 	sts	0x01C5, r24
  next_buffer_head = next_block_index(block_buffer_head);
    38d6:	80 91 ec 05 	lds	r24, 0x05EC
    38da:	93 dc       	rcall	.-1754   	; 0x3202 <next_block_index>
    38dc:	80 93 09 06 	sts	0x0609, r24
}
    38e0:	08 95       	ret

000038e2 <plan_init>:

void plan_init() 
{
  plan_reset_buffer();
    38e2:	f5 df       	rcall	.-22     	; 0x38ce <plan_reset_buffer>
  memset(&pl, 0, sizeof(pl)); // Clear planner struct
    38e4:	8c e1       	ldi	r24, 0x1C	; 28
    38e6:	ed ee       	ldi	r30, 0xED	; 237
    38e8:	f5 e0       	ldi	r31, 0x05	; 5
    38ea:	df 01       	movw	r26, r30
    38ec:	1d 92       	st	X+, r1
    38ee:	8a 95       	dec	r24
    38f0:	e9 f7       	brne	.-6      	; 0x38ec <plan_init+0xa>
}
    38f2:	08 95       	ret

000038f4 <plan_discard_current_block>:

inline void plan_discard_current_block() 
{
  if (block_buffer_head != block_buffer_tail) {
    38f4:	90 91 ec 05 	lds	r25, 0x05EC
    38f8:	80 91 c5 01 	lds	r24, 0x01C5
    38fc:	98 17       	cp	r25, r24
    38fe:	29 f0       	breq	.+10     	; 0x390a <plan_discard_current_block+0x16>
    block_buffer_tail = next_block_index( block_buffer_tail );
    3900:	80 91 c5 01 	lds	r24, 0x01C5
    3904:	7e dc       	rcall	.-1796   	; 0x3202 <next_block_index>
    3906:	80 93 c5 01 	sts	0x01C5, r24
    390a:	08 95       	ret

0000390c <plan_get_current_block>:
  }
}

inline block_t *plan_get_current_block() 
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    390c:	90 91 ec 05 	lds	r25, 0x05EC
    3910:	80 91 c5 01 	lds	r24, 0x01C5
    3914:	98 17       	cp	r25, r24
    3916:	79 f0       	breq	.+30     	; 0x3936 <plan_get_current_block+0x2a>
  return(&block_buffer[block_buffer_tail]);
    3918:	40 91 c5 01 	lds	r20, 0x01C5
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	8b e3       	ldi	r24, 0x3B	; 59
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	48 9f       	mul	r20, r24
    3924:	90 01       	movw	r18, r0
    3926:	49 9f       	mul	r20, r25
    3928:	30 0d       	add	r19, r0
    392a:	58 9f       	mul	r21, r24
    392c:	30 0d       	add	r19, r0
    392e:	11 24       	eor	r1, r1
    3930:	2a 53       	subi	r18, 0x3A	; 58
    3932:	3e 4f       	sbci	r19, 0xFE	; 254
    3934:	02 c0       	rjmp	.+4      	; 0x393a <plan_get_current_block+0x2e>
  }
}

inline block_t *plan_get_current_block() 
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); }
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
  return(&block_buffer[block_buffer_tail]);
}
    393a:	c9 01       	movw	r24, r18
    393c:	08 95       	ret

0000393e <plan_check_full_buffer>:

// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
    393e:	20 91 c5 01 	lds	r18, 0x01C5
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 91 09 06 	lds	r25, 0x0609
    3948:	29 13       	cpse	r18, r25
    394a:	80 e0       	ldi	r24, 0x00	; 0
  return(false);
}
    394c:	08 95       	ret

0000394e <plan_synchronize>:

// Block until all buffered steps are executed.
void plan_synchronize()
{
  while (plan_get_current_block() || sys.cycle_start) { 
    394e:	06 c0       	rjmp	.+12     	; 0x395c <plan_synchronize+0xe>
    protocol_execute_runtime();   // Check and execute run-time commands
    3950:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <protocol_execute_runtime>
    if (sys.abort) { return; } // Check for system abort
    3954:	80 91 0a 06 	lds	r24, 0x060A
    3958:	88 23       	and	r24, r24
    395a:	39 f4       	brne	.+14     	; 0x396a <plan_synchronize+0x1c>
}

// Block until all buffered steps are executed.
void plan_synchronize()
{
  while (plan_get_current_block() || sys.cycle_start) { 
    395c:	d7 df       	rcall	.-82     	; 0x390c <plan_get_current_block>
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	b9 f7       	brne	.-18     	; 0x3950 <plan_synchronize+0x2>
    3962:	80 91 32 06 	lds	r24, 0x0632
    3966:	88 23       	and	r24, r24
    3968:	99 f7       	brne	.-26     	; 0x3950 <plan_synchronize+0x2>
    396a:	08 95       	ret

0000396c <plan_buffer_line>:
// rate is taken to mean "frequency" and would complete the operation in 1/feed_rate minutes.
// All position data passed to the planner must be in terms of machine position to keep the planner 
// independent of any coordinate system changes and offsets, which are handled by the g-code parser.
// NOTE: Assumes buffer is available. Buffer checks are handled at a higher level by motion_control.
void plan_buffer_line(double x, double y, double z, double feed_rate, uint8_t invert_feed_rate) 
{
    396c:	2f 92       	push	r2
    396e:	3f 92       	push	r3
    3970:	4f 92       	push	r4
    3972:	5f 92       	push	r5
    3974:	6f 92       	push	r6
    3976:	7f 92       	push	r7
    3978:	8f 92       	push	r8
    397a:	9f 92       	push	r9
    397c:	af 92       	push	r10
    397e:	bf 92       	push	r11
    3980:	cf 92       	push	r12
    3982:	df 92       	push	r13
    3984:	ef 92       	push	r14
    3986:	ff 92       	push	r15
    3988:	0f 93       	push	r16
    398a:	1f 93       	push	r17
    398c:	df 93       	push	r29
    398e:	cf 93       	push	r28
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	ab 97       	sbiw	r28, 0x2b	; 43
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	29 01       	movw	r4, r18
    39a2:	3a 01       	movw	r6, r20
    39a4:	ae a2       	std	Y+38, r10	; 0x26
    39a6:	bf a2       	std	Y+39, r11	; 0x27
    39a8:	c8 a6       	std	Y+40, r12	; 0x28
    39aa:	d9 a6       	std	Y+41, r13	; 0x29
    39ac:	8b a6       	std	Y+43, r8	; 0x2b
  // Prepare to set up new block
  block_t *block = &block_buffer[block_buffer_head];
    39ae:	20 91 ec 05 	lds	r18, 0x05EC
    39b2:	42 2f       	mov	r20, r18
    39b4:	50 e0       	ldi	r21, 0x00	; 0
    39b6:	5a 83       	std	Y+2, r21	; 0x02
    39b8:	49 83       	std	Y+1, r20	; 0x01

  // Calculate target position in absolute steps
  int32_t target[3];
  target[X_AXIS] = lround(x*settings.steps_per_mm[X_AXIS]);
    39ba:	20 91 34 06 	lds	r18, 0x0634
    39be:	30 91 35 06 	lds	r19, 0x0635
    39c2:	40 91 36 06 	lds	r20, 0x0636
    39c6:	50 91 37 06 	lds	r21, 0x0637
    39ca:	2b 8f       	std	Y+27, r18	; 0x1b
    39cc:	3c 8f       	std	Y+28, r19	; 0x1c
    39ce:	4d 8f       	std	Y+29, r20	; 0x1d
    39d0:	5e 8f       	std	Y+30, r21	; 0x1e
    39d2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    39d6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <lround>
    39da:	6f 87       	std	Y+15, r22	; 0x0f
    39dc:	78 8b       	std	Y+16, r23	; 0x10
    39de:	89 8b       	std	Y+17, r24	; 0x11
    39e0:	9a 8b       	std	Y+18, r25	; 0x12
  target[Y_AXIS] = lround(y*settings.steps_per_mm[Y_AXIS]);
    39e2:	80 91 38 06 	lds	r24, 0x0638
    39e6:	90 91 39 06 	lds	r25, 0x0639
    39ea:	a0 91 3a 06 	lds	r26, 0x063A
    39ee:	b0 91 3b 06 	lds	r27, 0x063B
    39f2:	8b 83       	std	Y+3, r24	; 0x03
    39f4:	9c 83       	std	Y+4, r25	; 0x04
    39f6:	ad 83       	std	Y+5, r26	; 0x05
    39f8:	be 83       	std	Y+6, r27	; 0x06
    39fa:	c3 01       	movw	r24, r6
    39fc:	b2 01       	movw	r22, r4
    39fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3a00:	3c 81       	ldd	r19, Y+4	; 0x04
    3a02:	4d 81       	ldd	r20, Y+5	; 0x05
    3a04:	5e 81       	ldd	r21, Y+6	; 0x06
    3a06:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3a0a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <lround>
    3a0e:	6b 8b       	std	Y+19, r22	; 0x13
    3a10:	7c 8b       	std	Y+20, r23	; 0x14
    3a12:	8d 8b       	std	Y+21, r24	; 0x15
    3a14:	9e 8b       	std	Y+22, r25	; 0x16
  target[Z_AXIS] = lround(z*settings.steps_per_mm[Z_AXIS]);     
    3a16:	20 91 3c 06 	lds	r18, 0x063C
    3a1a:	30 91 3d 06 	lds	r19, 0x063D
    3a1e:	40 91 3e 06 	lds	r20, 0x063E
    3a22:	50 91 3f 06 	lds	r21, 0x063F
    3a26:	2f 83       	std	Y+7, r18	; 0x07
    3a28:	38 87       	std	Y+8, r19	; 0x08
    3a2a:	49 87       	std	Y+9, r20	; 0x09
    3a2c:	5a 87       	std	Y+10, r21	; 0x0a
    3a2e:	c8 01       	movw	r24, r16
    3a30:	b7 01       	movw	r22, r14
    3a32:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3a36:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <lround>
    3a3a:	6f 8b       	std	Y+23, r22	; 0x17
    3a3c:	78 8f       	std	Y+24, r23	; 0x18
    3a3e:	89 8f       	std	Y+25, r24	; 0x19
    3a40:	9a 8f       	std	Y+26, r25	; 0x1a

  // Compute direction bits for this block
  block->direction_bits = 0;
    3a42:	8b e3       	ldi	r24, 0x3B	; 59
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	49 81       	ldd	r20, Y+1	; 0x01
    3a48:	5a 81       	ldd	r21, Y+2	; 0x02
    3a4a:	48 9f       	mul	r20, r24
    3a4c:	f0 01       	movw	r30, r0
    3a4e:	49 9f       	mul	r20, r25
    3a50:	f0 0d       	add	r31, r0
    3a52:	58 9f       	mul	r21, r24
    3a54:	f0 0d       	add	r31, r0
    3a56:	11 24       	eor	r1, r1
    3a58:	ea 53       	subi	r30, 0x3A	; 58
    3a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5c:	10 82       	st	Z, r1
  if (target[X_AXIS] < pl.position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
    3a5e:	80 91 ed 05 	lds	r24, 0x05ED
    3a62:	90 91 ee 05 	lds	r25, 0x05EE
    3a66:	a0 91 ef 05 	lds	r26, 0x05EF
    3a6a:	b0 91 f0 05 	lds	r27, 0x05F0
    3a6e:	ef 84       	ldd	r14, Y+15	; 0x0f
    3a70:	f8 88       	ldd	r15, Y+16	; 0x10
    3a72:	09 89       	ldd	r16, Y+17	; 0x11
    3a74:	1a 89       	ldd	r17, Y+18	; 0x12
    3a76:	e8 16       	cp	r14, r24
    3a78:	f9 06       	cpc	r15, r25
    3a7a:	0a 07       	cpc	r16, r26
    3a7c:	1b 07       	cpc	r17, r27
    3a7e:	14 f4       	brge	.+4      	; 0x3a84 <plan_buffer_line+0x118>
    3a80:	20 e8       	ldi	r18, 0x80	; 128
    3a82:	20 83       	st	Z, r18
  if (target[Y_AXIS] < pl.position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
    3a84:	20 91 f1 05 	lds	r18, 0x05F1
    3a88:	30 91 f2 05 	lds	r19, 0x05F2
    3a8c:	40 91 f3 05 	lds	r20, 0x05F3
    3a90:	50 91 f4 05 	lds	r21, 0x05F4
    3a94:	eb 88       	ldd	r14, Y+19	; 0x13
    3a96:	fc 88       	ldd	r15, Y+20	; 0x14
    3a98:	0d 89       	ldd	r16, Y+21	; 0x15
    3a9a:	1e 89       	ldd	r17, Y+22	; 0x16
    3a9c:	e2 16       	cp	r14, r18
    3a9e:	f3 06       	cpc	r15, r19
    3aa0:	04 07       	cpc	r16, r20
    3aa2:	15 07       	cpc	r17, r21
    3aa4:	84 f4       	brge	.+32     	; 0x3ac6 <plan_buffer_line+0x15a>
    3aa6:	6b e3       	ldi	r22, 0x3B	; 59
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	09 81       	ldd	r16, Y+1	; 0x01
    3aac:	1a 81       	ldd	r17, Y+2	; 0x02
    3aae:	06 9f       	mul	r16, r22
    3ab0:	f0 01       	movw	r30, r0
    3ab2:	07 9f       	mul	r16, r23
    3ab4:	f0 0d       	add	r31, r0
    3ab6:	16 9f       	mul	r17, r22
    3ab8:	f0 0d       	add	r31, r0
    3aba:	11 24       	eor	r1, r1
    3abc:	ea 53       	subi	r30, 0x3A	; 58
    3abe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac0:	60 81       	ld	r22, Z
    3ac2:	60 62       	ori	r22, 0x20	; 32
    3ac4:	60 83       	st	Z, r22
  if (target[Z_AXIS] < pl.position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }
    3ac6:	a0 90 f5 05 	lds	r10, 0x05F5
    3aca:	b0 90 f6 05 	lds	r11, 0x05F6
    3ace:	c0 90 f7 05 	lds	r12, 0x05F7
    3ad2:	d0 90 f8 05 	lds	r13, 0x05F8
  
  // Number of steps for each axis
  block->steps_x = labs(target[X_AXIS]-pl.position[X_AXIS]);
    3ad6:	ef 84       	ldd	r14, Y+15	; 0x0f
    3ad8:	f8 88       	ldd	r15, Y+16	; 0x10
    3ada:	09 89       	ldd	r16, Y+17	; 0x11
    3adc:	1a 89       	ldd	r17, Y+18	; 0x12
    3ade:	e8 1a       	sub	r14, r24
    3ae0:	f9 0a       	sbc	r15, r25
    3ae2:	0a 0b       	sbc	r16, r26
    3ae4:	1b 0b       	sbc	r17, r27
    3ae6:	c8 01       	movw	r24, r16
    3ae8:	b7 01       	movw	r22, r14
    3aea:	ab e3       	ldi	r26, 0x3B	; 59
    3aec:	b0 e0       	ldi	r27, 0x00	; 0
    3aee:	09 81       	ldd	r16, Y+1	; 0x01
    3af0:	1a 81       	ldd	r17, Y+2	; 0x02
    3af2:	0a 9f       	mul	r16, r26
    3af4:	f0 01       	movw	r30, r0
    3af6:	0b 9f       	mul	r16, r27
    3af8:	f0 0d       	add	r31, r0
    3afa:	1a 9f       	mul	r17, r26
    3afc:	f0 0d       	add	r31, r0
    3afe:	11 24       	eor	r1, r1
    3b00:	ea 53       	subi	r30, 0x3A	; 58
    3b02:	fe 4f       	sbci	r31, 0xFE	; 254
    3b04:	7b 01       	movw	r14, r22
    3b06:	8c 01       	movw	r16, r24
    3b08:	97 ff       	sbrs	r25, 7
    3b0a:	07 c0       	rjmp	.+14     	; 0x3b1a <plan_buffer_line+0x1ae>
    3b0c:	ee 24       	eor	r14, r14
    3b0e:	ff 24       	eor	r15, r15
    3b10:	87 01       	movw	r16, r14
    3b12:	e6 1a       	sub	r14, r22
    3b14:	f7 0a       	sbc	r15, r23
    3b16:	08 0b       	sbc	r16, r24
    3b18:	19 0b       	sbc	r17, r25
    3b1a:	e1 82       	std	Z+1, r14	; 0x01
    3b1c:	f2 82       	std	Z+2, r15	; 0x02
    3b1e:	03 83       	std	Z+3, r16	; 0x03
    3b20:	14 83       	std	Z+4, r17	; 0x04
  block->steps_y = labs(target[Y_AXIS]-pl.position[Y_AXIS]);
    3b22:	4b 88       	ldd	r4, Y+19	; 0x13
    3b24:	5c 88       	ldd	r5, Y+20	; 0x14
    3b26:	6d 88       	ldd	r6, Y+21	; 0x15
    3b28:	7e 88       	ldd	r7, Y+22	; 0x16
    3b2a:	42 1a       	sub	r4, r18
    3b2c:	53 0a       	sbc	r5, r19
    3b2e:	64 0a       	sbc	r6, r20
    3b30:	75 0a       	sbc	r7, r21
    3b32:	2b e3       	ldi	r18, 0x3B	; 59
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	49 81       	ldd	r20, Y+1	; 0x01
    3b38:	5a 81       	ldd	r21, Y+2	; 0x02
    3b3a:	42 9f       	mul	r20, r18
    3b3c:	f0 01       	movw	r30, r0
    3b3e:	43 9f       	mul	r20, r19
    3b40:	f0 0d       	add	r31, r0
    3b42:	52 9f       	mul	r21, r18
    3b44:	f0 0d       	add	r31, r0
    3b46:	11 24       	eor	r1, r1
    3b48:	ea 53       	subi	r30, 0x3A	; 58
    3b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4c:	a3 01       	movw	r20, r6
    3b4e:	92 01       	movw	r18, r4
    3b50:	77 fe       	sbrs	r7, 7
    3b52:	07 c0       	rjmp	.+14     	; 0x3b62 <plan_buffer_line+0x1f6>
    3b54:	22 27       	eor	r18, r18
    3b56:	33 27       	eor	r19, r19
    3b58:	a9 01       	movw	r20, r18
    3b5a:	24 19       	sub	r18, r4
    3b5c:	35 09       	sbc	r19, r5
    3b5e:	46 09       	sbc	r20, r6
    3b60:	57 09       	sbc	r21, r7
    3b62:	25 83       	std	Z+5, r18	; 0x05
    3b64:	36 83       	std	Z+6, r19	; 0x06
    3b66:	47 83       	std	Z+7, r20	; 0x07
    3b68:	50 87       	std	Z+8, r21	; 0x08
  block->steps_z = labs(target[Z_AXIS]-pl.position[Z_AXIS]);
    3b6a:	ef 88       	ldd	r14, Y+23	; 0x17
    3b6c:	f8 8c       	ldd	r15, Y+24	; 0x18
    3b6e:	09 8d       	ldd	r16, Y+25	; 0x19
    3b70:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3b72:	ea 18       	sub	r14, r10
    3b74:	fb 08       	sbc	r15, r11
    3b76:	0c 09       	sbc	r16, r12
    3b78:	1d 09       	sbc	r17, r13
    3b7a:	eb 86       	std	Y+11, r14	; 0x0b
    3b7c:	fc 86       	std	Y+12, r15	; 0x0c
    3b7e:	0d 87       	std	Y+13, r16	; 0x0d
    3b80:	1e 87       	std	Y+14, r17	; 0x0e
    3b82:	a8 01       	movw	r20, r16
    3b84:	97 01       	movw	r18, r14
    3b86:	17 ff       	sbrs	r17, 7
    3b88:	07 c0       	rjmp	.+14     	; 0x3b98 <plan_buffer_line+0x22c>
    3b8a:	50 95       	com	r21
    3b8c:	40 95       	com	r20
    3b8e:	30 95       	com	r19
    3b90:	21 95       	neg	r18
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	4f 4f       	sbci	r20, 0xFF	; 255
    3b96:	5f 4f       	sbci	r21, 0xFF	; 255
    3b98:	ab e3       	ldi	r26, 0x3B	; 59
    3b9a:	b0 e0       	ldi	r27, 0x00	; 0
    3b9c:	09 81       	ldd	r16, Y+1	; 0x01
    3b9e:	1a 81       	ldd	r17, Y+2	; 0x02
    3ba0:	0a 9f       	mul	r16, r26
    3ba2:	f0 01       	movw	r30, r0
    3ba4:	0b 9f       	mul	r16, r27
    3ba6:	f0 0d       	add	r31, r0
    3ba8:	1a 9f       	mul	r17, r26
    3baa:	f0 0d       	add	r31, r0
    3bac:	11 24       	eor	r1, r1
    3bae:	ea 53       	subi	r30, 0x3A	; 58
    3bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb2:	21 87       	std	Z+9, r18	; 0x09
    3bb4:	32 87       	std	Z+10, r19	; 0x0a
    3bb6:	43 87       	std	Z+11, r20	; 0x0b
    3bb8:	54 87       	std	Z+12, r21	; 0x0c
  block->step_event_count = max(block->steps_x, max(block->steps_y, block->steps_z));
    3bba:	85 80       	ldd	r8, Z+5	; 0x05
    3bbc:	96 80       	ldd	r9, Z+6	; 0x06
    3bbe:	a7 80       	ldd	r10, Z+7	; 0x07
    3bc0:	b0 84       	ldd	r11, Z+8	; 0x08
    3bc2:	c1 80       	ldd	r12, Z+1	; 0x01
    3bc4:	d2 80       	ldd	r13, Z+2	; 0x02
    3bc6:	e3 80       	ldd	r14, Z+3	; 0x03
    3bc8:	f4 80       	ldd	r15, Z+4	; 0x04
    3bca:	c8 14       	cp	r12, r8
    3bcc:	d9 04       	cpc	r13, r9
    3bce:	ea 04       	cpc	r14, r10
    3bd0:	fb 04       	cpc	r15, r11
    3bd2:	10 f4       	brcc	.+4      	; 0x3bd8 <plan_buffer_line+0x26c>
    3bd4:	75 01       	movw	r14, r10
    3bd6:	64 01       	movw	r12, r8
    3bd8:	c2 16       	cp	r12, r18
    3bda:	d3 06       	cpc	r13, r19
    3bdc:	e4 06       	cpc	r14, r20
    3bde:	f5 06       	cpc	r15, r21
    3be0:	10 f4       	brcc	.+4      	; 0x3be6 <plan_buffer_line+0x27a>
    3be2:	69 01       	movw	r12, r18
    3be4:	7a 01       	movw	r14, r20
    3be6:	2b e3       	ldi	r18, 0x3B	; 59
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	49 81       	ldd	r20, Y+1	; 0x01
    3bec:	5a 81       	ldd	r21, Y+2	; 0x02
    3bee:	42 9f       	mul	r20, r18
    3bf0:	50 01       	movw	r10, r0
    3bf2:	43 9f       	mul	r20, r19
    3bf4:	b0 0c       	add	r11, r0
    3bf6:	52 9f       	mul	r21, r18
    3bf8:	b0 0c       	add	r11, r0
    3bfa:	11 24       	eor	r1, r1
    3bfc:	a6 ec       	ldi	r26, 0xC6	; 198
    3bfe:	b1 e0       	ldi	r27, 0x01	; 1
    3c00:	aa 0e       	add	r10, r26
    3c02:	bb 1e       	adc	r11, r27
    3c04:	f5 01       	movw	r30, r10
    3c06:	c5 86       	std	Z+13, r12	; 0x0d
    3c08:	d6 86       	std	Z+14, r13	; 0x0e
    3c0a:	e7 86       	std	Z+15, r14	; 0x0f
    3c0c:	f0 8a       	std	Z+16, r15	; 0x10

  // Bail if this is a zero-length block
  if (block->step_event_count == 0) { return; };
    3c0e:	c1 14       	cp	r12, r1
    3c10:	d1 04       	cpc	r13, r1
    3c12:	e1 04       	cpc	r14, r1
    3c14:	f1 04       	cpc	r15, r1
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <plan_buffer_line+0x2ae>
    3c18:	f8 c2       	rjmp	.+1520   	; 0x420a <plan_buffer_line+0x89e>
  
  // Compute path vector in terms of absolute step target and current positions
  double delta_mm[3];
  delta_mm[X_AXIS] = (target[X_AXIS]-pl.position[X_AXIS])/settings.steps_per_mm[X_AXIS];
    3c1a:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3c1e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3c20:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3c22:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3c24:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3c26:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3c2a:	6f 8f       	std	Y+31, r22	; 0x1f
    3c2c:	78 a3       	std	Y+32, r23	; 0x20
    3c2e:	89 a3       	std	Y+33, r24	; 0x21
    3c30:	9a a3       	std	Y+34, r25	; 0x22
  delta_mm[Y_AXIS] = (target[Y_AXIS]-pl.position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
    3c32:	c3 01       	movw	r24, r6
    3c34:	b2 01       	movw	r22, r4
    3c36:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c3e:	4d 81       	ldd	r20, Y+5	; 0x05
    3c40:	5e 81       	ldd	r21, Y+6	; 0x06
    3c42:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3c46:	26 2e       	mov	r2, r22
    3c48:	7b 83       	std	Y+3, r23	; 0x03
    3c4a:	8b a3       	std	Y+35, r24	; 0x23
    3c4c:	9c a3       	std	Y+36, r25	; 0x24
  delta_mm[Z_AXIS] = (target[Z_AXIS]-pl.position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
    3c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c56:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3c5a:	2f 81       	ldd	r18, Y+7	; 0x07
    3c5c:	38 85       	ldd	r19, Y+8	; 0x08
    3c5e:	49 85       	ldd	r20, Y+9	; 0x09
    3c60:	5a 85       	ldd	r21, Y+10	; 0x0a
    3c62:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3c66:	36 2e       	mov	r3, r22
    3c68:	7f 83       	std	Y+7, r23	; 0x07
    3c6a:	8d a3       	std	Y+37, r24	; 0x25
    3c6c:	9a a7       	std	Y+42, r25	; 0x2a
  block->millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + 
    3c6e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3c70:	48 a1       	ldd	r20, Y+32	; 0x20
    3c72:	39 a1       	ldd	r19, Y+33	; 0x21
    3c74:	2a a1       	ldd	r18, Y+34	; 0x22
    3c76:	65 2f       	mov	r22, r21
    3c78:	74 2f       	mov	r23, r20
    3c7a:	83 2f       	mov	r24, r19
    3c7c:	92 2f       	mov	r25, r18
    3c7e:	da 01       	movw	r26, r20
    3c80:	f9 01       	movw	r30, r18
    3c82:	2b 2f       	mov	r18, r27
    3c84:	3a 2f       	mov	r19, r26
    3c86:	4f 2f       	mov	r20, r31
    3c88:	5e 2f       	mov	r21, r30
    3c8a:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3c8e:	7b 01       	movw	r14, r22
    3c90:	8c 01       	movw	r16, r24
    3c92:	4b 81       	ldd	r20, Y+3	; 0x03
    3c94:	3b a1       	ldd	r19, Y+35	; 0x23
    3c96:	2c a1       	ldd	r18, Y+36	; 0x24
    3c98:	62 2d       	mov	r22, r2
    3c9a:	74 2f       	mov	r23, r20
    3c9c:	83 2f       	mov	r24, r19
    3c9e:	92 2f       	mov	r25, r18
    3ca0:	f9 01       	movw	r30, r18
    3ca2:	22 2d       	mov	r18, r2
    3ca4:	34 2f       	mov	r19, r20
    3ca6:	4f 2f       	mov	r20, r31
    3ca8:	5e 2f       	mov	r21, r30
    3caa:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3cae:	9b 01       	movw	r18, r22
    3cb0:	ac 01       	movw	r20, r24
    3cb2:	c8 01       	movw	r24, r16
    3cb4:	b7 01       	movw	r22, r14
    3cb6:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    3cba:	7b 01       	movw	r14, r22
    3cbc:	8c 01       	movw	r16, r24
                            delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
    3cbe:	4f 81       	ldd	r20, Y+7	; 0x07
    3cc0:	3d a1       	ldd	r19, Y+37	; 0x25
    3cc2:	2a a5       	ldd	r18, Y+42	; 0x2a
    3cc4:	63 2d       	mov	r22, r3
    3cc6:	74 2f       	mov	r23, r20
    3cc8:	83 2f       	mov	r24, r19
    3cca:	92 2f       	mov	r25, r18
    3ccc:	f9 01       	movw	r30, r18
    3cce:	23 2d       	mov	r18, r3
    3cd0:	34 2f       	mov	r19, r20
    3cd2:	4f 2f       	mov	r20, r31
    3cd4:	5e 2f       	mov	r21, r30
    3cd6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3cda:	9b 01       	movw	r18, r22
    3cdc:	ac 01       	movw	r20, r24
  // Compute path vector in terms of absolute step target and current positions
  double delta_mm[3];
  delta_mm[X_AXIS] = (target[X_AXIS]-pl.position[X_AXIS])/settings.steps_per_mm[X_AXIS];
  delta_mm[Y_AXIS] = (target[Y_AXIS]-pl.position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
  delta_mm[Z_AXIS] = (target[Z_AXIS]-pl.position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
  block->millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + 
    3cde:	c8 01       	movw	r24, r16
    3ce0:	b7 01       	movw	r22, r14
    3ce2:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__addsf3>
    3ce6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <sqrt>
    3cea:	3b 01       	movw	r6, r22
    3cec:	4c 01       	movw	r8, r24
    3cee:	d5 01       	movw	r26, r10
    3cf0:	5d 96       	adiw	r26, 0x1d	; 29
    3cf2:	6d 93       	st	X+, r22
    3cf4:	7d 93       	st	X+, r23
    3cf6:	8d 93       	st	X+, r24
    3cf8:	9c 93       	st	X, r25
    3cfa:	90 97       	sbiw	r26, 0x20	; 32
                            delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
  double inverse_millimeters = 1.0/block->millimeters;  // Inverse millimeters to remove multiple divides	
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	80 e8       	ldi	r24, 0x80	; 128
    3d02:	9f e3       	ldi	r25, 0x3F	; 63
    3d04:	a4 01       	movw	r20, r8
    3d06:	93 01       	movw	r18, r6
    3d08:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3d0c:	b6 2e       	mov	r11, r22
    3d0e:	f7 2e       	mov	r15, r23
    3d10:	a8 2e       	mov	r10, r24
    3d12:	49 2e       	mov	r4, r25
  
  // Calculate speed in mm/minute for each axis. No divide by zero due to previous checks.
  // NOTE: Minimum stepper speed is limited by MINIMUM_STEPS_PER_MINUTE in stepper.c
  double inverse_minute;
  if (!invert_feed_rate) {
    3d14:	bb a5       	ldd	r27, Y+43	; 0x2b
    3d16:	bb 23       	and	r27, r27
    3d18:	59 f4       	brne	.+22     	; 0x3d30 <plan_buffer_line+0x3c4>
    inverse_minute = feed_rate * inverse_millimeters;
    3d1a:	6e a1       	ldd	r22, Y+38	; 0x26
    3d1c:	7f a1       	ldd	r23, Y+39	; 0x27
    3d1e:	88 a5       	ldd	r24, Y+40	; 0x28
    3d20:	99 a5       	ldd	r25, Y+41	; 0x29
    3d22:	2b 2d       	mov	r18, r11
    3d24:	3f 2d       	mov	r19, r15
    3d26:	4a 2d       	mov	r20, r10
    3d28:	54 2d       	mov	r21, r4
    3d2a:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3d2e:	0a c0       	rjmp	.+20     	; 0x3d44 <plan_buffer_line+0x3d8>
  } else {
    inverse_minute = 1.0 / feed_rate;
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	80 e8       	ldi	r24, 0x80	; 128
    3d36:	9f e3       	ldi	r25, 0x3F	; 63
    3d38:	2e a1       	ldd	r18, Y+38	; 0x26
    3d3a:	3f a1       	ldd	r19, Y+39	; 0x27
    3d3c:	48 a5       	ldd	r20, Y+40	; 0x28
    3d3e:	59 a5       	ldd	r21, Y+41	; 0x29
    3d40:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3d44:	e6 2e       	mov	r14, r22
    3d46:	57 2e       	mov	r5, r23
    3d48:	6c 01       	movw	r12, r24
  }
  block->nominal_speed = block->millimeters * inverse_minute; // (mm/min) Always > 0
    3d4a:	8b e3       	ldi	r24, 0x3B	; 59
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d50:	fa 81       	ldd	r31, Y+2	; 0x02
    3d52:	e8 9f       	mul	r30, r24
    3d54:	80 01       	movw	r16, r0
    3d56:	e9 9f       	mul	r30, r25
    3d58:	10 0d       	add	r17, r0
    3d5a:	f8 9f       	mul	r31, r24
    3d5c:	10 0d       	add	r17, r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	0a 53       	subi	r16, 0x3A	; 58
    3d62:	1e 4f       	sbci	r17, 0xFE	; 254
    3d64:	98 01       	movw	r18, r16
    3d66:	2f 5e       	subi	r18, 0xEF	; 239
    3d68:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6a:	3c 8f       	std	Y+28, r19	; 0x1c
    3d6c:	2b 8f       	std	Y+27, r18	; 0x1b
    3d6e:	c4 01       	movw	r24, r8
    3d70:	b3 01       	movw	r22, r6
    3d72:	2e 2d       	mov	r18, r14
    3d74:	35 2d       	mov	r19, r5
    3d76:	4c 2d       	mov	r20, r12
    3d78:	5d 2d       	mov	r21, r13
    3d7a:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3d7e:	d8 01       	movw	r26, r16
    3d80:	51 96       	adiw	r26, 0x11	; 17
    3d82:	6d 93       	st	X+, r22
    3d84:	7d 93       	st	X+, r23
    3d86:	8d 93       	st	X+, r24
    3d88:	9c 93       	st	X, r25
    3d8a:	54 97       	sbiw	r26, 0x14	; 20
  block->nominal_rate = ceil(block->step_event_count * inverse_minute); // (step/min) Always > 0
    3d8c:	1d 96       	adiw	r26, 0x0d	; 13
    3d8e:	6d 91       	ld	r22, X+
    3d90:	7d 91       	ld	r23, X+
    3d92:	8d 91       	ld	r24, X+
    3d94:	9c 91       	ld	r25, X
    3d96:	50 97       	sbiw	r26, 0x10	; 16
    3d98:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3d9c:	2e 2d       	mov	r18, r14
    3d9e:	35 2d       	mov	r19, r5
    3da0:	4c 2d       	mov	r20, r12
    3da2:	5d 2d       	mov	r21, r13
    3da4:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3da8:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
    3dac:	0e 94 47 2b 	call	0x568e	; 0x568e <__fixunssfsi>
    3db0:	f8 01       	movw	r30, r16
    3db2:	67 ab       	std	Z+55, r22	; 0x37
    3db4:	70 af       	std	Z+56, r23	; 0x38
    3db6:	81 af       	std	Z+57, r24	; 0x39
    3db8:	92 af       	std	Z+58, r25	; 0x3a
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  // Convert universal acceleration for direction-dependent stepper rate change parameter
  block->rate_delta = ceil( block->step_event_count*inverse_millimeters *  
        settings.acceleration / (60 * ACCELERATION_TICKS_PER_SECOND )); // (step/min/acceleration_tick)
    3dba:	20 91 4f 06 	lds	r18, 0x064F
    3dbe:	30 91 50 06 	lds	r19, 0x0650
    3dc2:	40 91 51 06 	lds	r20, 0x0651
    3dc6:	50 91 52 06 	lds	r21, 0x0652
    3dca:	2b 87       	std	Y+11, r18	; 0x0b
    3dcc:	3c 87       	std	Y+12, r19	; 0x0c
    3dce:	4d 87       	std	Y+13, r20	; 0x0d
    3dd0:	5e 87       	std	Y+14, r21	; 0x0e
  // is equal to the travel/step in the particular axis. For a 45 degree line the steppers of both
  // axes might step for every step event. Travel per step event is then sqrt(travel_x^2+travel_y^2).
  // To generate trapezoids with contant acceleration between blocks the rate_delta must be computed 
  // specifically for each line to compensate for this phenomenon:
  // Convert universal acceleration for direction-dependent stepper rate change parameter
  block->rate_delta = ceil( block->step_event_count*inverse_millimeters *  
    3dd2:	65 85       	ldd	r22, Z+13	; 0x0d
    3dd4:	76 85       	ldd	r23, Z+14	; 0x0e
    3dd6:	87 85       	ldd	r24, Z+15	; 0x0f
    3dd8:	90 89       	ldd	r25, Z+16	; 0x10
    3dda:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    3dde:	2b 2d       	mov	r18, r11
    3de0:	3f 2d       	mov	r19, r15
    3de2:	4a 2d       	mov	r20, r10
    3de4:	54 2d       	mov	r21, r4
    3de6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3dea:	2b 85       	ldd	r18, Y+11	; 0x0b
    3dec:	3c 85       	ldd	r19, Y+12	; 0x0c
    3dee:	4d 85       	ldd	r20, Y+13	; 0x0d
    3df0:	5e 85       	ldd	r21, Y+14	; 0x0e
    3df2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e8       	ldi	r19, 0x80	; 128
    3dfa:	4b e3       	ldi	r20, 0x3B	; 59
    3dfc:	55 e4       	ldi	r21, 0x45	; 69
    3dfe:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    3e02:	0e 94 c0 2a 	call	0x5580	; 0x5580 <ceil>
    3e06:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    3e0a:	d8 01       	movw	r26, r16
    3e0c:	9b 96       	adiw	r26, 0x2b	; 43
    3e0e:	6d 93       	st	X+, r22
    3e10:	7d 93       	st	X+, r23
    3e12:	8d 93       	st	X+, r24
    3e14:	9c 93       	st	X, r25
    3e16:	9e 97       	sbiw	r26, 0x2e	; 46
        settings.acceleration / (60 * ACCELERATION_TICKS_PER_SECOND )); // (step/min/acceleration_tick)

  // Compute path unit vector                            
  double unit_vec[3];

  unit_vec[X_AXIS] = delta_mm[X_AXIS]*inverse_millimeters;
    3e18:	5f 8d       	ldd	r21, Y+31	; 0x1f
    3e1a:	48 a1       	ldd	r20, Y+32	; 0x20
    3e1c:	39 a1       	ldd	r19, Y+33	; 0x21
    3e1e:	2a a1       	ldd	r18, Y+34	; 0x22
    3e20:	65 2f       	mov	r22, r21
    3e22:	74 2f       	mov	r23, r20
    3e24:	83 2f       	mov	r24, r19
    3e26:	92 2f       	mov	r25, r18
    3e28:	2b 2d       	mov	r18, r11
    3e2a:	3f 2d       	mov	r19, r15
    3e2c:	4a 2d       	mov	r20, r10
    3e2e:	54 2d       	mov	r21, r4
    3e30:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3e34:	6f 8f       	std	Y+31, r22	; 0x1f
    3e36:	78 a3       	std	Y+32, r23	; 0x20
    3e38:	89 a3       	std	Y+33, r24	; 0x21
    3e3a:	9a a3       	std	Y+34, r25	; 0x22
  unit_vec[Y_AXIS] = delta_mm[Y_AXIS]*inverse_millimeters;
    3e3c:	4b 81       	ldd	r20, Y+3	; 0x03
    3e3e:	3b a1       	ldd	r19, Y+35	; 0x23
    3e40:	2c a1       	ldd	r18, Y+36	; 0x24
    3e42:	62 2d       	mov	r22, r2
    3e44:	74 2f       	mov	r23, r20
    3e46:	83 2f       	mov	r24, r19
    3e48:	92 2f       	mov	r25, r18
    3e4a:	2b 2d       	mov	r18, r11
    3e4c:	3f 2d       	mov	r19, r15
    3e4e:	4a 2d       	mov	r20, r10
    3e50:	54 2d       	mov	r21, r4
    3e52:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3e56:	6b 83       	std	Y+3, r22	; 0x03
    3e58:	7b a3       	std	Y+35, r23	; 0x23
    3e5a:	8c a3       	std	Y+36, r24	; 0x24
    3e5c:	9e a3       	std	Y+38, r25	; 0x26
  unit_vec[Z_AXIS] = delta_mm[Z_AXIS]*inverse_millimeters;  
    3e5e:	4f 81       	ldd	r20, Y+7	; 0x07
    3e60:	3d a1       	ldd	r19, Y+37	; 0x25
    3e62:	2a a5       	ldd	r18, Y+42	; 0x2a
    3e64:	63 2d       	mov	r22, r3
    3e66:	74 2f       	mov	r23, r20
    3e68:	83 2f       	mov	r24, r19
    3e6a:	92 2f       	mov	r25, r18
    3e6c:	2b 2d       	mov	r18, r11
    3e6e:	3f 2d       	mov	r19, r15
    3e70:	4a 2d       	mov	r20, r10
    3e72:	54 2d       	mov	r21, r4
    3e74:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3e78:	36 2e       	mov	r3, r22
    3e7a:	27 2e       	mov	r2, r23
    3e7c:	8f 83       	std	Y+7, r24	; 0x07
    3e7e:	9d a3       	std	Y+37, r25	; 0x25
  // from path, but used as a robust way to compute cornering speeds, as it takes into account the
  // nonlinearities of both the junction angle and junction velocity.
  double vmax_junction = MINIMUM_PLANNER_SPEED; // Set default max junction speed

  // Skip first block or when previous_nominal_speed is used as a flag for homing and offset cycles.
  if ((block_buffer_head != block_buffer_tail) && (pl.previous_nominal_speed > 0.0)) {
    3e80:	90 91 ec 05 	lds	r25, 0x05EC
    3e84:	80 91 c5 01 	lds	r24, 0x01C5
    3e88:	98 17       	cp	r25, r24
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <plan_buffer_line+0x522>
    3e8c:	dd c0       	rjmp	.+442    	; 0x4048 <plan_buffer_line+0x6dc>
    3e8e:	50 90 05 06 	lds	r5, 0x0605
    3e92:	40 90 06 06 	lds	r4, 0x0606
    3e96:	90 90 07 06 	lds	r9, 0x0607
    3e9a:	70 90 08 06 	lds	r7, 0x0608
    3e9e:	a2 01       	movw	r20, r4
    3ea0:	65 2f       	mov	r22, r21
    3ea2:	74 2f       	mov	r23, r20
    3ea4:	89 2d       	mov	r24, r9
    3ea6:	97 2d       	mov	r25, r7
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	a9 01       	movw	r20, r18
    3eae:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__gesf2>
    3eb2:	18 16       	cp	r1, r24
    3eb4:	0c f0       	brlt	.+2      	; 0x3eb8 <plan_buffer_line+0x54c>
    3eb6:	c8 c0       	rjmp	.+400    	; 0x4048 <plan_buffer_line+0x6dc>
    // Compute cosine of angle between previous and current path. (prev_unit_vec is negative)
    // NOTE: Max junction velocity is computed without sin() or acos() by trig half angle identity.
    double cos_theta = - pl.previous_unit_vec[X_AXIS] * unit_vec[X_AXIS] 
    3eb8:	60 91 f9 05 	lds	r22, 0x05F9
    3ebc:	70 91 fa 05 	lds	r23, 0x05FA
    3ec0:	80 91 fb 05 	lds	r24, 0x05FB
    3ec4:	90 91 fc 05 	lds	r25, 0x05FC
    3ec8:	90 58       	subi	r25, 0x80	; 128
    3eca:	bf 8d       	ldd	r27, Y+31	; 0x1f
    3ecc:	a8 a1       	ldd	r26, Y+32	; 0x20
    3ece:	f9 a1       	ldd	r31, Y+33	; 0x21
    3ed0:	ea a1       	ldd	r30, Y+34	; 0x22
    3ed2:	2b 2f       	mov	r18, r27
    3ed4:	3a 2f       	mov	r19, r26
    3ed6:	4f 2f       	mov	r20, r31
    3ed8:	5e 2f       	mov	r21, r30
    3eda:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3ede:	6b 01       	movw	r12, r22
    3ee0:	7c 01       	movw	r14, r24
                       - pl.previous_unit_vec[Y_AXIS] * unit_vec[Y_AXIS] 
    3ee2:	5b 81       	ldd	r21, Y+3	; 0x03
    3ee4:	4b a1       	ldd	r20, Y+35	; 0x23
    3ee6:	3c a1       	ldd	r19, Y+36	; 0x24
    3ee8:	2e a1       	ldd	r18, Y+38	; 0x26
    3eea:	65 2f       	mov	r22, r21
    3eec:	74 2f       	mov	r23, r20
    3eee:	83 2f       	mov	r24, r19
    3ef0:	92 2f       	mov	r25, r18
    3ef2:	20 91 fd 05 	lds	r18, 0x05FD
    3ef6:	30 91 fe 05 	lds	r19, 0x05FE
    3efa:	40 91 ff 05 	lds	r20, 0x05FF
    3efe:	50 91 00 06 	lds	r21, 0x0600
    3f02:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3f06:	9b 01       	movw	r18, r22
    3f08:	ac 01       	movw	r20, r24
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    3f12:	6b 01       	movw	r12, r22
    3f14:	7c 01       	movw	r14, r24
                       - pl.previous_unit_vec[Z_AXIS] * unit_vec[Z_AXIS] ;
    3f16:	a1 01       	movw	r20, r2
    3f18:	3f 81       	ldd	r19, Y+7	; 0x07
    3f1a:	2d a1       	ldd	r18, Y+37	; 0x25
    3f1c:	65 2f       	mov	r22, r21
    3f1e:	74 2f       	mov	r23, r20
    3f20:	83 2f       	mov	r24, r19
    3f22:	92 2f       	mov	r25, r18
    3f24:	20 91 01 06 	lds	r18, 0x0601
    3f28:	30 91 02 06 	lds	r19, 0x0602
    3f2c:	40 91 03 06 	lds	r20, 0x0603
    3f30:	50 91 04 06 	lds	r21, 0x0604
    3f34:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3f38:	9b 01       	movw	r18, r22
    3f3a:	ac 01       	movw	r20, r24

  // Skip first block or when previous_nominal_speed is used as a flag for homing and offset cycles.
  if ((block_buffer_head != block_buffer_tail) && (pl.previous_nominal_speed > 0.0)) {
    // Compute cosine of angle between previous and current path. (prev_unit_vec is negative)
    // NOTE: Max junction velocity is computed without sin() or acos() by trig half angle identity.
    double cos_theta = - pl.previous_unit_vec[X_AXIS] * unit_vec[X_AXIS] 
    3f3c:	c7 01       	movw	r24, r14
    3f3e:	b6 01       	movw	r22, r12
    3f40:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    3f44:	e6 2e       	mov	r14, r22
    3f46:	87 2e       	mov	r8, r23
    3f48:	68 2e       	mov	r6, r24
    3f4a:	f9 2e       	mov	r15, r25
                       - pl.previous_unit_vec[Y_AXIS] * unit_vec[Y_AXIS] 
                       - pl.previous_unit_vec[Z_AXIS] * unit_vec[Z_AXIS] ;
                         
    // Skip and use default max junction speed for 0 degree acute junction.
    if (cos_theta < 0.95) {
    3f4c:	23 e3       	ldi	r18, 0x33	; 51
    3f4e:	33 e3       	ldi	r19, 0x33	; 51
    3f50:	43 e7       	ldi	r20, 0x73	; 115
    3f52:	5f e3       	ldi	r21, 0x3F	; 63
    3f54:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    3f58:	87 ff       	sbrs	r24, 7
    3f5a:	76 c0       	rjmp	.+236    	; 0x4048 <plan_buffer_line+0x6dc>
      vmax_junction = min(pl.previous_nominal_speed,block->nominal_speed);
    3f5c:	f8 01       	movw	r30, r16
    3f5e:	d1 88       	ldd	r13, Z+17	; 0x11
    3f60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3f62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3f64:	11 96       	adiw	r26, 0x01	; 1
    3f66:	cc 90       	ld	r12, X
    3f68:	11 97       	sbiw	r26, 0x01	; 1
    3f6a:	12 96       	adiw	r26, 0x02	; 2
    3f6c:	bc 90       	ld	r11, X
    3f6e:	12 97       	sbiw	r26, 0x02	; 2
    3f70:	13 96       	adiw	r26, 0x03	; 3
    3f72:	ac 90       	ld	r10, X
    3f74:	a2 01       	movw	r20, r4
    3f76:	65 2f       	mov	r22, r21
    3f78:	74 2f       	mov	r23, r20
    3f7a:	89 2d       	mov	r24, r9
    3f7c:	97 2d       	mov	r25, r7
    3f7e:	d6 01       	movw	r26, r12
    3f80:	f5 01       	movw	r30, r10
    3f82:	2b 2f       	mov	r18, r27
    3f84:	3a 2f       	mov	r19, r26
    3f86:	4f 2f       	mov	r20, r31
    3f88:	5e 2f       	mov	r21, r30
    3f8a:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    3f8e:	87 ff       	sbrs	r24, 7
    3f90:	03 c0       	rjmp	.+6      	; 0x3f98 <plan_buffer_line+0x62c>
    3f92:	62 01       	movw	r12, r4
    3f94:	b9 2c       	mov	r11, r9
    3f96:	a7 2c       	mov	r10, r7
      // Skip and avoid divide by zero for straight junctions at 180 degrees. Limit to min() of nominal speeds.
      if (cos_theta > -0.95) {
    3f98:	6e 2d       	mov	r22, r14
    3f9a:	78 2d       	mov	r23, r8
    3f9c:	86 2d       	mov	r24, r6
    3f9e:	9f 2d       	mov	r25, r15
    3fa0:	23 e3       	ldi	r18, 0x33	; 51
    3fa2:	33 e3       	ldi	r19, 0x33	; 51
    3fa4:	43 e7       	ldi	r20, 0x73	; 115
    3fa6:	5f eb       	ldi	r21, 0xBF	; 191
    3fa8:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <__gesf2>
    3fac:	18 16       	cp	r1, r24
    3fae:	0c f0       	brlt	.+2      	; 0x3fb2 <plan_buffer_line+0x646>
    3fb0:	54 c0       	rjmp	.+168    	; 0x405a <plan_buffer_line+0x6ee>
        // Compute maximum junction velocity based on maximum acceleration and junction deviation
        double sin_theta_d2 = sqrt(0.5*(1.0-cos_theta)); // Trig half angle identity. Always positive.
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	70 e0       	ldi	r23, 0x00	; 0
    3fb6:	80 e8       	ldi	r24, 0x80	; 128
    3fb8:	9f e3       	ldi	r25, 0x3F	; 63
    3fba:	2e 2d       	mov	r18, r14
    3fbc:	38 2d       	mov	r19, r8
    3fbe:	46 2d       	mov	r20, r6
    3fc0:	5f 2d       	mov	r21, r15
    3fc2:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	5f e3       	ldi	r21, 0x3F	; 63
    3fce:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3fd2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <sqrt>
    3fd6:	7b 01       	movw	r14, r22
    3fd8:	8c 01       	movw	r16, r24
        vmax_junction = min(vmax_junction,
    3fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe2:	20 91 53 06 	lds	r18, 0x0653
    3fe6:	30 91 54 06 	lds	r19, 0x0654
    3fea:	40 91 55 06 	lds	r20, 0x0655
    3fee:	50 91 56 06 	lds	r21, 0x0656
    3ff2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3ff6:	a8 01       	movw	r20, r16
    3ff8:	97 01       	movw	r18, r14
    3ffa:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    3ffe:	3b 01       	movw	r6, r22
    4000:	4c 01       	movw	r8, r24
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	80 e8       	ldi	r24, 0x80	; 128
    4008:	9f e3       	ldi	r25, 0x3F	; 63
    400a:	a8 01       	movw	r20, r16
    400c:	97 01       	movw	r18, r14
    400e:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <__subsf3>
    4012:	9b 01       	movw	r18, r22
    4014:	ac 01       	movw	r20, r24
    4016:	c4 01       	movw	r24, r8
    4018:	b3 01       	movw	r22, r6
    401a:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    401e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <sqrt>
    4022:	06 2f       	mov	r16, r22
    4024:	f7 2e       	mov	r15, r23
    4026:	e8 2e       	mov	r14, r24
    4028:	89 2e       	mov	r8, r25
    402a:	a6 01       	movw	r20, r12
    402c:	95 01       	movw	r18, r10
    402e:	65 2f       	mov	r22, r21
    4030:	7c 2d       	mov	r23, r12
    4032:	83 2f       	mov	r24, r19
    4034:	9a 2d       	mov	r25, r10
    4036:	20 2f       	mov	r18, r16
    4038:	3f 2d       	mov	r19, r15
    403a:	4e 2d       	mov	r20, r14
    403c:	58 2d       	mov	r21, r8
    403e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    4042:	87 fd       	sbrc	r24, 7
    4044:	0a c0       	rjmp	.+20     	; 0x405a <plan_buffer_line+0x6ee>
    4046:	05 c0       	rjmp	.+10     	; 0x4052 <plan_buffer_line+0x6e6>
  // path of centripetal acceleration. Solve for max velocity based on max acceleration about the
  // radius of the circle, defined indirectly by junction deviation. This may be also viewed as 
  // path width or max_jerk in the previous grbl version. This approach does not actually deviate 
  // from path, but used as a robust way to compute cornering speeds, as it takes into account the
  // nonlinearities of both the junction angle and junction velocity.
  double vmax_junction = MINIMUM_PLANNER_SPEED; // Set default max junction speed
    4048:	dd 24       	eor	r13, r13
    404a:	cc 24       	eor	r12, r12
    404c:	bb 24       	eor	r11, r11
    404e:	aa 24       	eor	r10, r10
    4050:	04 c0       	rjmp	.+8      	; 0x405a <plan_buffer_line+0x6ee>
      vmax_junction = min(pl.previous_nominal_speed,block->nominal_speed);
      // Skip and avoid divide by zero for straight junctions at 180 degrees. Limit to min() of nominal speeds.
      if (cos_theta > -0.95) {
        // Compute maximum junction velocity based on maximum acceleration and junction deviation
        double sin_theta_d2 = sqrt(0.5*(1.0-cos_theta)); // Trig half angle identity. Always positive.
        vmax_junction = min(vmax_junction,
    4052:	d0 2e       	mov	r13, r16
    4054:	cf 2c       	mov	r12, r15
    4056:	be 2c       	mov	r11, r14
    4058:	a8 2c       	mov	r10, r8
          sqrt(settings.acceleration * settings.junction_deviation * sin_theta_d2/(1.0-sin_theta_d2)) );
      }
    }
  }
  block->max_entry_speed = vmax_junction;
    405a:	8b e3       	ldi	r24, 0x3B	; 59
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	e9 80       	ldd	r14, Y+1	; 0x01
    4060:	fa 80       	ldd	r15, Y+2	; 0x02
    4062:	e8 9e       	mul	r14, r24
    4064:	f0 01       	movw	r30, r0
    4066:	e9 9e       	mul	r14, r25
    4068:	f0 0d       	add	r31, r0
    406a:	f8 9e       	mul	r15, r24
    406c:	f0 0d       	add	r31, r0
    406e:	11 24       	eor	r1, r1
    4070:	ea 53       	subi	r30, 0x3A	; 58
    4072:	fe 4f       	sbci	r31, 0xFE	; 254
    4074:	a6 01       	movw	r20, r12
    4076:	95 01       	movw	r18, r10
    4078:	85 2f       	mov	r24, r21
    407a:	9c 2d       	mov	r25, r12
    407c:	a3 2f       	mov	r26, r19
    407e:	ba 2d       	mov	r27, r10
    4080:	81 8f       	std	Z+25, r24	; 0x19
    4082:	92 8f       	std	Z+26, r25	; 0x1a
    4084:	a3 8f       	std	Z+27, r26	; 0x1b
    4086:	b4 8f       	std	Z+28, r27	; 0x1c
  
  // Initialize block entry speed. Compute based on deceleration to user-defined MINIMUM_PLANNER_SPEED.
  double v_allowable = max_allowable_speed(-settings.acceleration,MINIMUM_PLANNER_SPEED,block->millimeters);
    4088:	6b 85       	ldd	r22, Y+11	; 0x0b
    408a:	7c 85       	ldd	r23, Y+12	; 0x0c
    408c:	8d 85       	ldd	r24, Y+13	; 0x0d
    408e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4090:	90 58       	subi	r25, 0x80	; 128
    4092:	e5 8c       	ldd	r14, Z+29	; 0x1d
    4094:	f6 8c       	ldd	r15, Z+30	; 0x1e
    4096:	07 8d       	ldd	r16, Z+31	; 0x1f
    4098:	10 a1       	ldd	r17, Z+32	; 0x20
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	a9 01       	movw	r20, r18
    40a0:	f0 d8       	rcall	.-3616   	; 0x3282 <max_allowable_speed>
    40a2:	e6 2e       	mov	r14, r22
    40a4:	87 2e       	mov	r8, r23
    40a6:	68 2e       	mov	r6, r24
    40a8:	f9 2e       	mov	r15, r25
  block->entry_speed = min(vmax_junction, v_allowable);
    40aa:	a6 01       	movw	r20, r12
    40ac:	95 01       	movw	r18, r10
    40ae:	65 2f       	mov	r22, r21
    40b0:	7c 2d       	mov	r23, r12
    40b2:	83 2f       	mov	r24, r19
    40b4:	9a 2d       	mov	r25, r10
    40b6:	2e 2d       	mov	r18, r14
    40b8:	38 2d       	mov	r19, r8
    40ba:	46 2d       	mov	r20, r6
    40bc:	5f 2d       	mov	r21, r15
    40be:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    40c2:	87 fd       	sbrc	r24, 7
    40c4:	04 c0       	rjmp	.+8      	; 0x40ce <plan_buffer_line+0x762>
    40c6:	de 2c       	mov	r13, r14
    40c8:	c8 2c       	mov	r12, r8
    40ca:	b6 2c       	mov	r11, r6
    40cc:	af 2c       	mov	r10, r15
    40ce:	8b e3       	ldi	r24, 0x3B	; 59
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	29 81       	ldd	r18, Y+1	; 0x01
    40d4:	3a 81       	ldd	r19, Y+2	; 0x02
    40d6:	28 9f       	mul	r18, r24
    40d8:	80 01       	movw	r16, r0
    40da:	29 9f       	mul	r18, r25
    40dc:	10 0d       	add	r17, r0
    40de:	38 9f       	mul	r19, r24
    40e0:	10 0d       	add	r17, r0
    40e2:	11 24       	eor	r1, r1
    40e4:	0a 53       	subi	r16, 0x3A	; 58
    40e6:	1e 4f       	sbci	r17, 0xFE	; 254
    40e8:	a6 01       	movw	r20, r12
    40ea:	95 01       	movw	r18, r10
    40ec:	85 2f       	mov	r24, r21
    40ee:	9c 2d       	mov	r25, r12
    40f0:	a3 2f       	mov	r26, r19
    40f2:	ba 2d       	mov	r27, r10
    40f4:	f8 01       	movw	r30, r16
    40f6:	85 8b       	std	Z+21, r24	; 0x15
    40f8:	96 8b       	std	Z+22, r25	; 0x16
    40fa:	a7 8b       	std	Z+23, r26	; 0x17
    40fc:	b0 8f       	std	Z+24, r27	; 0x18
  // the current block and next block junction speeds are guaranteed to always be at their maximum
  // junction speeds in deceleration and acceleration, respectively. This is due to how the current
  // block nominal speed limits both the current and next maximum junction speeds. Hence, in both
  // the reverse and forward planners, the corresponding block junction speed will always be at the
  // the maximum junction speed and may always be ignored for any speed reduction checks.
  if (block->nominal_speed <= v_allowable) { block->nominal_length_flag = true; }
    40fe:	61 89       	ldd	r22, Z+17	; 0x11
    4100:	72 89       	ldd	r23, Z+18	; 0x12
    4102:	83 89       	ldd	r24, Z+19	; 0x13
    4104:	94 89       	ldd	r25, Z+20	; 0x14
    4106:	2e 2d       	mov	r18, r14
    4108:	38 2d       	mov	r19, r8
    410a:	46 2d       	mov	r20, r6
    410c:	5f 2d       	mov	r21, r15
    410e:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <__cmpsf2>
    4112:	18 16       	cp	r1, r24
    4114:	34 f0       	brlt	.+12     	; 0x4122 <plan_buffer_line+0x7b6>
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	d8 01       	movw	r26, r16
    411a:	92 96       	adiw	r26, 0x22	; 34
    411c:	8c 93       	st	X, r24
    411e:	92 97       	sbiw	r26, 0x22	; 34
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <plan_buffer_line+0x7ba>
  else { block->nominal_length_flag = false; }
    4122:	f8 01       	movw	r30, r16
    4124:	12 a2       	std	Z+34, r1	; 0x22
  block->recalculate_flag = true; // Always calculate trapezoid for new block
    4126:	8b e3       	ldi	r24, 0x3B	; 59
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	e9 80       	ldd	r14, Y+1	; 0x01
    412c:	fa 80       	ldd	r15, Y+2	; 0x02
    412e:	e8 9e       	mul	r14, r24
    4130:	f0 01       	movw	r30, r0
    4132:	e9 9e       	mul	r14, r25
    4134:	f0 0d       	add	r31, r0
    4136:	f8 9e       	mul	r15, r24
    4138:	f0 0d       	add	r31, r0
    413a:	11 24       	eor	r1, r1
    413c:	ea 53       	subi	r30, 0x3A	; 58
    413e:	fe 4f       	sbci	r31, 0xFE	; 254
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	81 a3       	std	Z+33, r24	; 0x21
    4144:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4146:	48 a1       	ldd	r20, Y+32	; 0x20
    4148:	39 a1       	ldd	r19, Y+33	; 0x21
    414a:	2a a1       	ldd	r18, Y+34	; 0x22
    414c:	85 2f       	mov	r24, r21
    414e:	94 2f       	mov	r25, r20
    4150:	a3 2f       	mov	r26, r19
    4152:	b2 2f       	mov	r27, r18
    4154:	80 93 f9 05 	sts	0x05F9, r24
    4158:	90 93 fa 05 	sts	0x05FA, r25
    415c:	a0 93 fb 05 	sts	0x05FB, r26
    4160:	b0 93 fc 05 	sts	0x05FC, r27
    4164:	5b 81       	ldd	r21, Y+3	; 0x03
    4166:	4b a1       	ldd	r20, Y+35	; 0x23
    4168:	3c a1       	ldd	r19, Y+36	; 0x24
    416a:	2e a1       	ldd	r18, Y+38	; 0x26
    416c:	85 2f       	mov	r24, r21
    416e:	94 2f       	mov	r25, r20
    4170:	a3 2f       	mov	r26, r19
    4172:	b2 2f       	mov	r27, r18
    4174:	80 93 fd 05 	sts	0x05FD, r24
    4178:	90 93 fe 05 	sts	0x05FE, r25
    417c:	a0 93 ff 05 	sts	0x05FF, r26
    4180:	b0 93 00 06 	sts	0x0600, r27
    4184:	a1 01       	movw	r20, r2
    4186:	3f 81       	ldd	r19, Y+7	; 0x07
    4188:	2d a1       	ldd	r18, Y+37	; 0x25
    418a:	85 2f       	mov	r24, r21
    418c:	92 2d       	mov	r25, r2
    418e:	a3 2f       	mov	r26, r19
    4190:	b2 2f       	mov	r27, r18
    4192:	80 93 01 06 	sts	0x0601, r24
    4196:	90 93 02 06 	sts	0x0602, r25
    419a:	a0 93 03 06 	sts	0x0603, r26
    419e:	b0 93 04 06 	sts	0x0604, r27

  // Update previous path unit_vector and nominal speed
  memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
  pl.previous_nominal_speed = block->nominal_speed;
    41a2:	81 89       	ldd	r24, Z+17	; 0x11
    41a4:	92 89       	ldd	r25, Z+18	; 0x12
    41a6:	a3 89       	ldd	r26, Z+19	; 0x13
    41a8:	b4 89       	ldd	r27, Z+20	; 0x14
    41aa:	80 93 05 06 	sts	0x0605, r24
    41ae:	90 93 06 06 	sts	0x0606, r25
    41b2:	a0 93 07 06 	sts	0x0607, r26
    41b6:	b0 93 08 06 	sts	0x0608, r27
  
  // Update buffer head and next buffer head indices
  block_buffer_head = next_buffer_head;  
    41ba:	80 91 09 06 	lds	r24, 0x0609
    41be:	80 93 ec 05 	sts	0x05EC, r24
  next_buffer_head = next_block_index(block_buffer_head);
    41c2:	80 91 ec 05 	lds	r24, 0x05EC
    41c6:	1d d8       	rcall	.-4038   	; 0x3202 <next_block_index>
    41c8:	80 93 09 06 	sts	0x0609, r24
    41cc:	ed ee       	ldi	r30, 0xED	; 237
    41ce:	f5 e0       	ldi	r31, 0x05	; 5
    41d0:	0f 85       	ldd	r16, Y+15	; 0x0f
    41d2:	18 89       	ldd	r17, Y+16	; 0x10
    41d4:	29 89       	ldd	r18, Y+17	; 0x11
    41d6:	3a 89       	ldd	r19, Y+18	; 0x12
    41d8:	00 93 ed 05 	sts	0x05ED, r16
    41dc:	10 93 ee 05 	sts	0x05EE, r17
    41e0:	20 93 ef 05 	sts	0x05EF, r18
    41e4:	30 93 f0 05 	sts	0x05F0, r19
    41e8:	2b 89       	ldd	r18, Y+19	; 0x13
    41ea:	3c 89       	ldd	r19, Y+20	; 0x14
    41ec:	4d 89       	ldd	r20, Y+21	; 0x15
    41ee:	5e 89       	ldd	r21, Y+22	; 0x16
    41f0:	24 83       	std	Z+4, r18	; 0x04
    41f2:	35 83       	std	Z+5, r19	; 0x05
    41f4:	46 83       	std	Z+6, r20	; 0x06
    41f6:	57 83       	std	Z+7, r21	; 0x07
    41f8:	8f 89       	ldd	r24, Y+23	; 0x17
    41fa:	98 8d       	ldd	r25, Y+24	; 0x18
    41fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    41fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4200:	80 87       	std	Z+8, r24	; 0x08
    4202:	91 87       	std	Z+9, r25	; 0x09
    4204:	a2 87       	std	Z+10, r26	; 0x0a
    4206:	b3 87       	std	Z+11, r27	; 0x0b
  
  // Update planner position
  memcpy(pl.position, target, sizeof(target)); // pl.position[] = target[]

  planner_recalculate(); 
    4208:	30 da       	rcall	.-2976   	; 0x366a <planner_recalculate>
}
    420a:	ab 96       	adiw	r28, 0x2b	; 43
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	de bf       	out	0x3e, r29	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	cd bf       	out	0x3d, r28	; 61
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	1f 91       	pop	r17
    421c:	0f 91       	pop	r16
    421e:	ff 90       	pop	r15
    4220:	ef 90       	pop	r14
    4222:	df 90       	pop	r13
    4224:	cf 90       	pop	r12
    4226:	bf 90       	pop	r11
    4228:	af 90       	pop	r10
    422a:	9f 90       	pop	r9
    422c:	8f 90       	pop	r8
    422e:	7f 90       	pop	r7
    4230:	6f 90       	pop	r6
    4232:	5f 90       	pop	r5
    4234:	4f 90       	pop	r4
    4236:	3f 90       	pop	r3
    4238:	2f 90       	pop	r2
    423a:	08 95       	ret

0000423c <plan_set_current_position>:

// Reset the planner position vector (in steps). Called by the system abort routine.
void plan_set_current_position(int32_t x, int32_t y, int32_t z)
{
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
  pl.position[X_AXIS] = x;
    4244:	60 93 ed 05 	sts	0x05ED, r22
    4248:	70 93 ee 05 	sts	0x05EE, r23
    424c:	80 93 ef 05 	sts	0x05EF, r24
    4250:	90 93 f0 05 	sts	0x05F0, r25
  pl.position[Y_AXIS] = y;
    4254:	20 93 f1 05 	sts	0x05F1, r18
    4258:	30 93 f2 05 	sts	0x05F2, r19
    425c:	40 93 f3 05 	sts	0x05F3, r20
    4260:	50 93 f4 05 	sts	0x05F4, r21
  pl.position[Z_AXIS] = z;
    4264:	e0 92 f5 05 	sts	0x05F5, r14
    4268:	f0 92 f6 05 	sts	0x05F6, r15
    426c:	00 93 f7 05 	sts	0x05F7, r16
    4270:	10 93 f8 05 	sts	0x05F8, r17
}
    4274:	1f 91       	pop	r17
    4276:	0f 91       	pop	r16
    4278:	ff 90       	pop	r15
    427a:	ef 90       	pop	r14
    427c:	08 95       	ret

0000427e <plan_cycle_reinitialize>:

// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize(int32_t step_events_remaining) 
{
    427e:	af 92       	push	r10
    4280:	bf 92       	push	r11
    4282:	cf 92       	push	r12
    4284:	df 92       	push	r13
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	7b 01       	movw	r14, r22
    4294:	8c 01       	movw	r16, r24
  block_t *block = &block_buffer[block_buffer_tail]; // Point to partially completed block
    4296:	20 91 c5 01 	lds	r18, 0x01C5
    429a:	30 e0       	ldi	r19, 0x00	; 0
  
  // Only remaining millimeters and step_event_count need to be updated for planner recalculate. 
  // Other variables (step_x, step_y, step_z, rate_delta, etc.) all need to remain the same to
  // ensure the original planned motion is resumed exactly.
  block->millimeters = (block->millimeters*step_events_remaining)/block->step_event_count;
    429c:	8b e3       	ldi	r24, 0x3B	; 59
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	28 9f       	mul	r18, r24
    42a2:	e0 01       	movw	r28, r0
    42a4:	29 9f       	mul	r18, r25
    42a6:	d0 0d       	add	r29, r0
    42a8:	38 9f       	mul	r19, r24
    42aa:	d0 0d       	add	r29, r0
    42ac:	11 24       	eor	r1, r1
    42ae:	ca 53       	subi	r28, 0x3A	; 58
    42b0:	de 4f       	sbci	r29, 0xFE	; 254
    42b2:	c8 01       	movw	r24, r16
    42b4:	b7 01       	movw	r22, r14
    42b6:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    42ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    42bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    42be:	4f 8d       	ldd	r20, Y+31	; 0x1f
    42c0:	58 a1       	ldd	r21, Y+32	; 0x20
    42c2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    42c6:	5b 01       	movw	r10, r22
    42c8:	6c 01       	movw	r12, r24
    42ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    42cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    42ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d0:	98 89       	ldd	r25, Y+16	; 0x10
    42d2:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    42d6:	9b 01       	movw	r18, r22
    42d8:	ac 01       	movw	r20, r24
    42da:	c6 01       	movw	r24, r12
    42dc:	b5 01       	movw	r22, r10
    42de:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__divsf3>
    42e2:	6d 8f       	std	Y+29, r22	; 0x1d
    42e4:	7e 8f       	std	Y+30, r23	; 0x1e
    42e6:	8f 8f       	std	Y+31, r24	; 0x1f
    42e8:	98 a3       	std	Y+32, r25	; 0x20
  block->step_event_count = step_events_remaining;
    42ea:	ed 86       	std	Y+13, r14	; 0x0d
    42ec:	fe 86       	std	Y+14, r15	; 0x0e
    42ee:	0f 87       	std	Y+15, r16	; 0x0f
    42f0:	18 8b       	std	Y+16, r17	; 0x10
  
  // Re-plan from a complete stop. Reset planner entry speeds and flags.
  block->entry_speed = 0.0;
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	dc 01       	movw	r26, r24
    42f8:	8d 8b       	std	Y+21, r24	; 0x15
    42fa:	9e 8b       	std	Y+22, r25	; 0x16
    42fc:	af 8b       	std	Y+23, r26	; 0x17
    42fe:	b8 8f       	std	Y+24, r27	; 0x18
  block->max_entry_speed = 0.0;
    4300:	89 8f       	std	Y+25, r24	; 0x19
    4302:	9a 8f       	std	Y+26, r25	; 0x1a
    4304:	ab 8f       	std	Y+27, r26	; 0x1b
    4306:	bc 8f       	std	Y+28, r27	; 0x1c
  block->nominal_length_flag = false;
    4308:	1a a2       	std	Y+34, r1	; 0x22
  block->recalculate_flag = true;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	89 a3       	std	Y+33, r24	; 0x21
  planner_recalculate();  
    430e:	ad d9       	rcall	.-3238   	; 0x366a <planner_recalculate>
}
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	1f 91       	pop	r17
    4316:	0f 91       	pop	r16
    4318:	ff 90       	pop	r15
    431a:	ef 90       	pop	r14
    431c:	df 90       	pop	r13
    431e:	cf 90       	pop	r12
    4320:	bf 90       	pop	r11
    4322:	af 90       	pop	r10
    4324:	08 95       	ret

00004326 <read_double>:
#include <stdint.h>
#include <stdlib.h>
#include <util/delay.h>

int read_double(char *line, uint8_t *char_counter, double *double_ptr)                  
{
    4326:	af 92       	push	r10
    4328:	bf 92       	push	r11
    432a:	cf 92       	push	r12
    432c:	df 92       	push	r13
    432e:	ef 92       	push	r14
    4330:	ff 92       	push	r15
    4332:	0f 93       	push	r16
    4334:	1f 93       	push	r17
    4336:	df 93       	push	r29
    4338:	cf 93       	push	r28
    433a:	00 d0       	rcall	.+0      	; 0x433c <read_double+0x16>
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	6c 01       	movw	r12, r24
    4342:	7b 01       	movw	r14, r22
    4344:	5a 01       	movw	r10, r20
  char *start = line + *char_counter;
    4346:	fb 01       	movw	r30, r22
    4348:	80 81       	ld	r24, Z
    434a:	86 01       	movw	r16, r12
    434c:	08 0f       	add	r16, r24
    434e:	11 1d       	adc	r17, r1
  char *end;
  
  *double_ptr = strtod(start, &end);
    4350:	c8 01       	movw	r24, r16
    4352:	be 01       	movw	r22, r28
    4354:	6f 5f       	subi	r22, 0xFF	; 255
    4356:	7f 4f       	sbci	r23, 0xFF	; 255
    4358:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <strtod>
    435c:	f5 01       	movw	r30, r10
    435e:	60 83       	st	Z, r22
    4360:	71 83       	std	Z+1, r23	; 0x01
    4362:	82 83       	std	Z+2, r24	; 0x02
    4364:	93 83       	std	Z+3, r25	; 0x03
  if(end == start) { 
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	9a 81       	ldd	r25, Y+2	; 0x02
    436a:	80 17       	cp	r24, r16
    436c:	91 07       	cpc	r25, r17
    436e:	31 f0       	breq	.+12     	; 0x437c <read_double+0x56>
    return(false); 
  };

  *char_counter = end - line;
    4370:	8c 19       	sub	r24, r12
    4372:	f7 01       	movw	r30, r14
    4374:	80 83       	st	Z, r24
  return(true);
    4376:	21 e0       	ldi	r18, 0x01	; 1
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <read_double+0x5a>
  char *start = line + *char_counter;
  char *end;
  
  *double_ptr = strtod(start, &end);
  if(end == start) { 
    return(false); 
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
  };

  *char_counter = end - line;
  return(true);
}
    4380:	c9 01       	movw	r24, r18
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	df 90       	pop	r13
    4394:	cf 90       	pop	r12
    4396:	bf 90       	pop	r11
    4398:	af 90       	pop	r10
    439a:	08 95       	ret

0000439c <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms) 
{
  while ( ms-- ) { _delay_ms(1); }
    439c:	07 c0       	rjmp	.+14     	; 0x43ac <delay_ms+0x10>
    439e:	ef e9       	ldi	r30, 0x9F	; 159
    43a0:	ff e0       	ldi	r31, 0x0F	; 15
    43a2:	31 97       	sbiw	r30, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <delay_ms+0x6>
    43a6:	00 c0       	rjmp	.+0      	; 0x43a8 <delay_ms+0xc>
    43a8:	00 00       	nop
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	b9 f7       	brne	.-18     	; 0x439e <delay_ms+0x2>
}
    43b0:	08 95       	ret

000043b2 <homing_cycle>:
  // First home the Z axis
  uint32_t step_delay = microseconds_per_pulse - settings.pulse_microseconds;
  uint8_t out_bits = DIRECTION_MASK;
  uint8_t limit_bits;
  
  if (x_axis) { out_bits |= (1<<X_STEP_BIT); }
    43b2:	88 23       	and	r24, r24
    43b4:	11 f4       	brne	.+4      	; 0x43ba <homing_cycle+0x8>
}

static void homing_cycle(bool x_axis, bool y_axis, bool z_axis, bool reverse_direction, uint32_t microseconds_per_pulse) {
  // First home the Z axis
  uint32_t step_delay = microseconds_per_pulse - settings.pulse_microseconds;
  uint8_t out_bits = DIRECTION_MASK;
    43b6:	30 ea       	ldi	r19, 0xA0	; 160
    43b8:	01 c0       	rjmp	.+2      	; 0x43bc <homing_cycle+0xa>
  uint8_t limit_bits;
  
  if (x_axis) { out_bits |= (1<<X_STEP_BIT); }
    43ba:	30 ee       	ldi	r19, 0xE0	; 224
  if (y_axis) { out_bits |= (1<<Y_STEP_BIT); }
    43bc:	61 11       	cpse	r22, r1
    43be:	30 61       	ori	r19, 0x10	; 16
  if (z_axis) { out_bits |= (1<<Z_STEP_BIT); }
  
  // Invert direction bits if this is a reverse homing_cycle
  if (reverse_direction) {
    43c0:	22 23       	and	r18, r18
    43c2:	11 f0       	breq	.+4      	; 0x43c8 <homing_cycle+0x16>
    out_bits ^= DIRECTION_MASK;
    43c4:	90 ea       	ldi	r25, 0xA0	; 160
    43c6:	39 27       	eor	r19, r25
  
  // Apply the global invert mask
  out_bits ^= settings.invert_mask;
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    43c8:	25 b1       	in	r18, 0x05	; 5
  if (reverse_direction) {
    out_bits ^= DIRECTION_MASK;
  }
  
  // Apply the global invert mask
  out_bits ^= settings.invert_mask;
    43ca:	90 91 4a 06 	lds	r25, 0x064A
    43ce:	93 27       	eor	r25, r19
  
  // Set direction pins
  STEPPING_PORT = (STEPPING_PORT & ~DIRECTION_MASK) | (out_bits & DIRECTION_MASK);
    43d0:	90 7a       	andi	r25, 0xA0	; 160
    43d2:	2f 75       	andi	r18, 0x5F	; 95
    43d4:	92 2b       	or	r25, r18
    43d6:	95 b9       	out	0x05, r25	; 5
  
  for(;;) {
    limit_bits = LIMIT_PIN;
    43d8:	99 b1       	in	r25, 0x09	; 9
    if (reverse_direction) {         
      // Invert limit_bits if this is a reverse homing_cycle
      limit_bits ^= LIMIT_MASK;
    }
    if (x_axis && !(LIMIT_PIN & (1<<X_LIMIT_BIT))) {
    43da:	81 11       	cpse	r24, r1
    43dc:	89 b1       	in	r24, 0x09	; 9
      x_axis = false;
      out_bits ^= (1<<X_STEP_BIT);      
    }    
    if (y_axis && !(LIMIT_PIN & (1<<Y_LIMIT_BIT))) {
    43de:	61 11       	cpse	r22, r1
    43e0:	89 b1       	in	r24, 0x09	; 9
      y_axis = false;
      out_bits ^= (1<<Y_STEP_BIT);
    }    
    if (z_axis && !(LIMIT_PIN & (1<<Z_LIMIT_BIT))) {
    43e2:	41 11       	cpse	r20, r1
    43e4:	89 b1       	in	r24, 0x09	; 9
    43e6:	08 95       	ret

000043e8 <approach_limit_switch>:
    delay_us(step_delay);
  }
  return;
}

static void approach_limit_switch(bool x, bool y, bool z) {
    43e8:	ef 92       	push	r14
    43ea:	ff 92       	push	r15
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
  homing_cycle(x, y, z, false, 100000);
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	90 ea       	ldi	r25, 0xA0	; 160
    43f4:	e9 2e       	mov	r14, r25
    43f6:	96 e8       	ldi	r25, 0x86	; 134
    43f8:	f9 2e       	mov	r15, r25
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	09 2f       	mov	r16, r25
    43fe:	11 2d       	mov	r17, r1
    4400:	d8 df       	rcall	.-80     	; 0x43b2 <homing_cycle>
}
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	ff 90       	pop	r15
    4408:	ef 90       	pop	r14
    440a:	08 95       	ret

0000440c <limits_init>:

// TODO: Deprecated. Need to update for new version. Sys.position now tracks position relative
// to the home position. Limits should update this vector directly.

void limits_init() {
  LIMIT_DDR &= ~(LIMIT_MASK);
    440c:	8a b1       	in	r24, 0x0a	; 10
    440e:	8a b9       	out	0x0a, r24	; 10
}
    4410:	08 95       	ret

00004412 <limits_go_home>:

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
}

void limits_go_home() {
    4412:	ef 92       	push	r14
    4414:	ff 92       	push	r15
    4416:	0f 93       	push	r16
    4418:	1f 93       	push	r17
  plan_synchronize();
    441a:	99 da       	rcall	.-2766   	; 0x394e <plan_synchronize>
  // Store the current limit switch state
  uint8_t original_limit_state = LIMIT_PIN;
    441c:	89 b1       	in	r24, 0x09	; 9
  approach_limit_switch(false, false, true); // First home the z axis
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	41 e0       	ldi	r20, 0x01	; 1
    4424:	e1 df       	rcall	.-62     	; 0x43e8 <approach_limit_switch>
  approach_limit_switch(true, true, false);  // Then home the x and y axis
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	61 e0       	ldi	r22, 0x01	; 1
    442a:	40 e0       	ldi	r20, 0x00	; 0
    442c:	dd df       	rcall	.-70     	; 0x43e8 <approach_limit_switch>
  // Xor previous and current limit switch state to determine which were high then but have become 
  // low now. These are the actual installed limit switches.
  uint8_t limit_switches_present = (original_limit_state ^ LIMIT_PIN) & LIMIT_MASK;
    442e:	89 b1       	in	r24, 0x09	; 9
static void approach_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, false, 100000);
}

static void leave_limit_switch(bool x, bool y, bool z) {
  homing_cycle(x, y, z, true, 500000);
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	40 e0       	ldi	r20, 0x00	; 0
    4436:	21 e0       	ldi	r18, 0x01	; 1
    4438:	30 e2       	ldi	r19, 0x20	; 32
    443a:	e3 2e       	mov	r14, r19
    443c:	31 ea       	ldi	r19, 0xA1	; 161
    443e:	f3 2e       	mov	r15, r19
    4440:	37 e0       	ldi	r19, 0x07	; 7
    4442:	03 2f       	mov	r16, r19
    4444:	11 2d       	mov	r17, r1
    4446:	b5 df       	rcall	.-150    	; 0x43b2 <homing_cycle>
  // Now carefully leave the limit switches
  leave_limit_switch(
    limit_switches_present & (1<<X_LIMIT_BIT), 
    limit_switches_present & (1<<Y_LIMIT_BIT),
    limit_switches_present & (1<<Z_LIMIT_BIT));
}
    4448:	1f 91       	pop	r17
    444a:	0f 91       	pop	r16
    444c:	ff 90       	pop	r15
    444e:	ef 90       	pop	r14
    4450:	08 95       	ret

00004452 <print_uint32_base10>:
	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
}

static void print_uint32_base10(unsigned long n)
{ 
    4452:	8f 92       	push	r8
    4454:	9f 92       	push	r9
    4456:	af 92       	push	r10
    4458:	bf 92       	push	r11
    445a:	cf 92       	push	r12
    445c:	df 92       	push	r13
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	1f 93       	push	r17
    4464:	df 93       	push	r29
    4466:	cf 93       	push	r28
    4468:	cd b7       	in	r28, 0x3d	; 61
    446a:	de b7       	in	r29, 0x3e	; 62
    446c:	a0 97       	sbiw	r28, 0x20	; 32
    446e:	0f b6       	in	r0, 0x3f	; 63
    4470:	f8 94       	cli
    4472:	de bf       	out	0x3e, r29	; 62
    4474:	0f be       	out	0x3f, r0	; 63
    4476:	cd bf       	out	0x3d, r28	; 61
  unsigned char buf[32]; 
  uint8_t i = 0;
  
  if (n == 0) {
    4478:	61 15       	cp	r22, r1
    447a:	71 05       	cpc	r23, r1
    447c:	81 05       	cpc	r24, r1
    447e:	91 05       	cpc	r25, r1
    4480:	21 f4       	brne	.+8      	; 0x448a <print_uint32_base10+0x38>
    serial_write('0');
    4482:	80 e3       	ldi	r24, 0x30	; 48
    4484:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    return;
    4488:	26 c0       	rjmp	.+76     	; 0x44d6 <print_uint32_base10+0x84>
static void print_uint32_base10(unsigned long n)
{ 
  unsigned char buf[32]; 
  uint8_t i = 0;
  
  if (n == 0) {
    448a:	10 e0       	ldi	r17, 0x00	; 0
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    buf[i++] = n % 10;
    448c:	4e 01       	movw	r8, r28
    448e:	08 94       	sec
    4490:	81 1c       	adc	r8, r1
    4492:	91 1c       	adc	r9, r1
    4494:	2a e0       	ldi	r18, 0x0A	; 10
    4496:	c2 2e       	mov	r12, r18
    4498:	d1 2c       	mov	r13, r1
    449a:	e1 2c       	mov	r14, r1
    449c:	f1 2c       	mov	r15, r1
    449e:	54 01       	movw	r10, r8
    44a0:	a1 0e       	add	r10, r17
    44a2:	b1 1c       	adc	r11, r1
    44a4:	a7 01       	movw	r20, r14
    44a6:	96 01       	movw	r18, r12
    44a8:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__udivmodsi4>
    44ac:	f5 01       	movw	r30, r10
    44ae:	60 83       	st	Z, r22
    44b0:	1f 5f       	subi	r17, 0xFF	; 255
    n /= 10;
    44b2:	b9 01       	movw	r22, r18
    44b4:	ca 01       	movw	r24, r20
  if (n == 0) {
    serial_write('0');
    return;
  } 
  
  while (n > 0) {
    44b6:	61 15       	cp	r22, r1
    44b8:	71 05       	cpc	r23, r1
    44ba:	81 05       	cpc	r24, r1
    44bc:	91 05       	cpc	r25, r1
    44be:	79 f7       	brne	.-34     	; 0x449e <print_uint32_base10+0x4c>
    44c0:	08 c0       	rjmp	.+16     	; 0x44d2 <print_uint32_base10+0x80>
    buf[i++] = n % 10;
    n /= 10;
  }
  
  for (; i > 0; i--)
    serial_write('0' + buf[i - 1]);
    44c2:	fe 01       	movw	r30, r28
    44c4:	e1 0f       	add	r30, r17
    44c6:	f1 1d       	adc	r31, r1
    44c8:	80 81       	ld	r24, Z
    44ca:	80 5d       	subi	r24, 0xD0	; 208
    44cc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
  while (n > 0) {
    buf[i++] = n % 10;
    n /= 10;
  }
  
  for (; i > 0; i--)
    44d0:	11 50       	subi	r17, 0x01	; 1
    44d2:	11 23       	and	r17, r17
    44d4:	b1 f7       	brne	.-20     	; 0x44c2 <print_uint32_base10+0x70>
    serial_write('0' + buf[i - 1]);
}
    44d6:	a0 96       	adiw	r28, 0x20	; 32
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	cf 91       	pop	r28
    44e4:	df 91       	pop	r29
    44e6:	1f 91       	pop	r17
    44e8:	ff 90       	pop	r15
    44ea:	ef 90       	pop	r14
    44ec:	df 90       	pop	r13
    44ee:	cf 90       	pop	r12
    44f0:	bf 90       	pop	r11
    44f2:	af 90       	pop	r10
    44f4:	9f 90       	pop	r9
    44f6:	8f 90       	pop	r8
    44f8:	08 95       	ret

000044fa <printString>:
#include <avr/pgmspace.h>
#include "config.h"
#include "serial.h"

void printString(const char *s)
{
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	cf 93       	push	r28
    4500:	df 93       	push	r29
    4502:	e8 2e       	mov	r14, r24
    4504:	e7 01       	movw	r28, r14
    4506:	7e 01       	movw	r14, r28
    4508:	f9 2e       	mov	r15, r25
    450a:	e7 01       	movw	r28, r14
  while (*s)
    450c:	02 c0       	rjmp	.+4      	; 0x4512 <printString+0x18>
    serial_write(*s++);
    450e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
#include "config.h"
#include "serial.h"

void printString(const char *s)
{
  while (*s)
    4512:	89 91       	ld	r24, Y+
    4514:	88 23       	and	r24, r24
    4516:	d9 f7       	brne	.-10     	; 0x450e <printString+0x14>
    serial_write(*s++);
}
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	ff 90       	pop	r15
    451e:	ef 90       	pop	r14
    4520:	08 95       	ret

00004522 <printPgmString>:

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	ec 01       	movw	r28, r24
  char c;
  while ((c = pgm_read_byte_near(s++)))
    4528:	02 c0       	rjmp	.+4      	; 0x452e <printPgmString+0xc>
    serial_write(c);
    452a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    452e:	fe 01       	movw	r30, r28

// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
  char c;
  while ((c = pgm_read_byte_near(s++)))
    4530:	21 96       	adiw	r28, 0x01	; 1
    4532:	84 91       	lpm	r24, Z+
    4534:	88 23       	and	r24, r24
    4536:	c9 f7       	brne	.-14     	; 0x452a <printPgmString+0x8>
    serial_write(c);
}
    4538:	df 91       	pop	r29
    453a:	cf 91       	pop	r28
    453c:	08 95       	ret

0000453e <print_uint8_base2>:
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
{ 
    453e:	ef 92       	push	r14
    4540:	ff 92       	push	r15
    4542:	0f 93       	push	r16
    4544:	1f 93       	push	r17
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	28 97       	sbiw	r28, 0x08	; 8
    4550:	0f b6       	in	r0, 0x3f	; 63
    4552:	f8 94       	cli
    4554:	de bf       	out	0x3e, r29	; 62
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	cd bf       	out	0x3d, r28	; 61
    455a:	fe 01       	movw	r30, r28
    455c:	31 96       	adiw	r30, 0x01	; 1
// 		serial_write(buf[i - 1] < 10 ?
// 			'0' + buf[i - 1] :
// 			'A' + buf[i - 1] - 10);
// }

void print_uint8_base2(uint8_t n)
    455e:	7f 01       	movw	r14, r30
    4560:	9e 01       	movw	r18, r28
    4562:	27 5f       	subi	r18, 0xF7	; 247
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
		buf[i] = n & 1;
    4566:	98 2f       	mov	r25, r24
    4568:	91 70       	andi	r25, 0x01	; 1
    456a:	91 93       	st	Z+, r25
		n >>= 1;
    456c:	86 95       	lsr	r24
void print_uint8_base2(uint8_t n)
{ 
	unsigned char buf[8];
	uint8_t i = 0;

	for (; i < 8; i++) {
    456e:	e2 17       	cp	r30, r18
    4570:	f3 07       	cpc	r31, r19
    4572:	c9 f7       	brne	.-14     	; 0x4566 <print_uint8_base2+0x28>
    4574:	8e 01       	movw	r16, r28
    4576:	07 5f       	subi	r16, 0xF7	; 247
    4578:	1f 4f       	sbci	r17, 0xFF	; 255
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
		serial_write('0' + buf[i - 1]);
    457a:	f8 01       	movw	r30, r16
    457c:	82 91       	ld	r24, -Z
    457e:	8f 01       	movw	r16, r30
    4580:	80 5d       	subi	r24, 0xD0	; 208
    4582:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
	for (; i < 8; i++) {
		buf[i] = n & 1;
		n >>= 1;
	}

	for (; i > 0; i--)
    4586:	0e 15       	cp	r16, r14
    4588:	1f 05       	cpc	r17, r15
    458a:	b9 f7       	brne	.-18     	; 0x457a <print_uint8_base2+0x3c>
		serial_write('0' + buf[i - 1]);
}
    458c:	28 96       	adiw	r28, 0x08	; 8
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	f8 94       	cli
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	cd bf       	out	0x3d, r28	; 61
    4598:	cf 91       	pop	r28
    459a:	df 91       	pop	r29
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	ff 90       	pop	r15
    45a2:	ef 90       	pop	r14
    45a4:	08 95       	ret

000045a6 <printInteger>:
  for (; i > 0; i--)
    serial_write('0' + buf[i - 1]);
}

void printInteger(long n)
{
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	7b 01       	movw	r14, r22
    45b0:	8c 01       	movw	r16, r24
  if (n < 0) {
    45b2:	97 ff       	sbrs	r25, 7
    45b4:	0b c0       	rjmp	.+22     	; 0x45cc <printInteger+0x26>
    serial_write('-');
    45b6:	8d e2       	ldi	r24, 0x2D	; 45
    45b8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    n = -n;
    45bc:	10 95       	com	r17
    45be:	00 95       	com	r16
    45c0:	f0 94       	com	r15
    45c2:	e0 94       	com	r14
    45c4:	e1 1c       	adc	r14, r1
    45c6:	f1 1c       	adc	r15, r1
    45c8:	01 1d       	adc	r16, r1
    45ca:	11 1d       	adc	r17, r1
  }
  print_uint32_base10(n);
    45cc:	c8 01       	movw	r24, r16
    45ce:	b7 01       	movw	r22, r14
    45d0:	40 df       	rcall	.-384    	; 0x4452 <print_uint32_base10>
}
    45d2:	1f 91       	pop	r17
    45d4:	0f 91       	pop	r16
    45d6:	ff 90       	pop	r15
    45d8:	ef 90       	pop	r14
    45da:	08 95       	ret

000045dc <printFloat>:

void printFloat(double n)
{
    45dc:	af 92       	push	r10
    45de:	bf 92       	push	r11
    45e0:	cf 92       	push	r12
    45e2:	df 92       	push	r13
    45e4:	ef 92       	push	r14
    45e6:	ff 92       	push	r15
    45e8:	0f 93       	push	r16
    45ea:	1f 93       	push	r17
    45ec:	7b 01       	movw	r14, r22
    45ee:	8c 01       	movw	r16, r24
  if (n < 0) {
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	a9 01       	movw	r20, r18
    45f6:	d7 d7       	rcall	.+4014   	; 0x55a6 <__cmpsf2>
    45f8:	87 ff       	sbrs	r24, 7
    45fa:	07 c0       	rjmp	.+14     	; 0x460a <printFloat+0x2e>
    serial_write('-');
    45fc:	8d e2       	ldi	r24, 0x2D	; 45
    45fe:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    n = -n;
    4602:	17 fb       	bst	r17, 7
    4604:	10 95       	com	r17
    4606:	17 f9       	bld	r17, 7
    4608:	10 95       	com	r17
  }
  n += 0.5/DECIMAL_MULTIPLIER; // Add rounding factor
    460a:	c8 01       	movw	r24, r16
    460c:	b7 01       	movw	r22, r14
    460e:	2a e0       	ldi	r18, 0x0A	; 10
    4610:	37 ed       	ldi	r19, 0xD7	; 215
    4612:	43 ea       	ldi	r20, 0xA3	; 163
    4614:	5b e3       	ldi	r21, 0x3B	; 59
    4616:	ee d6       	rcall	.+3548   	; 0x53f4 <__addsf3>
    4618:	5b 01       	movw	r10, r22
    461a:	6c 01       	movw	r12, r24
 
  long integer_part;
  integer_part = (int)n;
    461c:	7b 2d       	mov	r23, r11
    461e:	9d 2d       	mov	r25, r13
    4620:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    4624:	7b 01       	movw	r14, r22
    4626:	00 27       	eor	r16, r16
    4628:	f7 fc       	sbrc	r15, 7
    462a:	00 95       	com	r16
    462c:	10 2f       	mov	r17, r16
  print_uint32_base10(integer_part);
    462e:	c8 01       	movw	r24, r16
    4630:	b7 01       	movw	r22, r14
    4632:	0f df       	rcall	.-482    	; 0x4452 <print_uint32_base10>
  
  serial_write('.');
    4634:	8e e2       	ldi	r24, 0x2E	; 46
    4636:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
  
  n -= integer_part;
    463a:	c8 01       	movw	r24, r16
    463c:	b7 01       	movw	r22, r14
    463e:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    4642:	9b 01       	movw	r18, r22
    4644:	ac 01       	movw	r20, r24
    4646:	6a 2d       	mov	r22, r10
    4648:	7b 2d       	mov	r23, r11
    464a:	8c 2d       	mov	r24, r12
    464c:	9d 2d       	mov	r25, r13
    464e:	d1 d6       	rcall	.+3490   	; 0x53f2 <__subsf3>
  int decimals = DECIMAL_PLACES;  
  uint8_t decimal_part;  
  while(decimals-- > 0) {
    n *= 10;
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	40 e2       	ldi	r20, 0x20	; 32
    4656:	51 e4       	ldi	r21, 0x41	; 65
    4658:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    465c:	b6 2e       	mov	r11, r22
    465e:	c7 2e       	mov	r12, r23
    4660:	d8 2e       	mov	r13, r24
    4662:	e9 2e       	mov	r14, r25
    decimal_part = (int) n;
    4664:	76 2f       	mov	r23, r22
    4666:	27 2f       	mov	r18, r23
    4668:	3c 2d       	mov	r19, r12
    466a:	4d 2d       	mov	r20, r13
    466c:	5e 2d       	mov	r21, r14
    466e:	ca 01       	movw	r24, r20
    4670:	b9 01       	movw	r22, r18
    4672:	0e 94 42 2b 	call	0x5684	; 0x5684 <__fixsfsi>
    4676:	16 2f       	mov	r17, r22
    serial_write('0'+decimal_part);
    4678:	86 2f       	mov	r24, r22
    467a:	80 5d       	subi	r24, 0xD0	; 208
    467c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    n -= decimal_part;
    4680:	61 2f       	mov	r22, r17
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	88 27       	eor	r24, r24
    4686:	77 fd       	sbrc	r23, 7
    4688:	80 95       	com	r24
    468a:	98 2f       	mov	r25, r24
    468c:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__floatsisf>
    4690:	9b 01       	movw	r18, r22
    4692:	ac 01       	movw	r20, r24
    4694:	6b 2d       	mov	r22, r11
    4696:	7c 2d       	mov	r23, r12
    4698:	8d 2d       	mov	r24, r13
    469a:	9e 2d       	mov	r25, r14
    469c:	aa d6       	rcall	.+3412   	; 0x53f2 <__subsf3>
  
  n -= integer_part;
  int decimals = DECIMAL_PLACES;  
  uint8_t decimal_part;  
  while(decimals-- > 0) {
    n *= 10;
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	40 e2       	ldi	r20, 0x20	; 32
    46a4:	51 e4       	ldi	r21, 0x41	; 65
    46a6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__mulsf3>
    decimal_part = (int) n;
    46aa:	ec d7       	rcall	.+4056   	; 0x5684 <__fixsfsi>
    serial_write('0'+decimal_part);
    46ac:	86 2f       	mov	r24, r22
    46ae:	80 5d       	subi	r24, 0xD0	; 208
    46b0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <serial_write>
    n -= decimal_part;
  }
}
    46b4:	1f 91       	pop	r17
    46b6:	0f 91       	pop	r16
    46b8:	ff 90       	pop	r15
    46ba:	ef 90       	pop	r14
    46bc:	df 90       	pop	r13
    46be:	cf 90       	pop	r12
    46c0:	bf 90       	pop	r11
    46c2:	af 90       	pop	r10
    46c4:	08 95       	ret

000046c6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    46c6:	92 30       	cpi	r25, 0x02	; 2
    46c8:	29 f0       	breq	.+10     	; 0x46d4 <CALLBACK_USB_GetDescriptor+0xe>
    46ca:	93 30       	cpi	r25, 0x03	; 3
    46cc:	41 f0       	breq	.+16     	; 0x46de <CALLBACK_USB_GetDescriptor+0x18>
    46ce:	91 30       	cpi	r25, 0x01	; 1
    46d0:	e9 f4       	brne	.+58     	; 0x470c <CALLBACK_USB_GetDescriptor+0x46>
    46d2:	17 c0       	rjmp	.+46     	; 0x4702 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    46d4:	2e e3       	ldi	r18, 0x3E	; 62
    46d6:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    46d8:	ea e1       	ldi	r30, 0x1A	; 26
    46da:	f4 e0       	ldi	r31, 0x04	; 4
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    46dc:	1b c0       	rjmp	.+54     	; 0x4714 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
    46de:	81 30       	cpi	r24, 0x01	; 1
    46e0:	41 f0       	breq	.+16     	; 0x46f2 <CALLBACK_USB_GetDescriptor+0x2c>
    46e2:	81 30       	cpi	r24, 0x01	; 1
    46e4:	18 f0       	brcs	.+6      	; 0x46ec <CALLBACK_USB_GetDescriptor+0x26>
    46e6:	82 30       	cpi	r24, 0x02	; 2
    46e8:	89 f4       	brne	.+34     	; 0x470c <CALLBACK_USB_GetDescriptor+0x46>
    46ea:	06 c0       	rjmp	.+12     	; 0x46f8 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    46ec:	e8 e5       	ldi	r30, 0x58	; 88
    46ee:	f4 e0       	ldi	r31, 0x04	; 4
    46f0:	05 c0       	rjmp	.+10     	; 0x46fc <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    46f2:	ec e5       	ldi	r30, 0x5C	; 92
    46f4:	f4 e0       	ldi	r31, 0x04	; 4
    46f6:	02 c0       	rjmp	.+4      	; 0x46fc <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    46f8:	e6 e7       	ldi	r30, 0x76	; 118
    46fa:	f4 e0       	ldi	r31, 0x04	; 4
    46fc:	24 91       	lpm	r18, Z+
    46fe:	30 e0       	ldi	r19, 0x00	; 0
					break;
    4700:	09 c0       	rjmp	.+18     	; 0x4714 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    4702:	22 e1       	ldi	r18, 0x12	; 18
    4704:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    4706:	e8 e0       	ldi	r30, 0x08	; 8
    4708:	f4 e0       	ldi	r31, 0x04	; 4
    470a:	04 c0       	rjmp	.+8      	; 0x4714 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    4710:	e0 e0       	ldi	r30, 0x00	; 0
    4712:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    4714:	da 01       	movw	r26, r20
    4716:	11 96       	adiw	r26, 0x01	; 1
    4718:	fc 93       	st	X, r31
    471a:	ee 93       	st	-X, r30
	return Size;
}
    471c:	c9 01       	movw	r24, r18
    471e:	08 95       	ret

00004720 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    4720:	98 2f       	mov	r25, r24
    4722:	2c c0       	rjmp	.+88     	; 0x477c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4724:	29 2f       	mov	r18, r25
    4726:	2f 70       	andi	r18, 0x0F	; 15
    4728:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    472c:	98 17       	cp	r25, r24
    472e:	39 f0       	breq	.+14     	; 0x473e <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    4730:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    4734:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    4738:	50 91 f0 00 	lds	r21, 0x00F0
    473c:	03 c0       	rjmp	.+6      	; 0x4744 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    473e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    4740:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    4742:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    4744:	21 ff       	sbrs	r18, 1
    4746:	19 c0       	rjmp	.+50     	; 0x477a <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    4748:	30 91 eb 00 	lds	r19, 0x00EB
    474c:	3e 7f       	andi	r19, 0xFE	; 254
    474e:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    4752:	30 91 ed 00 	lds	r19, 0x00ED
    4756:	3d 7f       	andi	r19, 0xFD	; 253
    4758:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    475c:	30 91 eb 00 	lds	r19, 0x00EB
    4760:	31 60       	ori	r19, 0x01	; 1
    4762:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    4766:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    476a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    476e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    4772:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    4776:	27 ff       	sbrs	r18, 7
    4778:	08 c0       	rjmp	.+16     	; 0x478a <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    477a:	9f 5f       	subi	r25, 0xFF	; 255
    477c:	97 30       	cpi	r25, 0x07	; 7
    477e:	90 f2       	brcs	.-92     	; 0x4724 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4780:	8f 70       	andi	r24, 0x0F	; 15
    4782:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    478a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    478c:	08 95       	ret

0000478e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    479c:	e8 2e       	mov	r14, r24
    479e:	e7 01       	movw	r28, r14
    47a0:	7e 01       	movw	r14, r28
    47a2:	f9 2e       	mov	r15, r25
    47a4:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    47a6:	00 e0       	ldi	r16, 0x00	; 0
    47a8:	2a c0       	rjmp	.+84     	; 0x47fe <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
    47aa:	98 81       	ld	r25, Y
    47ac:	99 23       	and	r25, r25
    47ae:	29 f1       	breq	.+74     	; 0x47fa <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    47b0:	6b 81       	ldd	r22, Y+3	; 0x03
    47b2:	e9 81       	ldd	r30, Y+1	; 0x01
    47b4:	fa 81       	ldd	r31, Y+2	; 0x02
    47b6:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    47b8:	89 2f       	mov	r24, r25
    47ba:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    47bc:	87 30       	cpi	r24, 0x07	; 7
    47be:	18 f5       	brcc	.+70     	; 0x4806 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
    47c0:	62 95       	swap	r22
    47c2:	66 0f       	add	r22, r22
    47c4:	66 0f       	add	r22, r22
    47c6:	60 7c       	andi	r22, 0xC0	; 192
    47c8:	99 1f       	adc	r25, r25
    47ca:	99 27       	eor	r25, r25
    47cc:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    47ce:	69 2b       	or	r22, r25
    47d0:	22 30       	cpi	r18, 0x02	; 2
    47d2:	10 f0       	brcs	.+4      	; 0x47d8 <Endpoint_ConfigureEndpointTable+0x4a>
    47d4:	96 e0       	ldi	r25, 0x06	; 6
    47d6:	01 c0       	rjmp	.+2      	; 0x47da <Endpoint_ConfigureEndpointTable+0x4c>
    47d8:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    47da:	28 e0       	ldi	r18, 0x08	; 8
    47dc:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    47de:	40 e0       	ldi	r20, 0x00	; 0
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    47e2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    47e4:	22 0f       	add	r18, r18
    47e6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    47e8:	2e 17       	cp	r18, r30
    47ea:	3f 07       	cpc	r19, r31
    47ec:	d0 f3       	brcs	.-12     	; 0x47e2 <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    47ee:	42 95       	swap	r20
    47f0:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    47f2:	49 2b       	or	r20, r25
    47f4:	95 df       	rcall	.-214    	; 0x4720 <Endpoint_ConfigureEndpoint_Prv>
    47f6:	88 23       	and	r24, r24
    47f8:	31 f0       	breq	.+12     	; 0x4806 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    47fa:	0f 5f       	subi	r16, 0xFF	; 255
    47fc:	25 96       	adiw	r28, 0x05	; 5
    47fe:	01 17       	cp	r16, r17
    4800:	a0 f2       	brcs	.-88     	; 0x47aa <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	01 c0       	rjmp	.+2      	; 0x4808 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
    4806:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    4808:	df 91       	pop	r29
    480a:	cf 91       	pop	r28
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	ff 90       	pop	r15
    4812:	ef 90       	pop	r14
    4814:	08 95       	ret

00004816 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    4816:	80 91 5c 06 	lds	r24, 0x065C
    481a:	87 ff       	sbrs	r24, 7
    481c:	13 c0       	rjmp	.+38     	; 0x4844 <Endpoint_ClearStatusStage+0x2e>
    481e:	04 c0       	rjmp	.+8      	; 0x4828 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4820:	80 91 5b 06 	lds	r24, 0x065B
    4824:	88 23       	and	r24, r24
    4826:	b9 f0       	breq	.+46     	; 0x4856 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4828:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    482c:	82 ff       	sbrs	r24, 2
    482e:	f8 cf       	rjmp	.-16     	; 0x4820 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4830:	80 91 e8 00 	lds	r24, 0x00E8
    4834:	8b 77       	andi	r24, 0x7B	; 123
    4836:	80 93 e8 00 	sts	0x00E8, r24
    483a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    483c:	80 91 5b 06 	lds	r24, 0x065B
    4840:	88 23       	and	r24, r24
    4842:	49 f0       	breq	.+18     	; 0x4856 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4844:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    4848:	80 ff       	sbrs	r24, 0
    484a:	f8 cf       	rjmp	.-16     	; 0x483c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    484c:	80 91 e8 00 	lds	r24, 0x00E8
    4850:	8e 77       	andi	r24, 0x7E	; 126
    4852:	80 93 e8 00 	sts	0x00E8, r24
    4856:	08 95       	ret

00004858 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    4858:	80 91 e4 00 	lds	r24, 0x00E4
    485c:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    4860:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    4862:	20 91 ec 00 	lds	r18, 0x00EC
    4866:	20 ff       	sbrs	r18, 0
    4868:	26 c0       	rjmp	.+76     	; 0x48b6 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    486a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    486e:	20 fd       	sbrc	r18, 0
    4870:	16 c0       	rjmp	.+44     	; 0x489e <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4872:	20 91 5b 06 	lds	r18, 0x065B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4876:	22 23       	and	r18, r18
    4878:	a1 f0       	breq	.+40     	; 0x48a2 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    487a:	25 30       	cpi	r18, 0x05	; 5
    487c:	a1 f0       	breq	.+40     	; 0x48a6 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    487e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    4882:	25 fd       	sbrc	r18, 5
    4884:	12 c0       	rjmp	.+36     	; 0x48aa <Endpoint_WaitUntilReady+0x52>
    4886:	20 91 e4 00 	lds	r18, 0x00E4
    488a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    488e:	28 17       	cp	r18, r24
    4890:	39 07       	cpc	r19, r25
    4892:	39 f3       	breq	.-50     	; 0x4862 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    4894:	44 23       	and	r20, r20
    4896:	59 f0       	breq	.+22     	; 0x48ae <Endpoint_WaitUntilReady+0x56>
    4898:	41 50       	subi	r20, 0x01	; 1
    489a:	c9 01       	movw	r24, r18
    489c:	e2 cf       	rjmp	.-60     	; 0x4862 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    48a6:	83 e0       	ldi	r24, 0x03	; 3
    48a8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    48ae:	84 e0       	ldi	r24, 0x04	; 4
    48b0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    48b2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    48b4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    48b6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    48ba:	22 ff       	sbrs	r18, 2
    48bc:	da cf       	rjmp	.-76     	; 0x4872 <Endpoint_WaitUntilReady+0x1a>
    48be:	f9 cf       	rjmp	.-14     	; 0x48b2 <Endpoint_WaitUntilReady+0x5a>

000048c0 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    48c8:	4b d0       	rcall	.+150    	; 0x4960 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    48ca:	52 d0       	rcall	.+164    	; 0x4970 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    48cc:	c8 ed       	ldi	r28, 0xD8	; 216
    48ce:	d0 e0       	ldi	r29, 0x00	; 0
    48d0:	88 81       	ld	r24, Y
    48d2:	8f 77       	andi	r24, 0x7F	; 127
    48d4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    48d6:	88 81       	ld	r24, Y
    48d8:	80 68       	ori	r24, 0x80	; 128
    48da:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    48dc:	88 81       	ld	r24, Y
    48de:	8f 7d       	andi	r24, 0xDF	; 223
    48e0:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    48e2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    48e4:	10 92 5b 06 	sts	0x065B, r1
	USB_Device_ConfigurationNumber  = 0;
    48e8:	10 92 57 06 	sts	0x0657, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    48ec:	10 92 59 06 	sts	0x0659, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    48f0:	10 92 58 06 	sts	0x0658, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    48f4:	00 ee       	ldi	r16, 0xE0	; 224
    48f6:	10 e0       	ldi	r17, 0x00	; 0
    48f8:	f8 01       	movw	r30, r16
    48fa:	80 81       	ld	r24, Z
    48fc:	8b 7f       	andi	r24, 0xFB	; 251
    48fe:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    4900:	88 81       	ld	r24, Y
    4902:	81 60       	ori	r24, 0x01	; 1
    4904:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	42 e0       	ldi	r20, 0x02	; 2
    490c:	09 df       	rcall	.-494    	; 0x4720 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    490e:	e1 ee       	ldi	r30, 0xE1	; 225
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	8e 7f       	andi	r24, 0xFE	; 254
    4916:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    4918:	e2 ee       	ldi	r30, 0xE2	; 226
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	80 81       	ld	r24, Z
    491e:	81 60       	ori	r24, 0x01	; 1
    4920:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    4922:	80 81       	ld	r24, Z
    4924:	88 60       	ori	r24, 0x08	; 8
    4926:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    4928:	f8 01       	movw	r30, r16
    492a:	80 81       	ld	r24, Z
    492c:	8e 7f       	andi	r24, 0xFE	; 254
    492e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    4930:	88 81       	ld	r24, Y
    4932:	80 61       	ori	r24, 0x10	; 16
    4934:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	08 95       	ret

00004940 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    4940:	e8 ed       	ldi	r30, 0xD8	; 216
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	8f 7e       	andi	r24, 0xEF	; 239
    4948:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    494a:	e7 ed       	ldi	r30, 0xD7	; 215
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	81 60       	ori	r24, 0x01	; 1
    4952:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    4954:	84 e0       	ldi	r24, 0x04	; 4
    4956:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	80 93 5a 06 	sts	0x065A, r24

	USB_ResetInterface();
}
    495e:	b0 cf       	rjmp	.-160    	; 0x48c0 <USB_ResetInterface>

00004960 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    4960:	e8 ed       	ldi	r30, 0xD8	; 216
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	8e 7f       	andi	r24, 0xFE	; 254
    4968:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    496a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    496e:	08 95       	ret

00004970 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    4970:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    4974:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    4978:	08 95       	ret

0000497a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    497a:	1f 92       	push	r1
    497c:	0f 92       	push	r0
    497e:	0f b6       	in	r0, 0x3f	; 63
    4980:	0f 92       	push	r0
    4982:	11 24       	eor	r1, r1
    4984:	2f 93       	push	r18
    4986:	3f 93       	push	r19
    4988:	4f 93       	push	r20
    498a:	5f 93       	push	r21
    498c:	6f 93       	push	r22
    498e:	7f 93       	push	r23
    4990:	8f 93       	push	r24
    4992:	9f 93       	push	r25
    4994:	af 93       	push	r26
    4996:	bf 93       	push	r27
    4998:	ef 93       	push	r30
    499a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    499c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    49a0:	82 ff       	sbrs	r24, 2
    49a2:	0a c0       	rjmp	.+20     	; 0x49b8 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    49a4:	80 91 e2 00 	lds	r24, 0x00E2
    49a8:	82 ff       	sbrs	r24, 2
    49aa:	06 c0       	rjmp	.+12     	; 0x49b8 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    49ac:	80 91 e1 00 	lds	r24, 0x00E1
    49b0:	8b 7f       	andi	r24, 0xFB	; 251
    49b2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    49b6:	14 d3       	rcall	.+1576   	; 0x4fe0 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    49b8:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    49bc:	80 ff       	sbrs	r24, 0
    49be:	1d c0       	rjmp	.+58     	; 0x49fa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    49c0:	80 91 d8 00 	lds	r24, 0x00D8
    49c4:	80 ff       	sbrs	r24, 0
    49c6:	19 c0       	rjmp	.+50     	; 0x49fa <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    49c8:	80 91 da 00 	lds	r24, 0x00DA
    49cc:	8e 7f       	andi	r24, 0xFE	; 254
    49ce:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    49d2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    49d6:	80 ff       	sbrs	r24, 0
    49d8:	0c c0       	rjmp	.+24     	; 0x49f2 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    49da:	80 e1       	ldi	r24, 0x10	; 16
    49dc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    49de:	82 e1       	ldi	r24, 0x12	; 18
    49e0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    49e2:	09 b4       	in	r0, 0x29	; 41
    49e4:	00 fe       	sbrs	r0, 0
    49e6:	fd cf       	rjmp	.-6      	; 0x49e2 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	80 93 5b 06 	sts	0x065B, r24
			EVENT_USB_Device_Connect();
    49ee:	f8 d2       	rcall	.+1520   	; 0x4fe0 <USB_Event_Stub>
    49f0:	04 c0       	rjmp	.+8      	; 0x49fa <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    49f2:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    49f4:	10 92 5b 06 	sts	0x065B, r1
			EVENT_USB_Device_Disconnect();
    49f8:	f3 d2       	rcall	.+1510   	; 0x4fe0 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    49fa:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    49fe:	80 ff       	sbrs	r24, 0
    4a00:	18 c0       	rjmp	.+48     	; 0x4a32 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    4a02:	80 91 e2 00 	lds	r24, 0x00E2
    4a06:	80 ff       	sbrs	r24, 0
    4a08:	14 c0       	rjmp	.+40     	; 0x4a32 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    4a0a:	80 91 e2 00 	lds	r24, 0x00E2
    4a0e:	8e 7f       	andi	r24, 0xFE	; 254
    4a10:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    4a14:	80 91 e2 00 	lds	r24, 0x00E2
    4a18:	80 61       	ori	r24, 0x10	; 16
    4a1a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    4a1e:	80 91 d8 00 	lds	r24, 0x00D8
    4a22:	80 62       	ori	r24, 0x20	; 32
    4a24:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    4a28:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    4a2a:	85 e0       	ldi	r24, 0x05	; 5
    4a2c:	80 93 5b 06 	sts	0x065B, r24
		EVENT_USB_Device_Suspend();
    4a30:	d7 d2       	rcall	.+1454   	; 0x4fe0 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    4a32:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    4a36:	84 ff       	sbrs	r24, 4
    4a38:	2d c0       	rjmp	.+90     	; 0x4a94 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    4a3a:	80 91 e2 00 	lds	r24, 0x00E2
    4a3e:	84 ff       	sbrs	r24, 4
    4a40:	29 c0       	rjmp	.+82     	; 0x4a94 <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    4a42:	80 e1       	ldi	r24, 0x10	; 16
    4a44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    4a46:	82 e1       	ldi	r24, 0x12	; 18
    4a48:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    4a4a:	09 b4       	in	r0, 0x29	; 41
    4a4c:	00 fe       	sbrs	r0, 0
    4a4e:	fd cf       	rjmp	.-6      	; 0x4a4a <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    4a50:	80 91 d8 00 	lds	r24, 0x00D8
    4a54:	8f 7d       	andi	r24, 0xDF	; 223
    4a56:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    4a5a:	80 91 e1 00 	lds	r24, 0x00E1
    4a5e:	8f 7e       	andi	r24, 0xEF	; 239
    4a60:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    4a64:	80 91 e2 00 	lds	r24, 0x00E2
    4a68:	8f 7e       	andi	r24, 0xEF	; 239
    4a6a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    4a6e:	80 91 e2 00 	lds	r24, 0x00E2
    4a72:	81 60       	ori	r24, 0x01	; 1
    4a74:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    4a78:	80 91 57 06 	lds	r24, 0x0657
    4a7c:	88 23       	and	r24, r24
    4a7e:	21 f4       	brne	.+8      	; 0x4a88 <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    4a80:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4a84:	87 ff       	sbrs	r24, 7
    4a86:	02 c0       	rjmp	.+4      	; 0x4a8c <__vector_10+0x112>
    4a88:	84 e0       	ldi	r24, 0x04	; 4
    4a8a:	01 c0       	rjmp	.+2      	; 0x4a8e <__vector_10+0x114>
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	80 93 5b 06 	sts	0x065B, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    4a92:	a6 d2       	rcall	.+1356   	; 0x4fe0 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    4a94:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    4a98:	83 ff       	sbrs	r24, 3
    4a9a:	27 c0       	rjmp	.+78     	; 0x4aea <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    4a9c:	80 91 e2 00 	lds	r24, 0x00E2
    4aa0:	83 ff       	sbrs	r24, 3
    4aa2:	23 c0       	rjmp	.+70     	; 0x4aea <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    4aa4:	80 91 e1 00 	lds	r24, 0x00E1
    4aa8:	87 7f       	andi	r24, 0xF7	; 247
    4aaa:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    4aae:	82 e0       	ldi	r24, 0x02	; 2
    4ab0:	80 93 5b 06 	sts	0x065B, r24
		USB_Device_ConfigurationNumber = 0;
    4ab4:	10 92 57 06 	sts	0x0657, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    4ab8:	80 91 e1 00 	lds	r24, 0x00E1
    4abc:	8e 7f       	andi	r24, 0xFE	; 254
    4abe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    4ac2:	80 91 e2 00 	lds	r24, 0x00E2
    4ac6:	8e 7f       	andi	r24, 0xFE	; 254
    4ac8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    4acc:	80 91 e2 00 	lds	r24, 0x00E2
    4ad0:	80 61       	ori	r24, 0x10	; 16
    4ad2:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	60 e0       	ldi	r22, 0x00	; 0
    4ada:	42 e0       	ldi	r20, 0x02	; 2
    4adc:	21 de       	rcall	.-958    	; 0x4720 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    4ade:	80 91 f0 00 	lds	r24, 0x00F0
    4ae2:	88 60       	ori	r24, 0x08	; 8
    4ae4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    4ae8:	7b d2       	rcall	.+1270   	; 0x4fe0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    4aea:	ff 91       	pop	r31
    4aec:	ef 91       	pop	r30
    4aee:	bf 91       	pop	r27
    4af0:	af 91       	pop	r26
    4af2:	9f 91       	pop	r25
    4af4:	8f 91       	pop	r24
    4af6:	7f 91       	pop	r23
    4af8:	6f 91       	pop	r22
    4afa:	5f 91       	pop	r21
    4afc:	4f 91       	pop	r20
    4afe:	3f 91       	pop	r19
    4b00:	2f 91       	pop	r18
    4b02:	0f 90       	pop	r0
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	0f 90       	pop	r0
    4b08:	1f 90       	pop	r1
    4b0a:	18 95       	reti

00004b0c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    4b0c:	1f 92       	push	r1
    4b0e:	0f 92       	push	r0
    4b10:	0f b6       	in	r0, 0x3f	; 63
    4b12:	0f 92       	push	r0
    4b14:	11 24       	eor	r1, r1
    4b16:	1f 93       	push	r17
    4b18:	2f 93       	push	r18
    4b1a:	3f 93       	push	r19
    4b1c:	4f 93       	push	r20
    4b1e:	5f 93       	push	r21
    4b20:	6f 93       	push	r22
    4b22:	7f 93       	push	r23
    4b24:	8f 93       	push	r24
    4b26:	9f 93       	push	r25
    4b28:	af 93       	push	r26
    4b2a:	bf 93       	push	r27
    4b2c:	ef 93       	push	r30
    4b2e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    4b30:	10 91 e9 00 	lds	r17, 0x00E9
    4b34:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    4b36:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4b3a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    4b3e:	80 91 f0 00 	lds	r24, 0x00F0
    4b42:	87 7f       	andi	r24, 0xF7	; 247
    4b44:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    4b48:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    4b4a:	e2 d0       	rcall	.+452    	; 0x4d10 <USB_Device_ProcessControlRequest>
    4b4c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    4b50:	80 91 f0 00 	lds	r24, 0x00F0
    4b54:	88 60       	ori	r24, 0x08	; 8
    4b56:	80 93 f0 00 	sts	0x00F0, r24
    4b5a:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    4b5e:	ff 91       	pop	r31
    4b60:	ef 91       	pop	r30
    4b62:	bf 91       	pop	r27
    4b64:	af 91       	pop	r26
    4b66:	9f 91       	pop	r25
    4b68:	8f 91       	pop	r24
    4b6a:	7f 91       	pop	r23
    4b6c:	6f 91       	pop	r22
    4b6e:	5f 91       	pop	r21
    4b70:	4f 91       	pop	r20
    4b72:	3f 91       	pop	r19
    4b74:	2f 91       	pop	r18
    4b76:	1f 91       	pop	r17
    4b78:	0f 90       	pop	r0
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	0f 90       	pop	r0
    4b7e:	1f 90       	pop	r1
    4b80:	18 95       	reti

00004b82 <Endpoint_Write_Control_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    4b82:	48 2f       	mov	r20, r24
    4b84:	59 2f       	mov	r21, r25
    4b86:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    4b88:	80 91 62 06 	lds	r24, 0x0662
    4b8c:	90 91 63 06 	lds	r25, 0x0663
    4b90:	86 17       	cp	r24, r22
    4b92:	97 07       	cpc	r25, r23
    4b94:	18 f4       	brcc	.+6      	; 0x4b9c <Endpoint_Write_Control_Stream_LE+0x1a>
    4b96:	bc 01       	movw	r22, r24
    4b98:	40 e0       	ldi	r20, 0x00	; 0
    4b9a:	3c c0       	rjmp	.+120    	; 0x4c14 <Endpoint_Write_Control_Stream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    4b9c:	61 15       	cp	r22, r1
    4b9e:	71 05       	cpc	r23, r1
    4ba0:	d9 f7       	brne	.-10     	; 0x4b98 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4ba2:	80 91 e8 00 	lds	r24, 0x00E8
    4ba6:	8e 77       	andi	r24, 0x7E	; 126
    4ba8:	80 93 e8 00 	sts	0x00E8, r24
    4bac:	f5 cf       	rjmp	.-22     	; 0x4b98 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4bae:	80 91 5b 06 	lds	r24, 0x065B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4bb2:	88 23       	and	r24, r24
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <Endpoint_Write_Control_Stream_LE+0x36>
    4bb6:	44 c0       	rjmp	.+136    	; 0x4c40 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4bb8:	85 30       	cpi	r24, 0x05	; 5
    4bba:	f1 f1       	breq	.+124    	; 0x4c38 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4bbc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4bc0:	83 fd       	sbrc	r24, 3
    4bc2:	3c c0       	rjmp	.+120    	; 0x4c3c <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4bc4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4bc8:	82 fd       	sbrc	r24, 2
    4bca:	30 c0       	rjmp	.+96     	; 0x4c2c <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4bcc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    4bd0:	80 ff       	sbrs	r24, 0
    4bd2:	20 c0       	rjmp	.+64     	; 0x4c14 <Endpoint_Write_Control_Stream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4bd4:	90 91 f3 00 	lds	r25, 0x00F3
    4bd8:	80 91 f2 00 	lds	r24, 0x00F2
    4bdc:	39 2f       	mov	r19, r25
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	82 2b       	or	r24, r18
    4be4:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4be6:	06 c0       	rjmp	.+12     	; 0x4bf4 <Endpoint_Write_Control_Stream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4be8:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4bea:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    4bee:	61 50       	subi	r22, 0x01	; 1
    4bf0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    4bf2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4bf4:	61 15       	cp	r22, r1
    4bf6:	71 05       	cpc	r23, r1
    4bf8:	19 f0       	breq	.+6      	; 0x4c00 <Endpoint_Write_Control_Stream_LE+0x7e>
    4bfa:	88 30       	cpi	r24, 0x08	; 8
    4bfc:	91 05       	cpc	r25, r1
    4bfe:	a0 f3       	brcs	.-24     	; 0x4be8 <Endpoint_Write_Control_Stream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4c00:	41 e0       	ldi	r20, 0x01	; 1
    4c02:	88 30       	cpi	r24, 0x08	; 8
    4c04:	91 05       	cpc	r25, r1
    4c06:	09 f0       	breq	.+2      	; 0x4c0a <Endpoint_Write_Control_Stream_LE+0x88>
    4c08:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4c0a:	80 91 e8 00 	lds	r24, 0x00E8
    4c0e:	8e 77       	andi	r24, 0x7E	; 126
    4c10:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4c14:	61 15       	cp	r22, r1
    4c16:	71 05       	cpc	r23, r1
    4c18:	51 f6       	brne	.-108    	; 0x4bae <Endpoint_Write_Control_Stream_LE+0x2c>
    4c1a:	44 23       	and	r20, r20
    4c1c:	41 f6       	brne	.-112    	; 0x4bae <Endpoint_Write_Control_Stream_LE+0x2c>
    4c1e:	06 c0       	rjmp	.+12     	; 0x4c2c <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4c20:	80 91 5b 06 	lds	r24, 0x065B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4c24:	88 23       	and	r24, r24
    4c26:	61 f0       	breq	.+24     	; 0x4c40 <Endpoint_Write_Control_Stream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4c28:	85 30       	cpi	r24, 0x05	; 5
    4c2a:	61 f0       	breq	.+24     	; 0x4c44 <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4c2c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    4c30:	82 ff       	sbrs	r24, 2
    4c32:	f6 cf       	rjmp	.-20     	; 0x4c20 <Endpoint_Write_Control_Stream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4c38:	83 e0       	ldi	r24, 0x03	; 3
    4c3a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4c40:	82 e0       	ldi	r24, 0x02	; 2
    4c42:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4c44:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    4c46:	08 95       	ret

00004c48 <Endpoint_Write_Control_PStream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    4c48:	e8 2f       	mov	r30, r24
    4c4a:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    4c4c:	80 91 62 06 	lds	r24, 0x0662
    4c50:	90 91 63 06 	lds	r25, 0x0663
    4c54:	86 17       	cp	r24, r22
    4c56:	97 07       	cpc	r25, r23
    4c58:	18 f4       	brcc	.+6      	; 0x4c60 <Endpoint_Write_Control_PStream_LE+0x18>
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	40 e0       	ldi	r20, 0x00	; 0
    4c5e:	3e c0       	rjmp	.+124    	; 0x4cdc <Endpoint_Write_Control_PStream_LE+0x94>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    4c60:	61 15       	cp	r22, r1
    4c62:	71 05       	cpc	r23, r1
    4c64:	d9 f7       	brne	.-10     	; 0x4c5c <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4c66:	80 91 e8 00 	lds	r24, 0x00E8
    4c6a:	8e 77       	andi	r24, 0x7E	; 126
    4c6c:	80 93 e8 00 	sts	0x00E8, r24
    4c70:	f5 cf       	rjmp	.-22     	; 0x4c5c <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4c72:	80 91 5b 06 	lds	r24, 0x065B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4c76:	88 23       	and	r24, r24
    4c78:	09 f4       	brne	.+2      	; 0x4c7c <Endpoint_Write_Control_PStream_LE+0x34>
    4c7a:	46 c0       	rjmp	.+140    	; 0x4d08 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4c7c:	85 30       	cpi	r24, 0x05	; 5
    4c7e:	09 f4       	brne	.+2      	; 0x4c82 <Endpoint_Write_Control_PStream_LE+0x3a>
    4c80:	3f c0       	rjmp	.+126    	; 0x4d00 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4c82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4c86:	83 fd       	sbrc	r24, 3
    4c88:	3d c0       	rjmp	.+122    	; 0x4d04 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4c8a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4c8e:	82 fd       	sbrc	r24, 2
    4c90:	31 c0       	rjmp	.+98     	; 0x4cf4 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4c92:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    4c96:	80 ff       	sbrs	r24, 0
    4c98:	21 c0       	rjmp	.+66     	; 0x4cdc <Endpoint_Write_Control_PStream_LE+0x94>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4c9a:	90 91 f3 00 	lds	r25, 0x00F3
    4c9e:	80 91 f2 00 	lds	r24, 0x00F2
    4ca2:	39 2f       	mov	r19, r25
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	82 2b       	or	r24, r18
    4caa:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4cac:	07 c0       	rjmp	.+14     	; 0x4cbc <Endpoint_Write_Control_PStream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4cae:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4cb0:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4cb4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    4cb6:	61 50       	subi	r22, 0x01	; 1
    4cb8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    4cba:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4cbc:	61 15       	cp	r22, r1
    4cbe:	71 05       	cpc	r23, r1
    4cc0:	19 f0       	breq	.+6      	; 0x4cc8 <Endpoint_Write_Control_PStream_LE+0x80>
    4cc2:	88 30       	cpi	r24, 0x08	; 8
    4cc4:	91 05       	cpc	r25, r1
    4cc6:	98 f3       	brcs	.-26     	; 0x4cae <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4cc8:	41 e0       	ldi	r20, 0x01	; 1
    4cca:	88 30       	cpi	r24, 0x08	; 8
    4ccc:	91 05       	cpc	r25, r1
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <Endpoint_Write_Control_PStream_LE+0x8a>
    4cd0:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4cd2:	80 91 e8 00 	lds	r24, 0x00E8
    4cd6:	8e 77       	andi	r24, 0x7E	; 126
    4cd8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4cdc:	61 15       	cp	r22, r1
    4cde:	71 05       	cpc	r23, r1
    4ce0:	41 f6       	brne	.-112    	; 0x4c72 <Endpoint_Write_Control_PStream_LE+0x2a>
    4ce2:	44 23       	and	r20, r20
    4ce4:	31 f6       	brne	.-116    	; 0x4c72 <Endpoint_Write_Control_PStream_LE+0x2a>
    4ce6:	06 c0       	rjmp	.+12     	; 0x4cf4 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4ce8:	80 91 5b 06 	lds	r24, 0x065B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4cec:	88 23       	and	r24, r24
    4cee:	61 f0       	breq	.+24     	; 0x4d08 <Endpoint_Write_Control_PStream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4cf0:	85 30       	cpi	r24, 0x05	; 5
    4cf2:	61 f0       	breq	.+24     	; 0x4d0c <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4cf4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    4cf8:	82 ff       	sbrs	r24, 2
    4cfa:	f6 cf       	rjmp	.-20     	; 0x4ce8 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4d00:	83 e0       	ldi	r24, 0x03	; 3
    4d02:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4d08:	82 e0       	ldi	r24, 0x02	; 2
    4d0a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4d0c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    4d0e:	08 95       	ret

00004d10 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	ac 97       	sbiw	r28, 0x2c	; 44
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    4d28:	ec e5       	ldi	r30, 0x5C	; 92
    4d2a:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    4d2c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    4d30:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    4d32:	26 e0       	ldi	r18, 0x06	; 6
    4d34:	e4 36       	cpi	r30, 0x64	; 100
    4d36:	f2 07       	cpc	r31, r18
    4d38:	c9 f7       	brne	.-14     	; 0x4d2c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    4d3a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4d3e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    4d42:	83 ff       	sbrs	r24, 3
    4d44:	34 c1       	rjmp	.+616    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    4d46:	80 91 5c 06 	lds	r24, 0x065C

		switch (USB_ControlRequest.bRequest)
    4d4a:	20 91 5d 06 	lds	r18, 0x065D
    4d4e:	25 30       	cpi	r18, 0x05	; 5
    4d50:	09 f4       	brne	.+2      	; 0x4d54 <USB_Device_ProcessControlRequest+0x44>
    4d52:	84 c0       	rjmp	.+264    	; 0x4e5c <USB_Device_ProcessControlRequest+0x14c>
    4d54:	26 30       	cpi	r18, 0x06	; 6
    4d56:	40 f4       	brcc	.+16     	; 0x4d68 <USB_Device_ProcessControlRequest+0x58>
    4d58:	21 30       	cpi	r18, 0x01	; 1
    4d5a:	a1 f1       	breq	.+104    	; 0x4dc4 <USB_Device_ProcessControlRequest+0xb4>
    4d5c:	21 30       	cpi	r18, 0x01	; 1
    4d5e:	70 f0       	brcs	.+28     	; 0x4d7c <USB_Device_ProcessControlRequest+0x6c>
    4d60:	23 30       	cpi	r18, 0x03	; 3
    4d62:	09 f0       	breq	.+2      	; 0x4d66 <USB_Device_ProcessControlRequest+0x56>
    4d64:	24 c1       	rjmp	.+584    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
    4d66:	2e c0       	rjmp	.+92     	; 0x4dc4 <USB_Device_ProcessControlRequest+0xb4>
    4d68:	28 30       	cpi	r18, 0x08	; 8
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <USB_Device_ProcessControlRequest+0x5e>
    4d6c:	f1 c0       	rjmp	.+482    	; 0x4f50 <USB_Device_ProcessControlRequest+0x240>
    4d6e:	29 30       	cpi	r18, 0x09	; 9
    4d70:	09 f4       	brne	.+2      	; 0x4d74 <USB_Device_ProcessControlRequest+0x64>
    4d72:	00 c1       	rjmp	.+512    	; 0x4f74 <USB_Device_ProcessControlRequest+0x264>
    4d74:	26 30       	cpi	r18, 0x06	; 6
    4d76:	09 f0       	breq	.+2      	; 0x4d7a <USB_Device_ProcessControlRequest+0x6a>
    4d78:	1a c1       	rjmp	.+564    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
    4d7a:	94 c0       	rjmp	.+296    	; 0x4ea4 <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4d7c:	80 38       	cpi	r24, 0x80	; 128
    4d7e:	21 f0       	breq	.+8      	; 0x4d88 <USB_Device_ProcessControlRequest+0x78>
    4d80:	82 38       	cpi	r24, 0x82	; 130
    4d82:	09 f0       	breq	.+2      	; 0x4d86 <USB_Device_ProcessControlRequest+0x76>
    4d84:	14 c1       	rjmp	.+552    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
    4d86:	08 c0       	rjmp	.+16     	; 0x4d98 <USB_Device_ProcessControlRequest+0x88>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    4d88:	80 91 58 06 	lds	r24, 0x0658
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    4d8c:	90 91 59 06 	lds	r25, 0x0659
    4d90:	99 23       	and	r25, r25
    4d92:	71 f0       	breq	.+28     	; 0x4db0 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    4d94:	82 60       	ori	r24, 0x02	; 2
    4d96:	0c c0       	rjmp	.+24     	; 0x4db0 <USB_Device_ProcessControlRequest+0xa0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4d98:	80 91 60 06 	lds	r24, 0x0660
    4d9c:	8f 70       	andi	r24, 0x0F	; 15
    4d9e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4da2:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	95 ff       	sbrs	r25, 5
    4daa:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4dac:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4db0:	90 91 e8 00 	lds	r25, 0x00E8
    4db4:	97 7f       	andi	r25, 0xF7	; 247
    4db6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    4dba:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    4dbe:	10 92 f1 00 	sts	0x00F1, r1
    4dc2:	d1 c0       	rjmp	.+418    	; 0x4f66 <USB_Device_ProcessControlRequest+0x256>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4dc4:	88 23       	and	r24, r24
    4dc6:	19 f0       	breq	.+6      	; 0x4dce <USB_Device_ProcessControlRequest+0xbe>
    4dc8:	82 30       	cpi	r24, 0x02	; 2
    4dca:	09 f0       	breq	.+2      	; 0x4dce <USB_Device_ProcessControlRequest+0xbe>
    4dcc:	f0 c0       	rjmp	.+480    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	8f 71       	andi	r24, 0x1F	; 31
    4dd2:	90 70       	andi	r25, 0x00	; 0
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	29 f0       	breq	.+10     	; 0x4de2 <USB_Device_ProcessControlRequest+0xd2>
    4dd8:	82 30       	cpi	r24, 0x02	; 2
    4dda:	91 05       	cpc	r25, r1
    4ddc:	09 f0       	breq	.+2      	; 0x4de0 <USB_Device_ProcessControlRequest+0xd0>
    4dde:	e7 c0       	rjmp	.+462    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
    4de0:	0b c0       	rjmp	.+22     	; 0x4df8 <USB_Device_ProcessControlRequest+0xe8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    4de2:	80 91 5e 06 	lds	r24, 0x065E
    4de6:	81 30       	cpi	r24, 0x01	; 1
    4de8:	09 f0       	breq	.+2      	; 0x4dec <USB_Device_ProcessControlRequest+0xdc>
    4dea:	e1 c0       	rjmp	.+450    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    4dec:	23 30       	cpi	r18, 0x03	; 3
    4dee:	09 f0       	breq	.+2      	; 0x4df2 <USB_Device_ProcessControlRequest+0xe2>
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	80 93 59 06 	sts	0x0659, r24
    4df6:	2c c0       	rjmp	.+88     	; 0x4e50 <USB_Device_ProcessControlRequest+0x140>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    4df8:	80 91 5e 06 	lds	r24, 0x065E
    4dfc:	88 23       	and	r24, r24
    4dfe:	41 f5       	brne	.+80     	; 0x4e50 <USB_Device_ProcessControlRequest+0x140>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4e00:	20 91 60 06 	lds	r18, 0x0660
    4e04:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <USB_Device_ProcessControlRequest+0xfa>
    4e08:	d2 c0       	rjmp	.+420    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4e0a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    4e0e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    4e12:	80 ff       	sbrs	r24, 0
    4e14:	1d c0       	rjmp	.+58     	; 0x4e50 <USB_Device_ProcessControlRequest+0x140>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    4e16:	80 91 5d 06 	lds	r24, 0x065D
    4e1a:	83 30       	cpi	r24, 0x03	; 3
    4e1c:	21 f4       	brne	.+8      	; 0x4e26 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4e1e:	80 91 eb 00 	lds	r24, 0x00EB
    4e22:	80 62       	ori	r24, 0x20	; 32
    4e24:	13 c0       	rjmp	.+38     	; 0x4e4c <USB_Device_ProcessControlRequest+0x13c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4e26:	80 91 eb 00 	lds	r24, 0x00EB
    4e2a:	80 61       	ori	r24, 0x10	; 16
    4e2c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	02 c0       	rjmp	.+4      	; 0x4e3a <USB_Device_ProcessControlRequest+0x12a>
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	2a 95       	dec	r18
    4e3c:	e2 f7       	brpl	.-8      	; 0x4e36 <USB_Device_ProcessControlRequest+0x126>
    4e3e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4e42:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4e46:	80 91 eb 00 	lds	r24, 0x00EB
    4e4a:	88 60       	ori	r24, 0x08	; 8
    4e4c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4e50:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4e54:	80 91 e8 00 	lds	r24, 0x00E8
    4e58:	87 7f       	andi	r24, 0xF7	; 247
    4e5a:	88 c0       	rjmp	.+272    	; 0x4f6c <USB_Device_ProcessControlRequest+0x25c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4e5c:	88 23       	and	r24, r24
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <USB_Device_ProcessControlRequest+0x152>
    4e60:	a6 c0       	rjmp	.+332    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    4e62:	10 91 5e 06 	lds	r17, 0x065E
    4e66:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4e68:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4e6a:	f8 94       	cli
    4e6c:	80 91 e8 00 	lds	r24, 0x00E8
    4e70:	87 7f       	andi	r24, 0xF7	; 247
    4e72:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    4e76:	cf dc       	rcall	.-1634   	; 0x4816 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4e78:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    4e7c:	80 ff       	sbrs	r24, 0
    4e7e:	fc cf       	rjmp	.-8      	; 0x4e78 <USB_Device_ProcessControlRequest+0x168>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    4e80:	80 91 e3 00 	lds	r24, 0x00E3
    4e84:	80 78       	andi	r24, 0x80	; 128
    4e86:	81 2b       	or	r24, r17

				UDADDR = Temp;
    4e88:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    4e8c:	80 68       	ori	r24, 0x80	; 128
    4e8e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    4e92:	11 23       	and	r17, r17
    4e94:	11 f0       	breq	.+4      	; 0x4e9a <USB_Device_ProcessControlRequest+0x18a>
    4e96:	83 e0       	ldi	r24, 0x03	; 3
    4e98:	01 c0       	rjmp	.+2      	; 0x4e9c <USB_Device_ProcessControlRequest+0x18c>
    4e9a:	82 e0       	ldi	r24, 0x02	; 2
    4e9c:	80 93 5b 06 	sts	0x065B, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4ea0:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    4ea2:	85 c0       	rjmp	.+266    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4ea4:	80 58       	subi	r24, 0x80	; 128
    4ea6:	82 30       	cpi	r24, 0x02	; 2
    4ea8:	08 f0       	brcs	.+2      	; 0x4eac <USB_Device_ProcessControlRequest+0x19c>
    4eaa:	81 c0       	rjmp	.+258    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    4eac:	80 91 5e 06 	lds	r24, 0x065E
    4eb0:	90 91 5f 06 	lds	r25, 0x065F
    4eb4:	23 e0       	ldi	r18, 0x03	; 3
    4eb6:	8c 3d       	cpi	r24, 0xDC	; 220
    4eb8:	92 07       	cpc	r25, r18
    4eba:	91 f5       	brne	.+100    	; 0x4f20 <USB_Device_ProcessControlRequest+0x210>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    4ebc:	83 e0       	ldi	r24, 0x03	; 3
    4ebe:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    4ec0:	8a e2       	ldi	r24, 0x2A	; 42
    4ec2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4ec4:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4ec6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    4ec8:	de 01       	movw	r26, r28
    4eca:	15 96       	adiw	r26, 0x05	; 5
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    4ed0:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    4ed2:	61 e2       	ldi	r22, 0x21	; 33
    4ed4:	e4 2f       	mov	r30, r20
    4ed6:	f0 e0       	ldi	r31, 0x00	; 0
    4ed8:	60 93 57 00 	sts	0x0057, r22
    4edc:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    4ede:	80 ff       	sbrs	r24, 0
    4ee0:	03 c0       	rjmp	.+6      	; 0x4ee8 <USB_Device_ProcessControlRequest+0x1d8>
					{
						SerialByte >>= 4;
    4ee2:	e2 95       	swap	r30
    4ee4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    4ee6:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    4ee8:	ef 70       	andi	r30, 0x0F	; 15
    4eea:	2e 2f       	mov	r18, r30
    4eec:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4eee:	ea 30       	cpi	r30, 0x0A	; 10
    4ef0:	18 f0       	brcs	.+6      	; 0x4ef8 <USB_Device_ProcessControlRequest+0x1e8>
    4ef2:	29 5c       	subi	r18, 0xC9	; 201
    4ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef6:	02 c0       	rjmp	.+4      	; 0x4efc <USB_Device_ProcessControlRequest+0x1ec>
    4ef8:	20 5d       	subi	r18, 0xD0	; 208
    4efa:	3f 4f       	sbci	r19, 0xFF	; 255
    4efc:	2d 93       	st	X+, r18
    4efe:	3d 93       	st	X+, r19
    4f00:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4f02:	84 31       	cpi	r24, 0x14	; 20
    4f04:	91 05       	cpc	r25, r1
    4f06:	31 f7       	brne	.-52     	; 0x4ed4 <USB_Device_ProcessControlRequest+0x1c4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4f08:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4f0a:	80 91 e8 00 	lds	r24, 0x00E8
    4f0e:	87 7f       	andi	r24, 0xF7	; 247
    4f10:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    4f14:	ce 01       	movw	r24, r28
    4f16:	03 96       	adiw	r24, 0x03	; 3
    4f18:	6a e2       	ldi	r22, 0x2A	; 42
    4f1a:	70 e0       	ldi	r23, 0x00	; 0
    4f1c:	32 de       	rcall	.-924    	; 0x4b82 <Endpoint_Write_Control_Stream_LE>
    4f1e:	12 c0       	rjmp	.+36     	; 0x4f44 <USB_Device_ProcessControlRequest+0x234>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    4f20:	60 91 60 06 	lds	r22, 0x0660
    4f24:	ae 01       	movw	r20, r28
    4f26:	4f 5f       	subi	r20, 0xFF	; 255
    4f28:	5f 4f       	sbci	r21, 0xFF	; 255
    4f2a:	cd db       	rcall	.-2150   	; 0x46c6 <CALLBACK_USB_GetDescriptor>
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	00 97       	sbiw	r24, 0x00	; 0
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <USB_Device_ProcessControlRequest+0x224>
    4f32:	3d c0       	rjmp	.+122    	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
    4f34:	80 91 e8 00 	lds	r24, 0x00E8
    4f38:	87 7f       	andi	r24, 0xF7	; 247
    4f3a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	9a 81       	ldd	r25, Y+2	; 0x02
    4f42:	82 de       	rcall	.-764    	; 0x4c48 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4f44:	80 91 e8 00 	lds	r24, 0x00E8
    4f48:	8b 77       	andi	r24, 0x7B	; 123
    4f4a:	80 93 e8 00 	sts	0x00E8, r24
    4f4e:	2f c0       	rjmp	.+94     	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    4f50:	80 38       	cpi	r24, 0x80	; 128
    4f52:	69 f5       	brne	.+90     	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4f54:	80 91 e8 00 	lds	r24, 0x00E8
    4f58:	87 7f       	andi	r24, 0xF7	; 247
    4f5a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    4f5e:	80 91 57 06 	lds	r24, 0x0657
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4f62:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4f66:	80 91 e8 00 	lds	r24, 0x00E8
    4f6a:	8e 77       	andi	r24, 0x7E	; 126
    4f6c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    4f70:	52 dc       	rcall	.-1884   	; 0x4816 <Endpoint_ClearStatusStage>
    4f72:	1d c0       	rjmp	.+58     	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4f74:	88 23       	and	r24, r24
    4f76:	d9 f4       	brne	.+54     	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    4f78:	90 91 5e 06 	lds	r25, 0x065E
    4f7c:	92 30       	cpi	r25, 0x02	; 2
    4f7e:	b8 f4       	brcc	.+46     	; 0x4fae <USB_Device_ProcessControlRequest+0x29e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4f80:	80 91 e8 00 	lds	r24, 0x00E8
    4f84:	87 7f       	andi	r24, 0xF7	; 247
    4f86:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    4f8a:	90 93 57 06 	sts	0x0657, r25

	Endpoint_ClearStatusStage();
    4f8e:	43 dc       	rcall	.-1914   	; 0x4816 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    4f90:	80 91 57 06 	lds	r24, 0x0657
    4f94:	88 23       	and	r24, r24
    4f96:	21 f4       	brne	.+8      	; 0x4fa0 <USB_Device_ProcessControlRequest+0x290>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    4f98:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4f9c:	87 ff       	sbrs	r24, 7
    4f9e:	02 c0       	rjmp	.+4      	; 0x4fa4 <USB_Device_ProcessControlRequest+0x294>
    4fa0:	84 e0       	ldi	r24, 0x04	; 4
    4fa2:	01 c0       	rjmp	.+2      	; 0x4fa6 <USB_Device_ProcessControlRequest+0x296>
    4fa4:	81 e0       	ldi	r24, 0x01	; 1
    4fa6:	80 93 5b 06 	sts	0x065B, r24

	EVENT_USB_Device_ConfigurationChanged();
    4faa:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4fae:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    4fb2:	83 ff       	sbrs	r24, 3
    4fb4:	0a c0       	rjmp	.+20     	; 0x4fca <USB_Device_ProcessControlRequest+0x2ba>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4fb6:	80 91 eb 00 	lds	r24, 0x00EB
    4fba:	80 62       	ori	r24, 0x20	; 32
    4fbc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4fc0:	80 91 e8 00 	lds	r24, 0x00E8
    4fc4:	87 7f       	andi	r24, 0xF7	; 247
    4fc6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    4fca:	ac 96       	adiw	r28, 0x2c	; 44
    4fcc:	0f b6       	in	r0, 0x3f	; 63
    4fce:	f8 94       	cli
    4fd0:	de bf       	out	0x3e, r29	; 62
    4fd2:	0f be       	out	0x3f, r0	; 63
    4fd4:	cd bf       	out	0x3d, r28	; 61
    4fd6:	cf 91       	pop	r28
    4fd8:	df 91       	pop	r29
    4fda:	1f 91       	pop	r17
    4fdc:	0f 91       	pop	r16
    4fde:	08 95       	ret

00004fe0 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    4fe0:	08 95       	ret

00004fe2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    4fe2:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    4fe4:	80 91 5b 06 	lds	r24, 0x065B
    4fe8:	88 23       	and	r24, r24
    4fea:	a9 f0       	breq	.+42     	; 0x5016 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    4fec:	80 91 e9 00 	lds	r24, 0x00E9
    4ff0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    4ff2:	90 91 ec 00 	lds	r25, 0x00EC
    4ff6:	90 ff       	sbrs	r25, 0
    4ff8:	02 c0       	rjmp	.+4      	; 0x4ffe <USB_USBTask+0x1c>
    4ffa:	10 e8       	ldi	r17, 0x80	; 128
    4ffc:	01 c0       	rjmp	.+2      	; 0x5000 <USB_USBTask+0x1e>
    4ffe:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    5000:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5002:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5006:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    500a:	83 ff       	sbrs	r24, 3
    500c:	01 c0       	rjmp	.+2      	; 0x5010 <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
    500e:	80 de       	rcall	.-768    	; 0x4d10 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5010:	1f 70       	andi	r17, 0x0F	; 15
    5012:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    5016:	1f 91       	pop	r17
    5018:	08 95       	ret

0000501a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5020:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    5024:	83 ff       	sbrs	r24, 3
    5026:	a4 c0       	rjmp	.+328    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    5028:	88 81       	ld	r24, Y
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	20 91 60 06 	lds	r18, 0x0660
    5030:	30 91 61 06 	lds	r19, 0x0661
    5034:	28 17       	cp	r18, r24
    5036:	39 07       	cpc	r19, r25
    5038:	09 f0       	breq	.+2      	; 0x503c <CDC_Device_ProcessControlRequest+0x22>
    503a:	9a c0       	rjmp	.+308    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
	  return;

	switch (USB_ControlRequest.bRequest)
    503c:	80 91 5d 06 	lds	r24, 0x065D
    5040:	81 32       	cpi	r24, 0x21	; 33
    5042:	69 f0       	breq	.+26     	; 0x505e <CDC_Device_ProcessControlRequest+0x44>
    5044:	82 32       	cpi	r24, 0x22	; 34
    5046:	20 f4       	brcc	.+8      	; 0x5050 <CDC_Device_ProcessControlRequest+0x36>
    5048:	80 32       	cpi	r24, 0x20	; 32
    504a:	09 f0       	breq	.+2      	; 0x504e <CDC_Device_ProcessControlRequest+0x34>
    504c:	91 c0       	rjmp	.+290    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
    504e:	3c c0       	rjmp	.+120    	; 0x50c8 <CDC_Device_ProcessControlRequest+0xae>
    5050:	82 32       	cpi	r24, 0x22	; 34
    5052:	09 f4       	brne	.+2      	; 0x5056 <CDC_Device_ProcessControlRequest+0x3c>
    5054:	6b c0       	rjmp	.+214    	; 0x512c <CDC_Device_ProcessControlRequest+0x112>
    5056:	83 32       	cpi	r24, 0x23	; 35
    5058:	09 f0       	breq	.+2      	; 0x505c <CDC_Device_ProcessControlRequest+0x42>
    505a:	8a c0       	rjmp	.+276    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
    505c:	7b c0       	rjmp	.+246    	; 0x5154 <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    505e:	80 91 5c 06 	lds	r24, 0x065C
    5062:	81 3a       	cpi	r24, 0xA1	; 161
    5064:	09 f0       	breq	.+2      	; 0x5068 <CDC_Device_ProcessControlRequest+0x4e>
    5066:	84 c0       	rjmp	.+264    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5068:	80 91 e8 00 	lds	r24, 0x00E8
    506c:	87 7f       	andi	r24, 0xF7	; 247
    506e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5072:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    5076:	80 ff       	sbrs	r24, 0
    5078:	fc cf       	rjmp	.-8      	; 0x5072 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    507a:	8c 89       	ldd	r24, Y+20	; 0x14
    507c:	9d 89       	ldd	r25, Y+21	; 0x15
    507e:	ae 89       	ldd	r26, Y+22	; 0x16
    5080:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    5082:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    5086:	29 2f       	mov	r18, r25
    5088:	3a 2f       	mov	r19, r26
    508a:	4b 2f       	mov	r20, r27
    508c:	55 27       	eor	r21, r21
    508e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    5092:	9d 01       	movw	r18, r26
    5094:	44 27       	eor	r20, r20
    5096:	55 27       	eor	r21, r21
    5098:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    509c:	8b 2f       	mov	r24, r27
    509e:	99 27       	eor	r25, r25
    50a0:	aa 27       	eor	r26, r26
    50a2:	bb 27       	eor	r27, r27
    50a4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    50a8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    50aa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    50ae:	89 8d       	ldd	r24, Y+25	; 0x19
    50b0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    50b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    50b6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    50ba:	80 91 e8 00 	lds	r24, 0x00E8
    50be:	8e 77       	andi	r24, 0x7E	; 126
    50c0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    50c4:	a8 db       	rcall	.-2224   	; 0x4816 <Endpoint_ClearStatusStage>
    50c6:	54 c0       	rjmp	.+168    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    50c8:	80 91 5c 06 	lds	r24, 0x065C
    50cc:	81 32       	cpi	r24, 0x21	; 33
    50ce:	09 f0       	breq	.+2      	; 0x50d2 <CDC_Device_ProcessControlRequest+0xb8>
    50d0:	4f c0       	rjmp	.+158    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    50d2:	80 91 e8 00 	lds	r24, 0x00E8
    50d6:	87 7f       	andi	r24, 0xF7	; 247
    50d8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    50dc:	05 c0       	rjmp	.+10     	; 0x50e8 <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    50de:	80 91 5b 06 	lds	r24, 0x065B
    50e2:	88 23       	and	r24, r24
    50e4:	09 f4       	brne	.+2      	; 0x50e8 <CDC_Device_ProcessControlRequest+0xce>
    50e6:	44 c0       	rjmp	.+136    	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    50e8:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    50ec:	82 ff       	sbrs	r24, 2
    50ee:	f7 cf       	rjmp	.-18     	; 0x50de <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    50f0:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    50f4:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    50f8:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    50fc:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    5100:	3c 8b       	std	Y+20, r19	; 0x14
    5102:	2d 8b       	std	Y+21, r18	; 0x15
    5104:	9e 8b       	std	Y+22, r25	; 0x16
    5106:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5108:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    510c:	88 8f       	std	Y+24, r24	; 0x18
    510e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    5112:	89 8f       	std	Y+25, r24	; 0x19
    5114:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    5118:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    511a:	80 91 e8 00 	lds	r24, 0x00E8
    511e:	8b 77       	andi	r24, 0x7B	; 123
    5120:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    5124:	78 db       	rcall	.-2320   	; 0x4816 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    5126:	ce 01       	movw	r24, r28
    5128:	63 d1       	rcall	.+710    	; 0x53f0 <CDC_Device_Event_Stub>
    512a:	22 c0       	rjmp	.+68     	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    512c:	80 91 5c 06 	lds	r24, 0x065C
    5130:	81 32       	cpi	r24, 0x21	; 33
    5132:	f1 f4       	brne	.+60     	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5134:	80 91 e8 00 	lds	r24, 0x00E8
    5138:	87 7f       	andi	r24, 0xF7	; 247
    513a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    513e:	6b db       	rcall	.-2346   	; 0x4816 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    5140:	80 91 5e 06 	lds	r24, 0x065E
    5144:	90 91 5f 06 	lds	r25, 0x065F
    5148:	99 8b       	std	Y+17, r25	; 0x11
    514a:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    514c:	ce 01       	movw	r24, r28
    514e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <EVENT_CDC_Device_ControLineStateChanged>
    5152:	0e c0       	rjmp	.+28     	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5154:	80 91 5c 06 	lds	r24, 0x065C
    5158:	81 32       	cpi	r24, 0x21	; 33
    515a:	51 f4       	brne	.+20     	; 0x5170 <CDC_Device_ProcessControlRequest+0x156>
    515c:	80 91 e8 00 	lds	r24, 0x00E8
    5160:	87 7f       	andi	r24, 0xF7	; 247
    5162:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    5166:	57 db       	rcall	.-2386   	; 0x4816 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    5168:	ce 01       	movw	r24, r28
    516a:	60 91 5e 06 	lds	r22, 0x065E
    516e:	40 d1       	rcall	.+640    	; 0x53f0 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	08 95       	ret

00005176 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    5176:	cf 93       	push	r28
    5178:	df 93       	push	r29
    517a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    517c:	40 96       	adiw	r24, 0x10	; 16
    517e:	fc 01       	movw	r30, r24
    5180:	8b e0       	ldi	r24, 0x0B	; 11
    5182:	df 01       	movw	r26, r30
    5184:	1d 92       	st	X+, r1
    5186:	8a 95       	dec	r24
    5188:	e9 f7       	brne	.-6      	; 0x5184 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    518a:	82 e0       	ldi	r24, 0x02	; 2
    518c:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    518e:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    5190:	83 e0       	ldi	r24, 0x03	; 3
    5192:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    5194:	ce 01       	movw	r24, r28
    5196:	01 96       	adiw	r24, 0x01	; 1
    5198:	61 e0       	ldi	r22, 0x01	; 1
    519a:	f9 da       	rcall	.-2574   	; 0x478e <Endpoint_ConfigureEndpointTable>
    519c:	88 23       	and	r24, r24
    519e:	59 f0       	breq	.+22     	; 0x51b6 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    51a0:	ce 01       	movw	r24, r28
    51a2:	06 96       	adiw	r24, 0x06	; 6
    51a4:	61 e0       	ldi	r22, 0x01	; 1
    51a6:	f3 da       	rcall	.-2586   	; 0x478e <Endpoint_ConfigureEndpointTable>
    51a8:	88 23       	and	r24, r24
    51aa:	29 f0       	breq	.+10     	; 0x51b6 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    51ac:	ce 01       	movw	r24, r28
    51ae:	0b 96       	adiw	r24, 0x0b	; 11
    51b0:	61 e0       	ldi	r22, 0x01	; 1
    51b2:	ed da       	rcall	.-2598   	; 0x478e <Endpoint_ConfigureEndpointTable>
    51b4:	01 c0       	rjmp	.+2      	; 0x51b8 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    51b6:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	08 95       	ret

000051be <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    51be:	df 93       	push	r29
    51c0:	cf 93       	push	r28
    51c2:	0f 92       	push	r0
    51c4:	cd b7       	in	r28, 0x3d	; 61
    51c6:	de b7       	in	r29, 0x3e	; 62
    51c8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    51ca:	80 91 5b 06 	lds	r24, 0x065B
    51ce:	84 30       	cpi	r24, 0x04	; 4
    51d0:	f9 f4       	brne	.+62     	; 0x5210 <CDC_Device_SendByte+0x52>
    51d2:	24 89       	ldd	r18, Z+20	; 0x14
    51d4:	35 89       	ldd	r19, Z+21	; 0x15
    51d6:	46 89       	ldd	r20, Z+22	; 0x16
    51d8:	57 89       	ldd	r21, Z+23	; 0x17
    51da:	21 15       	cp	r18, r1
    51dc:	31 05       	cpc	r19, r1
    51de:	41 05       	cpc	r20, r1
    51e0:	51 05       	cpc	r21, r1
    51e2:	b1 f0       	breq	.+44     	; 0x5210 <CDC_Device_SendByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    51e4:	81 81       	ldd	r24, Z+1	; 0x01
    51e6:	8f 70       	andi	r24, 0x0F	; 15
    51e8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    51ec:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    51f0:	85 fd       	sbrc	r24, 5
    51f2:	0a c0       	rjmp	.+20     	; 0x5208 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    51f4:	80 91 e8 00 	lds	r24, 0x00E8
    51f8:	8e 77       	andi	r24, 0x7E	; 126
    51fa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    51fe:	69 83       	std	Y+1, r22	; 0x01
    5200:	2b db       	rcall	.-2474   	; 0x4858 <Endpoint_WaitUntilReady>
    5202:	69 81       	ldd	r22, Y+1	; 0x01
    5204:	88 23       	and	r24, r24
    5206:	29 f4       	brne	.+10     	; 0x5212 <CDC_Device_SendByte+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5208:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	01 c0       	rjmp	.+2      	; 0x5212 <CDC_Device_SendByte+0x54>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    5210:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    5212:	0f 90       	pop	r0
    5214:	cf 91       	pop	r28
    5216:	df 91       	pop	r29
    5218:	08 95       	ret

0000521a <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    521a:	28 2f       	mov	r18, r24
    521c:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    521e:	84 85       	ldd	r24, Z+12	; 0x0c
    5220:	95 85       	ldd	r25, Z+13	; 0x0d
    5222:	62 2f       	mov	r22, r18
    5224:	cc df       	rcall	.-104    	; 0x51be <CDC_Device_SendByte>
    5226:	88 23       	and	r24, r24
    5228:	19 f0       	breq	.+6      	; 0x5230 <CDC_Device_putchar+0x16>
    522a:	2f ef       	ldi	r18, 0xFF	; 255
    522c:	3f ef       	ldi	r19, 0xFF	; 255
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <CDC_Device_putchar+0x1a>
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
}
    5234:	c9 01       	movw	r24, r18
    5236:	08 95       	ret

00005238 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    5238:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    523a:	80 91 5b 06 	lds	r24, 0x065B
    523e:	84 30       	cpi	r24, 0x04	; 4
    5240:	51 f5       	brne	.+84     	; 0x5296 <CDC_Device_Flush+0x5e>
    5242:	24 89       	ldd	r18, Z+20	; 0x14
    5244:	35 89       	ldd	r19, Z+21	; 0x15
    5246:	46 89       	ldd	r20, Z+22	; 0x16
    5248:	57 89       	ldd	r21, Z+23	; 0x17
    524a:	21 15       	cp	r18, r1
    524c:	31 05       	cpc	r19, r1
    524e:	41 05       	cpc	r20, r1
    5250:	51 05       	cpc	r21, r1
    5252:	09 f1       	breq	.+66     	; 0x5296 <CDC_Device_Flush+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5254:	81 81       	ldd	r24, Z+1	; 0x01
    5256:	8f 70       	andi	r24, 0x0F	; 15
    5258:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    525c:	90 91 f3 00 	lds	r25, 0x00F3
    5260:	80 91 f2 00 	lds	r24, 0x00F2
    5264:	39 2f       	mov	r19, r25
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	82 2b       	or	r24, r18
    526c:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    526e:	00 97       	sbiw	r24, 0x00	; 0
    5270:	a1 f0       	breq	.+40     	; 0x529a <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5272:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5276:	80 91 e8 00 	lds	r24, 0x00E8
    527a:	8e 77       	andi	r24, 0x7E	; 126
    527c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    5280:	95 fd       	sbrc	r25, 5
    5282:	0d c0       	rjmp	.+26     	; 0x529e <CDC_Device_Flush+0x66>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    5284:	e9 da       	rcall	.-2606   	; 0x4858 <Endpoint_WaitUntilReady>
    5286:	88 23       	and	r24, r24
    5288:	59 f4       	brne	.+22     	; 0x52a0 <CDC_Device_Flush+0x68>
    528a:	90 91 e8 00 	lds	r25, 0x00E8
    528e:	9e 77       	andi	r25, 0x7E	; 126
    5290:	90 93 e8 00 	sts	0x00E8, r25
    5294:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    5296:	82 e0       	ldi	r24, 0x02	; 2
    5298:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    529e:	80 e0       	ldi	r24, 0x00	; 0
}
    52a0:	08 95       	ret

000052a2 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    52a2:	20 91 5b 06 	lds	r18, 0x065B
    52a6:	24 30       	cpi	r18, 0x04	; 4
    52a8:	99 f4       	brne	.+38     	; 0x52d0 <CDC_Device_USBTask+0x2e>
    52aa:	fc 01       	movw	r30, r24
    52ac:	24 89       	ldd	r18, Z+20	; 0x14
    52ae:	35 89       	ldd	r19, Z+21	; 0x15
    52b0:	46 89       	ldd	r20, Z+22	; 0x16
    52b2:	57 89       	ldd	r21, Z+23	; 0x17
    52b4:	21 15       	cp	r18, r1
    52b6:	31 05       	cpc	r19, r1
    52b8:	41 05       	cpc	r20, r1
    52ba:	51 05       	cpc	r21, r1
    52bc:	49 f0       	breq	.+18     	; 0x52d0 <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    52be:	21 81       	ldd	r18, Z+1	; 0x01
    52c0:	2f 70       	andi	r18, 0x0F	; 15
    52c2:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    52c6:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	
	if (Endpoint_IsINReady())
    52ca:	20 ff       	sbrs	r18, 0
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
    52ce:	b4 cf       	rjmp	.-152    	; 0x5238 <CDC_Device_Flush>
    52d0:	08 95       	ret

000052d2 <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    52d2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    52d4:	80 91 5b 06 	lds	r24, 0x065B
    52d8:	84 30       	cpi	r24, 0x04	; 4
    52da:	61 f5       	brne	.+88     	; 0x5334 <CDC_Device_BytesReceived+0x62>
    52dc:	24 89       	ldd	r18, Z+20	; 0x14
    52de:	35 89       	ldd	r19, Z+21	; 0x15
    52e0:	46 89       	ldd	r20, Z+22	; 0x16
    52e2:	57 89       	ldd	r21, Z+23	; 0x17
    52e4:	21 15       	cp	r18, r1
    52e6:	31 05       	cpc	r19, r1
    52e8:	41 05       	cpc	r20, r1
    52ea:	51 05       	cpc	r21, r1
    52ec:	19 f1       	breq	.+70     	; 0x5334 <CDC_Device_BytesReceived+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    52ee:	86 81       	ldd	r24, Z+6	; 0x06
    52f0:	8f 70       	andi	r24, 0x0F	; 15
    52f2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    52f6:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    52fa:	82 ff       	sbrs	r24, 2
    52fc:	1b c0       	rjmp	.+54     	; 0x5334 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    52fe:	90 91 f3 00 	lds	r25, 0x00F3
    5302:	80 91 f2 00 	lds	r24, 0x00F2
    5306:	39 2f       	mov	r19, r25
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	82 2b       	or	r24, r18
    530e:	93 2b       	or	r25, r19
	{
		if (!(Endpoint_BytesInEndpoint()))
    5310:	00 97       	sbiw	r24, 0x00	; 0
    5312:	31 f4       	brne	.+12     	; 0x5320 <CDC_Device_BytesReceived+0x4e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5314:	80 91 e8 00 	lds	r24, 0x00E8
    5318:	8b 77       	andi	r24, 0x7B	; 123
    531a:	80 93 e8 00 	sts	0x00E8, r24
    531e:	0a c0       	rjmp	.+20     	; 0x5334 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    5320:	30 91 f3 00 	lds	r19, 0x00F3
    5324:	20 91 f2 00 	lds	r18, 0x00F2
    5328:	93 2f       	mov	r25, r19
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	30 e0       	ldi	r19, 0x00	; 0
    532e:	28 2b       	or	r18, r24
    5330:	39 2b       	or	r19, r25
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    5332:	02 c0       	rjmp	.+4      	; 0x5338 <CDC_Device_BytesReceived+0x66>
		}
	}
	else
	{
		return 0;
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    5338:	c9 01       	movw	r24, r18
    533a:	08 95       	ret

0000533c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    533c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    533e:	80 91 5b 06 	lds	r24, 0x065B
    5342:	84 30       	cpi	r24, 0x04	; 4
    5344:	99 f5       	brne	.+102    	; 0x53ac <CDC_Device_ReceiveByte+0x70>
    5346:	24 89       	ldd	r18, Z+20	; 0x14
    5348:	35 89       	ldd	r19, Z+21	; 0x15
    534a:	46 89       	ldd	r20, Z+22	; 0x16
    534c:	57 89       	ldd	r21, Z+23	; 0x17
    534e:	21 15       	cp	r18, r1
    5350:	31 05       	cpc	r19, r1
    5352:	41 05       	cpc	r20, r1
    5354:	51 05       	cpc	r21, r1
    5356:	51 f1       	breq	.+84     	; 0x53ac <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5358:	86 81       	ldd	r24, Z+6	; 0x06
    535a:	8f 70       	andi	r24, 0x0F	; 15
    535c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5360:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    5364:	82 ff       	sbrs	r24, 2
    5366:	22 c0       	rjmp	.+68     	; 0x53ac <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    5368:	90 91 f3 00 	lds	r25, 0x00F3
    536c:	80 91 f2 00 	lds	r24, 0x00F2
    5370:	39 2f       	mov	r19, r25
    5372:	20 e0       	ldi	r18, 0x00	; 0
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	82 2b       	or	r24, r18
    5378:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    537a:	00 97       	sbiw	r24, 0x00	; 0
    537c:	21 f0       	breq	.+8      	; 0x5386 <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    537e:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	02 c0       	rjmp	.+4      	; 0x538a <CDC_Device_ReceiveByte+0x4e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    5386:	2f ef       	ldi	r18, 0xFF	; 255
    5388:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    538a:	90 91 f3 00 	lds	r25, 0x00F3
    538e:	80 91 f2 00 	lds	r24, 0x00F2
    5392:	59 2f       	mov	r21, r25
    5394:	40 e0       	ldi	r20, 0x00	; 0
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	84 2b       	or	r24, r20
    539a:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	41 f4       	brne	.+16     	; 0x53b0 <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    53a0:	80 91 e8 00 	lds	r24, 0x00E8
    53a4:	8b 77       	andi	r24, 0x7B	; 123
    53a6:	80 93 e8 00 	sts	0x00E8, r24
    53aa:	02 c0       	rjmp	.+4      	; 0x53b0 <CDC_Device_ReceiveByte+0x74>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    53ac:	2f ef       	ldi	r18, 0xFF	; 255
    53ae:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    53b0:	c9 01       	movw	r24, r18
    53b2:	08 95       	ret

000053b4 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    53b4:	fc 01       	movw	r30, r24
    53b6:	84 85       	ldd	r24, Z+12	; 0x0c
    53b8:	95 85       	ldd	r25, Z+13	; 0x0d
    53ba:	c0 df       	rcall	.-128    	; 0x533c <CDC_Device_ReceiveByte>
    53bc:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    53be:	97 ff       	sbrs	r25, 7
    53c0:	02 c0       	rjmp	.+4      	; 0x53c6 <CDC_Device_getchar+0x12>
	  return _FDEV_EOF;
    53c2:	2e ef       	ldi	r18, 0xFE	; 254
    53c4:	3f ef       	ldi	r19, 0xFF	; 255

	return ReceivedByte;
}
    53c6:	c9 01       	movw	r24, r18
    53c8:	08 95       	ret

000053ca <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    53ca:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    53cc:	2e e0       	ldi	r18, 0x0E	; 14
    53ce:	db 01       	movw	r26, r22
    53d0:	1d 92       	st	X+, r1
    53d2:	2a 95       	dec	r18
    53d4:	e9 f7       	brne	.-6      	; 0x53d0 <CDC_Device_CreateStream+0x6>
    53d6:	23 e0       	ldi	r18, 0x03	; 3
    53d8:	23 83       	std	Z+3, r18	; 0x03
    53da:	2d e0       	ldi	r18, 0x0D	; 13
    53dc:	39 e2       	ldi	r19, 0x29	; 41
    53de:	31 87       	std	Z+9, r19	; 0x09
    53e0:	20 87       	std	Z+8, r18	; 0x08
    53e2:	2a ed       	ldi	r18, 0xDA	; 218
    53e4:	39 e2       	ldi	r19, 0x29	; 41
    53e6:	33 87       	std	Z+11, r19	; 0x0b
    53e8:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    53ea:	95 87       	std	Z+13, r25	; 0x0d
    53ec:	84 87       	std	Z+12, r24	; 0x0c
}
    53ee:	08 95       	ret

000053f0 <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
    53f0:	08 95       	ret

000053f2 <__subsf3>:
    53f2:	50 58       	subi	r21, 0x80	; 128

000053f4 <__addsf3>:
    53f4:	bb 27       	eor	r27, r27
    53f6:	aa 27       	eor	r26, r26
    53f8:	0e d0       	rcall	.+28     	; 0x5416 <__addsf3x>
    53fa:	76 c2       	rjmp	.+1260   	; 0x58e8 <__fp_round>
    53fc:	3f d2       	rcall	.+1150   	; 0x587c <__fp_pscA>
    53fe:	30 f0       	brcs	.+12     	; 0x540c <__addsf3+0x18>
    5400:	44 d2       	rcall	.+1160   	; 0x588a <__fp_pscB>
    5402:	20 f0       	brcs	.+8      	; 0x540c <__addsf3+0x18>
    5404:	31 f4       	brne	.+12     	; 0x5412 <__addsf3+0x1e>
    5406:	9f 3f       	cpi	r25, 0xFF	; 255
    5408:	11 f4       	brne	.+4      	; 0x540e <__addsf3+0x1a>
    540a:	1e f4       	brtc	.+6      	; 0x5412 <__addsf3+0x1e>
    540c:	0f c2       	rjmp	.+1054   	; 0x582c <__fp_nan>
    540e:	0e f4       	brtc	.+2      	; 0x5412 <__addsf3+0x1e>
    5410:	e0 95       	com	r30
    5412:	e7 fb       	bst	r30, 7
    5414:	dc c1       	rjmp	.+952    	; 0x57ce <__fp_inf>

00005416 <__addsf3x>:
    5416:	e9 2f       	mov	r30, r25
    5418:	89 d2       	rcall	.+1298   	; 0x592c <__fp_split3>
    541a:	80 f3       	brcs	.-32     	; 0x53fc <__addsf3+0x8>
    541c:	ba 17       	cp	r27, r26
    541e:	62 07       	cpc	r22, r18
    5420:	73 07       	cpc	r23, r19
    5422:	84 07       	cpc	r24, r20
    5424:	95 07       	cpc	r25, r21
    5426:	18 f0       	brcs	.+6      	; 0x542e <__addsf3x+0x18>
    5428:	71 f4       	brne	.+28     	; 0x5446 <__addsf3x+0x30>
    542a:	9e f5       	brtc	.+102    	; 0x5492 <__addsf3x+0x7c>
    542c:	b8 c2       	rjmp	.+1392   	; 0x599e <__fp_zero>
    542e:	0e f4       	brtc	.+2      	; 0x5432 <__addsf3x+0x1c>
    5430:	e0 95       	com	r30
    5432:	0b 2e       	mov	r0, r27
    5434:	ba 2f       	mov	r27, r26
    5436:	a0 2d       	mov	r26, r0
    5438:	0b 01       	movw	r0, r22
    543a:	b9 01       	movw	r22, r18
    543c:	90 01       	movw	r18, r0
    543e:	0c 01       	movw	r0, r24
    5440:	ca 01       	movw	r24, r20
    5442:	a0 01       	movw	r20, r0
    5444:	11 24       	eor	r1, r1
    5446:	ff 27       	eor	r31, r31
    5448:	59 1b       	sub	r21, r25
    544a:	99 f0       	breq	.+38     	; 0x5472 <__addsf3x+0x5c>
    544c:	59 3f       	cpi	r21, 0xF9	; 249
    544e:	50 f4       	brcc	.+20     	; 0x5464 <__addsf3x+0x4e>
    5450:	50 3e       	cpi	r21, 0xE0	; 224
    5452:	68 f1       	brcs	.+90     	; 0x54ae <__addsf3x+0x98>
    5454:	1a 16       	cp	r1, r26
    5456:	f0 40       	sbci	r31, 0x00	; 0
    5458:	a2 2f       	mov	r26, r18
    545a:	23 2f       	mov	r18, r19
    545c:	34 2f       	mov	r19, r20
    545e:	44 27       	eor	r20, r20
    5460:	58 5f       	subi	r21, 0xF8	; 248
    5462:	f3 cf       	rjmp	.-26     	; 0x544a <__addsf3x+0x34>
    5464:	46 95       	lsr	r20
    5466:	37 95       	ror	r19
    5468:	27 95       	ror	r18
    546a:	a7 95       	ror	r26
    546c:	f0 40       	sbci	r31, 0x00	; 0
    546e:	53 95       	inc	r21
    5470:	c9 f7       	brne	.-14     	; 0x5464 <__addsf3x+0x4e>
    5472:	7e f4       	brtc	.+30     	; 0x5492 <__addsf3x+0x7c>
    5474:	1f 16       	cp	r1, r31
    5476:	ba 0b       	sbc	r27, r26
    5478:	62 0b       	sbc	r22, r18
    547a:	73 0b       	sbc	r23, r19
    547c:	84 0b       	sbc	r24, r20
    547e:	ba f0       	brmi	.+46     	; 0x54ae <__addsf3x+0x98>
    5480:	91 50       	subi	r25, 0x01	; 1
    5482:	a1 f0       	breq	.+40     	; 0x54ac <__addsf3x+0x96>
    5484:	ff 0f       	add	r31, r31
    5486:	bb 1f       	adc	r27, r27
    5488:	66 1f       	adc	r22, r22
    548a:	77 1f       	adc	r23, r23
    548c:	88 1f       	adc	r24, r24
    548e:	c2 f7       	brpl	.-16     	; 0x5480 <__addsf3x+0x6a>
    5490:	0e c0       	rjmp	.+28     	; 0x54ae <__addsf3x+0x98>
    5492:	ba 0f       	add	r27, r26
    5494:	62 1f       	adc	r22, r18
    5496:	73 1f       	adc	r23, r19
    5498:	84 1f       	adc	r24, r20
    549a:	48 f4       	brcc	.+18     	; 0x54ae <__addsf3x+0x98>
    549c:	87 95       	ror	r24
    549e:	77 95       	ror	r23
    54a0:	67 95       	ror	r22
    54a2:	b7 95       	ror	r27
    54a4:	f7 95       	ror	r31
    54a6:	9e 3f       	cpi	r25, 0xFE	; 254
    54a8:	08 f0       	brcs	.+2      	; 0x54ac <__addsf3x+0x96>
    54aa:	b3 cf       	rjmp	.-154    	; 0x5412 <__addsf3+0x1e>
    54ac:	93 95       	inc	r25
    54ae:	88 0f       	add	r24, r24
    54b0:	08 f0       	brcs	.+2      	; 0x54b4 <__addsf3x+0x9e>
    54b2:	99 27       	eor	r25, r25
    54b4:	ee 0f       	add	r30, r30
    54b6:	97 95       	ror	r25
    54b8:	87 95       	ror	r24
    54ba:	08 95       	ret
    54bc:	df d1       	rcall	.+958    	; 0x587c <__fp_pscA>
    54be:	58 f0       	brcs	.+22     	; 0x54d6 <__addsf3x+0xc0>
    54c0:	80 e8       	ldi	r24, 0x80	; 128
    54c2:	91 e0       	ldi	r25, 0x01	; 1
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <__addsf3x+0xb2>
    54c6:	9e ef       	ldi	r25, 0xFE	; 254
    54c8:	e0 d1       	rcall	.+960    	; 0x588a <__fp_pscB>
    54ca:	28 f0       	brcs	.+10     	; 0x54d6 <__addsf3x+0xc0>
    54cc:	40 e8       	ldi	r20, 0x80	; 128
    54ce:	51 e0       	ldi	r21, 0x01	; 1
    54d0:	59 f4       	brne	.+22     	; 0x54e8 <atan2+0xe>
    54d2:	5e ef       	ldi	r21, 0xFE	; 254
    54d4:	09 c0       	rjmp	.+18     	; 0x54e8 <atan2+0xe>
    54d6:	aa c1       	rjmp	.+852    	; 0x582c <__fp_nan>
    54d8:	62 c2       	rjmp	.+1220   	; 0x599e <__fp_zero>

000054da <atan2>:
    54da:	e9 2f       	mov	r30, r25
    54dc:	e0 78       	andi	r30, 0x80	; 128
    54de:	26 d2       	rcall	.+1100   	; 0x592c <__fp_split3>
    54e0:	68 f3       	brcs	.-38     	; 0x54bc <__addsf3x+0xa6>
    54e2:	09 2e       	mov	r0, r25
    54e4:	05 2a       	or	r0, r21
    54e6:	c1 f3       	breq	.-16     	; 0x54d8 <__addsf3x+0xc2>
    54e8:	26 17       	cp	r18, r22
    54ea:	37 07       	cpc	r19, r23
    54ec:	48 07       	cpc	r20, r24
    54ee:	59 07       	cpc	r21, r25
    54f0:	38 f0       	brcs	.+14     	; 0x5500 <atan2+0x26>
    54f2:	0e 2e       	mov	r0, r30
    54f4:	07 f8       	bld	r0, 7
    54f6:	e0 25       	eor	r30, r0
    54f8:	69 f0       	breq	.+26     	; 0x5514 <atan2+0x3a>
    54fa:	e0 25       	eor	r30, r0
    54fc:	e0 64       	ori	r30, 0x40	; 64
    54fe:	0a c0       	rjmp	.+20     	; 0x5514 <atan2+0x3a>
    5500:	ef 63       	ori	r30, 0x3F	; 63
    5502:	07 f8       	bld	r0, 7
    5504:	00 94       	com	r0
    5506:	07 fa       	bst	r0, 7
    5508:	db 01       	movw	r26, r22
    550a:	b9 01       	movw	r22, r18
    550c:	9d 01       	movw	r18, r26
    550e:	dc 01       	movw	r26, r24
    5510:	ca 01       	movw	r24, r20
    5512:	ad 01       	movw	r20, r26
    5514:	ef 93       	push	r30
    5516:	5d d0       	rcall	.+186    	; 0x55d2 <__divsf3_pse>
    5518:	e7 d1       	rcall	.+974    	; 0x58e8 <__fp_round>
    551a:	0a d0       	rcall	.+20     	; 0x5530 <atan>
    551c:	5f 91       	pop	r21
    551e:	55 23       	and	r21, r21
    5520:	31 f0       	breq	.+12     	; 0x552e <atan2+0x54>
    5522:	2b ed       	ldi	r18, 0xDB	; 219
    5524:	3f e0       	ldi	r19, 0x0F	; 15
    5526:	49 e4       	ldi	r20, 0x49	; 73
    5528:	50 fd       	sbrc	r21, 0
    552a:	49 ec       	ldi	r20, 0xC9	; 201
    552c:	63 cf       	rjmp	.-314    	; 0x53f4 <__addsf3>
    552e:	08 95       	ret

00005530 <atan>:
    5530:	df 93       	push	r29
    5532:	dd 27       	eor	r29, r29
    5534:	b9 2f       	mov	r27, r25
    5536:	bf 77       	andi	r27, 0x7F	; 127
    5538:	40 e8       	ldi	r20, 0x80	; 128
    553a:	5f e3       	ldi	r21, 0x3F	; 63
    553c:	16 16       	cp	r1, r22
    553e:	17 06       	cpc	r1, r23
    5540:	48 07       	cpc	r20, r24
    5542:	5b 07       	cpc	r21, r27
    5544:	10 f4       	brcc	.+4      	; 0x554a <atan+0x1a>
    5546:	d9 2f       	mov	r29, r25
    5548:	96 d2       	rcall	.+1324   	; 0x5a76 <inverse>
    554a:	9f 93       	push	r25
    554c:	8f 93       	push	r24
    554e:	7f 93       	push	r23
    5550:	6f 93       	push	r22
    5552:	c9 d3       	rcall	.+1938   	; 0x5ce6 <square>
    5554:	ec ea       	ldi	r30, 0xAC	; 172
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	6c d1       	rcall	.+728    	; 0x5832 <__fp_powser>
    555a:	c6 d1       	rcall	.+908    	; 0x58e8 <__fp_round>
    555c:	2f 91       	pop	r18
    555e:	3f 91       	pop	r19
    5560:	4f 91       	pop	r20
    5562:	5f 91       	pop	r21
    5564:	01 d3       	rcall	.+1538   	; 0x5b68 <__mulsf3x>
    5566:	dd 23       	and	r29, r29
    5568:	49 f0       	breq	.+18     	; 0x557c <atan+0x4c>
    556a:	90 58       	subi	r25, 0x80	; 128
    556c:	a2 ea       	ldi	r26, 0xA2	; 162
    556e:	2a ed       	ldi	r18, 0xDA	; 218
    5570:	3f e0       	ldi	r19, 0x0F	; 15
    5572:	49 ec       	ldi	r20, 0xC9	; 201
    5574:	5f e3       	ldi	r21, 0x3F	; 63
    5576:	d0 78       	andi	r29, 0x80	; 128
    5578:	5d 27       	eor	r21, r29
    557a:	4d df       	rcall	.-358    	; 0x5416 <__addsf3x>
    557c:	df 91       	pop	r29
    557e:	b4 c1       	rjmp	.+872    	; 0x58e8 <__fp_round>

00005580 <ceil>:
    5580:	f7 d1       	rcall	.+1006   	; 0x5970 <__fp_trunc>
    5582:	80 f0       	brcs	.+32     	; 0x55a4 <ceil+0x24>
    5584:	9f 37       	cpi	r25, 0x7F	; 127
    5586:	40 f4       	brcc	.+16     	; 0x5598 <ceil+0x18>
    5588:	91 11       	cpse	r25, r1
    558a:	0e f4       	brtc	.+2      	; 0x558e <ceil+0xe>
    558c:	09 c2       	rjmp	.+1042   	; 0x59a0 <__fp_szero>
    558e:	60 e0       	ldi	r22, 0x00	; 0
    5590:	70 e0       	ldi	r23, 0x00	; 0
    5592:	80 e8       	ldi	r24, 0x80	; 128
    5594:	9f e3       	ldi	r25, 0x3F	; 63
    5596:	08 95       	ret
    5598:	26 f0       	brts	.+8      	; 0x55a2 <ceil+0x22>
    559a:	1b 16       	cp	r1, r27
    559c:	61 1d       	adc	r22, r1
    559e:	71 1d       	adc	r23, r1
    55a0:	81 1d       	adc	r24, r1
    55a2:	1b c1       	rjmp	.+566    	; 0x57da <__fp_mintl>
    55a4:	35 c1       	rjmp	.+618    	; 0x5810 <__fp_mpack>

000055a6 <__cmpsf2>:
    55a6:	ef d0       	rcall	.+478    	; 0x5786 <__fp_cmp>
    55a8:	08 f4       	brcc	.+2      	; 0x55ac <__cmpsf2+0x6>
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	08 95       	ret

000055ae <cos>:
    55ae:	75 d1       	rcall	.+746    	; 0x589a <__fp_rempio2>
    55b0:	e3 95       	inc	r30
    55b2:	ab c1       	rjmp	.+854    	; 0x590a <__fp_sinus>

000055b4 <__divsf3>:
    55b4:	0c d0       	rcall	.+24     	; 0x55ce <__divsf3x>
    55b6:	98 c1       	rjmp	.+816    	; 0x58e8 <__fp_round>
    55b8:	68 d1       	rcall	.+720    	; 0x588a <__fp_pscB>
    55ba:	40 f0       	brcs	.+16     	; 0x55cc <__divsf3+0x18>
    55bc:	5f d1       	rcall	.+702    	; 0x587c <__fp_pscA>
    55be:	30 f0       	brcs	.+12     	; 0x55cc <__divsf3+0x18>
    55c0:	21 f4       	brne	.+8      	; 0x55ca <__divsf3+0x16>
    55c2:	5f 3f       	cpi	r21, 0xFF	; 255
    55c4:	19 f0       	breq	.+6      	; 0x55cc <__divsf3+0x18>
    55c6:	03 c1       	rjmp	.+518    	; 0x57ce <__fp_inf>
    55c8:	51 11       	cpse	r21, r1
    55ca:	ea c1       	rjmp	.+980    	; 0x59a0 <__fp_szero>
    55cc:	2f c1       	rjmp	.+606    	; 0x582c <__fp_nan>

000055ce <__divsf3x>:
    55ce:	ae d1       	rcall	.+860    	; 0x592c <__fp_split3>
    55d0:	98 f3       	brcs	.-26     	; 0x55b8 <__divsf3+0x4>

000055d2 <__divsf3_pse>:
    55d2:	99 23       	and	r25, r25
    55d4:	c9 f3       	breq	.-14     	; 0x55c8 <__divsf3+0x14>
    55d6:	55 23       	and	r21, r21
    55d8:	b1 f3       	breq	.-20     	; 0x55c6 <__divsf3+0x12>
    55da:	95 1b       	sub	r25, r21
    55dc:	55 0b       	sbc	r21, r21
    55de:	bb 27       	eor	r27, r27
    55e0:	aa 27       	eor	r26, r26
    55e2:	62 17       	cp	r22, r18
    55e4:	73 07       	cpc	r23, r19
    55e6:	84 07       	cpc	r24, r20
    55e8:	38 f0       	brcs	.+14     	; 0x55f8 <__divsf3_pse+0x26>
    55ea:	9f 5f       	subi	r25, 0xFF	; 255
    55ec:	5f 4f       	sbci	r21, 0xFF	; 255
    55ee:	22 0f       	add	r18, r18
    55f0:	33 1f       	adc	r19, r19
    55f2:	44 1f       	adc	r20, r20
    55f4:	aa 1f       	adc	r26, r26
    55f6:	a9 f3       	breq	.-22     	; 0x55e2 <__divsf3_pse+0x10>
    55f8:	33 d0       	rcall	.+102    	; 0x5660 <__divsf3_pse+0x8e>
    55fa:	0e 2e       	mov	r0, r30
    55fc:	3a f0       	brmi	.+14     	; 0x560c <__divsf3_pse+0x3a>
    55fe:	e0 e8       	ldi	r30, 0x80	; 128
    5600:	30 d0       	rcall	.+96     	; 0x5662 <__divsf3_pse+0x90>
    5602:	91 50       	subi	r25, 0x01	; 1
    5604:	50 40       	sbci	r21, 0x00	; 0
    5606:	e6 95       	lsr	r30
    5608:	00 1c       	adc	r0, r0
    560a:	ca f7       	brpl	.-14     	; 0x55fe <__divsf3_pse+0x2c>
    560c:	29 d0       	rcall	.+82     	; 0x5660 <__divsf3_pse+0x8e>
    560e:	fe 2f       	mov	r31, r30
    5610:	27 d0       	rcall	.+78     	; 0x5660 <__divsf3_pse+0x8e>
    5612:	66 0f       	add	r22, r22
    5614:	77 1f       	adc	r23, r23
    5616:	88 1f       	adc	r24, r24
    5618:	bb 1f       	adc	r27, r27
    561a:	26 17       	cp	r18, r22
    561c:	37 07       	cpc	r19, r23
    561e:	48 07       	cpc	r20, r24
    5620:	ab 07       	cpc	r26, r27
    5622:	b0 e8       	ldi	r27, 0x80	; 128
    5624:	09 f0       	breq	.+2      	; 0x5628 <__divsf3_pse+0x56>
    5626:	bb 0b       	sbc	r27, r27
    5628:	80 2d       	mov	r24, r0
    562a:	bf 01       	movw	r22, r30
    562c:	ff 27       	eor	r31, r31
    562e:	93 58       	subi	r25, 0x83	; 131
    5630:	5f 4f       	sbci	r21, 0xFF	; 255
    5632:	2a f0       	brmi	.+10     	; 0x563e <__divsf3_pse+0x6c>
    5634:	9e 3f       	cpi	r25, 0xFE	; 254
    5636:	51 05       	cpc	r21, r1
    5638:	68 f0       	brcs	.+26     	; 0x5654 <__divsf3_pse+0x82>
    563a:	c9 c0       	rjmp	.+402    	; 0x57ce <__fp_inf>
    563c:	b1 c1       	rjmp	.+866    	; 0x59a0 <__fp_szero>
    563e:	5f 3f       	cpi	r21, 0xFF	; 255
    5640:	ec f3       	brlt	.-6      	; 0x563c <__divsf3_pse+0x6a>
    5642:	98 3e       	cpi	r25, 0xE8	; 232
    5644:	dc f3       	brlt	.-10     	; 0x563c <__divsf3_pse+0x6a>
    5646:	86 95       	lsr	r24
    5648:	77 95       	ror	r23
    564a:	67 95       	ror	r22
    564c:	b7 95       	ror	r27
    564e:	f7 95       	ror	r31
    5650:	9f 5f       	subi	r25, 0xFF	; 255
    5652:	c9 f7       	brne	.-14     	; 0x5646 <__divsf3_pse+0x74>
    5654:	88 0f       	add	r24, r24
    5656:	91 1d       	adc	r25, r1
    5658:	96 95       	lsr	r25
    565a:	87 95       	ror	r24
    565c:	97 f9       	bld	r25, 7
    565e:	08 95       	ret
    5660:	e1 e0       	ldi	r30, 0x01	; 1
    5662:	66 0f       	add	r22, r22
    5664:	77 1f       	adc	r23, r23
    5666:	88 1f       	adc	r24, r24
    5668:	bb 1f       	adc	r27, r27
    566a:	62 17       	cp	r22, r18
    566c:	73 07       	cpc	r23, r19
    566e:	84 07       	cpc	r24, r20
    5670:	ba 07       	cpc	r27, r26
    5672:	20 f0       	brcs	.+8      	; 0x567c <__divsf3_pse+0xaa>
    5674:	62 1b       	sub	r22, r18
    5676:	73 0b       	sbc	r23, r19
    5678:	84 0b       	sbc	r24, r20
    567a:	ba 0b       	sbc	r27, r26
    567c:	ee 1f       	adc	r30, r30
    567e:	88 f7       	brcc	.-30     	; 0x5662 <__divsf3_pse+0x90>
    5680:	e0 95       	com	r30
    5682:	08 95       	ret

00005684 <__fixsfsi>:
    5684:	04 d0       	rcall	.+8      	; 0x568e <__fixunssfsi>
    5686:	68 94       	set
    5688:	b1 11       	cpse	r27, r1
    568a:	8a c1       	rjmp	.+788    	; 0x59a0 <__fp_szero>
    568c:	08 95       	ret

0000568e <__fixunssfsi>:
    568e:	56 d1       	rcall	.+684    	; 0x593c <__fp_splitA>
    5690:	88 f0       	brcs	.+34     	; 0x56b4 <__fixunssfsi+0x26>
    5692:	9f 57       	subi	r25, 0x7F	; 127
    5694:	90 f0       	brcs	.+36     	; 0x56ba <__fixunssfsi+0x2c>
    5696:	b9 2f       	mov	r27, r25
    5698:	99 27       	eor	r25, r25
    569a:	b7 51       	subi	r27, 0x17	; 23
    569c:	a0 f0       	brcs	.+40     	; 0x56c6 <__fixunssfsi+0x38>
    569e:	d1 f0       	breq	.+52     	; 0x56d4 <__fixunssfsi+0x46>
    56a0:	66 0f       	add	r22, r22
    56a2:	77 1f       	adc	r23, r23
    56a4:	88 1f       	adc	r24, r24
    56a6:	99 1f       	adc	r25, r25
    56a8:	1a f0       	brmi	.+6      	; 0x56b0 <__fixunssfsi+0x22>
    56aa:	ba 95       	dec	r27
    56ac:	c9 f7       	brne	.-14     	; 0x56a0 <__fixunssfsi+0x12>
    56ae:	12 c0       	rjmp	.+36     	; 0x56d4 <__fixunssfsi+0x46>
    56b0:	b1 30       	cpi	r27, 0x01	; 1
    56b2:	81 f0       	breq	.+32     	; 0x56d4 <__fixunssfsi+0x46>
    56b4:	74 d1       	rcall	.+744    	; 0x599e <__fp_zero>
    56b6:	b1 e0       	ldi	r27, 0x01	; 1
    56b8:	08 95       	ret
    56ba:	71 c1       	rjmp	.+738    	; 0x599e <__fp_zero>
    56bc:	67 2f       	mov	r22, r23
    56be:	78 2f       	mov	r23, r24
    56c0:	88 27       	eor	r24, r24
    56c2:	b8 5f       	subi	r27, 0xF8	; 248
    56c4:	39 f0       	breq	.+14     	; 0x56d4 <__fixunssfsi+0x46>
    56c6:	b9 3f       	cpi	r27, 0xF9	; 249
    56c8:	cc f3       	brlt	.-14     	; 0x56bc <__fixunssfsi+0x2e>
    56ca:	86 95       	lsr	r24
    56cc:	77 95       	ror	r23
    56ce:	67 95       	ror	r22
    56d0:	b3 95       	inc	r27
    56d2:	d9 f7       	brne	.-10     	; 0x56ca <__fixunssfsi+0x3c>
    56d4:	3e f4       	brtc	.+14     	; 0x56e4 <__fixunssfsi+0x56>
    56d6:	90 95       	com	r25
    56d8:	80 95       	com	r24
    56da:	70 95       	com	r23
    56dc:	61 95       	neg	r22
    56de:	7f 4f       	sbci	r23, 0xFF	; 255
    56e0:	8f 4f       	sbci	r24, 0xFF	; 255
    56e2:	9f 4f       	sbci	r25, 0xFF	; 255
    56e4:	08 95       	ret

000056e6 <__floatunsisf>:
    56e6:	e8 94       	clt
    56e8:	09 c0       	rjmp	.+18     	; 0x56fc <__floatsisf+0x12>

000056ea <__floatsisf>:
    56ea:	97 fb       	bst	r25, 7
    56ec:	3e f4       	brtc	.+14     	; 0x56fc <__floatsisf+0x12>
    56ee:	90 95       	com	r25
    56f0:	80 95       	com	r24
    56f2:	70 95       	com	r23
    56f4:	61 95       	neg	r22
    56f6:	7f 4f       	sbci	r23, 0xFF	; 255
    56f8:	8f 4f       	sbci	r24, 0xFF	; 255
    56fa:	9f 4f       	sbci	r25, 0xFF	; 255
    56fc:	99 23       	and	r25, r25
    56fe:	a9 f0       	breq	.+42     	; 0x572a <__floatsisf+0x40>
    5700:	f9 2f       	mov	r31, r25
    5702:	96 e9       	ldi	r25, 0x96	; 150
    5704:	bb 27       	eor	r27, r27
    5706:	93 95       	inc	r25
    5708:	f6 95       	lsr	r31
    570a:	87 95       	ror	r24
    570c:	77 95       	ror	r23
    570e:	67 95       	ror	r22
    5710:	b7 95       	ror	r27
    5712:	f1 11       	cpse	r31, r1
    5714:	f8 cf       	rjmp	.-16     	; 0x5706 <__floatsisf+0x1c>
    5716:	fa f4       	brpl	.+62     	; 0x5756 <__floatsisf+0x6c>
    5718:	bb 0f       	add	r27, r27
    571a:	11 f4       	brne	.+4      	; 0x5720 <__floatsisf+0x36>
    571c:	60 ff       	sbrs	r22, 0
    571e:	1b c0       	rjmp	.+54     	; 0x5756 <__floatsisf+0x6c>
    5720:	6f 5f       	subi	r22, 0xFF	; 255
    5722:	7f 4f       	sbci	r23, 0xFF	; 255
    5724:	8f 4f       	sbci	r24, 0xFF	; 255
    5726:	9f 4f       	sbci	r25, 0xFF	; 255
    5728:	16 c0       	rjmp	.+44     	; 0x5756 <__floatsisf+0x6c>
    572a:	88 23       	and	r24, r24
    572c:	11 f0       	breq	.+4      	; 0x5732 <__floatsisf+0x48>
    572e:	96 e9       	ldi	r25, 0x96	; 150
    5730:	11 c0       	rjmp	.+34     	; 0x5754 <__floatsisf+0x6a>
    5732:	77 23       	and	r23, r23
    5734:	21 f0       	breq	.+8      	; 0x573e <__floatsisf+0x54>
    5736:	9e e8       	ldi	r25, 0x8E	; 142
    5738:	87 2f       	mov	r24, r23
    573a:	76 2f       	mov	r23, r22
    573c:	05 c0       	rjmp	.+10     	; 0x5748 <__floatsisf+0x5e>
    573e:	66 23       	and	r22, r22
    5740:	71 f0       	breq	.+28     	; 0x575e <__floatsisf+0x74>
    5742:	96 e8       	ldi	r25, 0x86	; 134
    5744:	86 2f       	mov	r24, r22
    5746:	70 e0       	ldi	r23, 0x00	; 0
    5748:	60 e0       	ldi	r22, 0x00	; 0
    574a:	2a f0       	brmi	.+10     	; 0x5756 <__floatsisf+0x6c>
    574c:	9a 95       	dec	r25
    574e:	66 0f       	add	r22, r22
    5750:	77 1f       	adc	r23, r23
    5752:	88 1f       	adc	r24, r24
    5754:	da f7       	brpl	.-10     	; 0x574c <__floatsisf+0x62>
    5756:	88 0f       	add	r24, r24
    5758:	96 95       	lsr	r25
    575a:	87 95       	ror	r24
    575c:	97 f9       	bld	r25, 7
    575e:	08 95       	ret

00005760 <floor>:
    5760:	07 d1       	rcall	.+526    	; 0x5970 <__fp_trunc>
    5762:	80 f0       	brcs	.+32     	; 0x5784 <floor+0x24>
    5764:	9f 37       	cpi	r25, 0x7F	; 127
    5766:	40 f4       	brcc	.+16     	; 0x5778 <floor+0x18>
    5768:	91 11       	cpse	r25, r1
    576a:	0e f0       	brts	.+2      	; 0x576e <floor+0xe>
    576c:	19 c1       	rjmp	.+562    	; 0x59a0 <__fp_szero>
    576e:	60 e0       	ldi	r22, 0x00	; 0
    5770:	70 e0       	ldi	r23, 0x00	; 0
    5772:	80 e8       	ldi	r24, 0x80	; 128
    5774:	9f eb       	ldi	r25, 0xBF	; 191
    5776:	08 95       	ret
    5778:	26 f4       	brtc	.+8      	; 0x5782 <floor+0x22>
    577a:	1b 16       	cp	r1, r27
    577c:	61 1d       	adc	r22, r1
    577e:	71 1d       	adc	r23, r1
    5780:	81 1d       	adc	r24, r1
    5782:	2b c0       	rjmp	.+86     	; 0x57da <__fp_mintl>
    5784:	45 c0       	rjmp	.+138    	; 0x5810 <__fp_mpack>

00005786 <__fp_cmp>:
    5786:	99 0f       	add	r25, r25
    5788:	00 08       	sbc	r0, r0
    578a:	55 0f       	add	r21, r21
    578c:	aa 0b       	sbc	r26, r26
    578e:	e0 e8       	ldi	r30, 0x80	; 128
    5790:	fe ef       	ldi	r31, 0xFE	; 254
    5792:	16 16       	cp	r1, r22
    5794:	17 06       	cpc	r1, r23
    5796:	e8 07       	cpc	r30, r24
    5798:	f9 07       	cpc	r31, r25
    579a:	c0 f0       	brcs	.+48     	; 0x57cc <__fp_cmp+0x46>
    579c:	12 16       	cp	r1, r18
    579e:	13 06       	cpc	r1, r19
    57a0:	e4 07       	cpc	r30, r20
    57a2:	f5 07       	cpc	r31, r21
    57a4:	98 f0       	brcs	.+38     	; 0x57cc <__fp_cmp+0x46>
    57a6:	62 1b       	sub	r22, r18
    57a8:	73 0b       	sbc	r23, r19
    57aa:	84 0b       	sbc	r24, r20
    57ac:	95 0b       	sbc	r25, r21
    57ae:	39 f4       	brne	.+14     	; 0x57be <__fp_cmp+0x38>
    57b0:	0a 26       	eor	r0, r26
    57b2:	61 f0       	breq	.+24     	; 0x57cc <__fp_cmp+0x46>
    57b4:	23 2b       	or	r18, r19
    57b6:	24 2b       	or	r18, r20
    57b8:	25 2b       	or	r18, r21
    57ba:	21 f4       	brne	.+8      	; 0x57c4 <__fp_cmp+0x3e>
    57bc:	08 95       	ret
    57be:	0a 26       	eor	r0, r26
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <__fp_cmp+0x3e>
    57c2:	a1 40       	sbci	r26, 0x01	; 1
    57c4:	a6 95       	lsr	r26
    57c6:	8f ef       	ldi	r24, 0xFF	; 255
    57c8:	81 1d       	adc	r24, r1
    57ca:	81 1d       	adc	r24, r1
    57cc:	08 95       	ret

000057ce <__fp_inf>:
    57ce:	97 f9       	bld	r25, 7
    57d0:	9f 67       	ori	r25, 0x7F	; 127
    57d2:	80 e8       	ldi	r24, 0x80	; 128
    57d4:	70 e0       	ldi	r23, 0x00	; 0
    57d6:	60 e0       	ldi	r22, 0x00	; 0
    57d8:	08 95       	ret

000057da <__fp_mintl>:
    57da:	88 23       	and	r24, r24
    57dc:	71 f4       	brne	.+28     	; 0x57fa <__fp_mintl+0x20>
    57de:	77 23       	and	r23, r23
    57e0:	21 f0       	breq	.+8      	; 0x57ea <__fp_mintl+0x10>
    57e2:	98 50       	subi	r25, 0x08	; 8
    57e4:	87 2b       	or	r24, r23
    57e6:	76 2f       	mov	r23, r22
    57e8:	07 c0       	rjmp	.+14     	; 0x57f8 <__fp_mintl+0x1e>
    57ea:	66 23       	and	r22, r22
    57ec:	11 f4       	brne	.+4      	; 0x57f2 <__fp_mintl+0x18>
    57ee:	99 27       	eor	r25, r25
    57f0:	0d c0       	rjmp	.+26     	; 0x580c <__fp_mintl+0x32>
    57f2:	90 51       	subi	r25, 0x10	; 16
    57f4:	86 2b       	or	r24, r22
    57f6:	70 e0       	ldi	r23, 0x00	; 0
    57f8:	60 e0       	ldi	r22, 0x00	; 0
    57fa:	2a f0       	brmi	.+10     	; 0x5806 <__fp_mintl+0x2c>
    57fc:	9a 95       	dec	r25
    57fe:	66 0f       	add	r22, r22
    5800:	77 1f       	adc	r23, r23
    5802:	88 1f       	adc	r24, r24
    5804:	da f7       	brpl	.-10     	; 0x57fc <__fp_mintl+0x22>
    5806:	88 0f       	add	r24, r24
    5808:	96 95       	lsr	r25
    580a:	87 95       	ror	r24
    580c:	97 f9       	bld	r25, 7
    580e:	08 95       	ret

00005810 <__fp_mpack>:
    5810:	9f 3f       	cpi	r25, 0xFF	; 255
    5812:	31 f0       	breq	.+12     	; 0x5820 <__fp_mpack_finite+0xc>

00005814 <__fp_mpack_finite>:
    5814:	91 50       	subi	r25, 0x01	; 1
    5816:	20 f4       	brcc	.+8      	; 0x5820 <__fp_mpack_finite+0xc>
    5818:	87 95       	ror	r24
    581a:	77 95       	ror	r23
    581c:	67 95       	ror	r22
    581e:	b7 95       	ror	r27
    5820:	88 0f       	add	r24, r24
    5822:	91 1d       	adc	r25, r1
    5824:	96 95       	lsr	r25
    5826:	87 95       	ror	r24
    5828:	97 f9       	bld	r25, 7
    582a:	08 95       	ret

0000582c <__fp_nan>:
    582c:	9f ef       	ldi	r25, 0xFF	; 255
    582e:	80 ec       	ldi	r24, 0xC0	; 192
    5830:	08 95       	ret

00005832 <__fp_powser>:
    5832:	df 93       	push	r29
    5834:	cf 93       	push	r28
    5836:	1f 93       	push	r17
    5838:	0f 93       	push	r16
    583a:	ff 92       	push	r15
    583c:	ef 92       	push	r14
    583e:	df 92       	push	r13
    5840:	7b 01       	movw	r14, r22
    5842:	8c 01       	movw	r16, r24
    5844:	68 94       	set
    5846:	05 c0       	rjmp	.+10     	; 0x5852 <__fp_powser+0x20>
    5848:	da 2e       	mov	r13, r26
    584a:	ef 01       	movw	r28, r30
    584c:	8d d1       	rcall	.+794    	; 0x5b68 <__mulsf3x>
    584e:	fe 01       	movw	r30, r28
    5850:	e8 94       	clt
    5852:	a5 91       	lpm	r26, Z+
    5854:	25 91       	lpm	r18, Z+
    5856:	35 91       	lpm	r19, Z+
    5858:	45 91       	lpm	r20, Z+
    585a:	55 91       	lpm	r21, Z+
    585c:	ae f3       	brts	.-22     	; 0x5848 <__fp_powser+0x16>
    585e:	ef 01       	movw	r28, r30
    5860:	da dd       	rcall	.-1100   	; 0x5416 <__addsf3x>
    5862:	fe 01       	movw	r30, r28
    5864:	97 01       	movw	r18, r14
    5866:	a8 01       	movw	r20, r16
    5868:	da 94       	dec	r13
    586a:	79 f7       	brne	.-34     	; 0x584a <__fp_powser+0x18>
    586c:	df 90       	pop	r13
    586e:	ef 90       	pop	r14
    5870:	ff 90       	pop	r15
    5872:	0f 91       	pop	r16
    5874:	1f 91       	pop	r17
    5876:	cf 91       	pop	r28
    5878:	df 91       	pop	r29
    587a:	08 95       	ret

0000587c <__fp_pscA>:
    587c:	00 24       	eor	r0, r0
    587e:	0a 94       	dec	r0
    5880:	16 16       	cp	r1, r22
    5882:	17 06       	cpc	r1, r23
    5884:	18 06       	cpc	r1, r24
    5886:	09 06       	cpc	r0, r25
    5888:	08 95       	ret

0000588a <__fp_pscB>:
    588a:	00 24       	eor	r0, r0
    588c:	0a 94       	dec	r0
    588e:	12 16       	cp	r1, r18
    5890:	13 06       	cpc	r1, r19
    5892:	14 06       	cpc	r1, r20
    5894:	05 06       	cpc	r0, r21
    5896:	08 95       	ret
    5898:	c9 cf       	rjmp	.-110    	; 0x582c <__fp_nan>

0000589a <__fp_rempio2>:
    589a:	50 d0       	rcall	.+160    	; 0x593c <__fp_splitA>
    589c:	e8 f3       	brcs	.-6      	; 0x5898 <__fp_pscB+0xe>
    589e:	e8 94       	clt
    58a0:	e0 e0       	ldi	r30, 0x00	; 0
    58a2:	bb 27       	eor	r27, r27
    58a4:	9f 57       	subi	r25, 0x7F	; 127
    58a6:	f0 f0       	brcs	.+60     	; 0x58e4 <__fp_rempio2+0x4a>
    58a8:	2a ed       	ldi	r18, 0xDA	; 218
    58aa:	3f e0       	ldi	r19, 0x0F	; 15
    58ac:	49 ec       	ldi	r20, 0xC9	; 201
    58ae:	06 c0       	rjmp	.+12     	; 0x58bc <__fp_rempio2+0x22>
    58b0:	ee 0f       	add	r30, r30
    58b2:	bb 0f       	add	r27, r27
    58b4:	66 1f       	adc	r22, r22
    58b6:	77 1f       	adc	r23, r23
    58b8:	88 1f       	adc	r24, r24
    58ba:	28 f0       	brcs	.+10     	; 0x58c6 <__fp_rempio2+0x2c>
    58bc:	b2 3a       	cpi	r27, 0xA2	; 162
    58be:	62 07       	cpc	r22, r18
    58c0:	73 07       	cpc	r23, r19
    58c2:	84 07       	cpc	r24, r20
    58c4:	28 f0       	brcs	.+10     	; 0x58d0 <__fp_rempio2+0x36>
    58c6:	b2 5a       	subi	r27, 0xA2	; 162
    58c8:	62 0b       	sbc	r22, r18
    58ca:	73 0b       	sbc	r23, r19
    58cc:	84 0b       	sbc	r24, r20
    58ce:	e3 95       	inc	r30
    58d0:	9a 95       	dec	r25
    58d2:	72 f7       	brpl	.-36     	; 0x58b0 <__fp_rempio2+0x16>
    58d4:	80 38       	cpi	r24, 0x80	; 128
    58d6:	30 f4       	brcc	.+12     	; 0x58e4 <__fp_rempio2+0x4a>
    58d8:	9a 95       	dec	r25
    58da:	bb 0f       	add	r27, r27
    58dc:	66 1f       	adc	r22, r22
    58de:	77 1f       	adc	r23, r23
    58e0:	88 1f       	adc	r24, r24
    58e2:	d2 f7       	brpl	.-12     	; 0x58d8 <__fp_rempio2+0x3e>
    58e4:	90 48       	sbci	r25, 0x80	; 128
    58e6:	96 cf       	rjmp	.-212    	; 0x5814 <__fp_mpack_finite>

000058e8 <__fp_round>:
    58e8:	09 2e       	mov	r0, r25
    58ea:	03 94       	inc	r0
    58ec:	00 0c       	add	r0, r0
    58ee:	11 f4       	brne	.+4      	; 0x58f4 <__fp_round+0xc>
    58f0:	88 23       	and	r24, r24
    58f2:	52 f0       	brmi	.+20     	; 0x5908 <__fp_round+0x20>
    58f4:	bb 0f       	add	r27, r27
    58f6:	40 f4       	brcc	.+16     	; 0x5908 <__fp_round+0x20>
    58f8:	bf 2b       	or	r27, r31
    58fa:	11 f4       	brne	.+4      	; 0x5900 <__fp_round+0x18>
    58fc:	60 ff       	sbrs	r22, 0
    58fe:	04 c0       	rjmp	.+8      	; 0x5908 <__fp_round+0x20>
    5900:	6f 5f       	subi	r22, 0xFF	; 255
    5902:	7f 4f       	sbci	r23, 0xFF	; 255
    5904:	8f 4f       	sbci	r24, 0xFF	; 255
    5906:	9f 4f       	sbci	r25, 0xFF	; 255
    5908:	08 95       	ret

0000590a <__fp_sinus>:
    590a:	ef 93       	push	r30
    590c:	e0 ff       	sbrs	r30, 0
    590e:	06 c0       	rjmp	.+12     	; 0x591c <__fp_sinus+0x12>
    5910:	a2 ea       	ldi	r26, 0xA2	; 162
    5912:	2a ed       	ldi	r18, 0xDA	; 218
    5914:	3f e0       	ldi	r19, 0x0F	; 15
    5916:	49 ec       	ldi	r20, 0xC9	; 201
    5918:	5f eb       	ldi	r21, 0xBF	; 191
    591a:	7d dd       	rcall	.-1286   	; 0x5416 <__addsf3x>
    591c:	e5 df       	rcall	.-54     	; 0x58e8 <__fp_round>
    591e:	0f 90       	pop	r0
    5920:	03 94       	inc	r0
    5922:	01 fc       	sbrc	r0, 1
    5924:	90 58       	subi	r25, 0x80	; 128
    5926:	e9 ed       	ldi	r30, 0xD9	; 217
    5928:	f0 e0       	ldi	r31, 0x00	; 0
    592a:	f2 c1       	rjmp	.+996    	; 0x5d10 <__fp_powsodd>

0000592c <__fp_split3>:
    592c:	57 fd       	sbrc	r21, 7
    592e:	90 58       	subi	r25, 0x80	; 128
    5930:	44 0f       	add	r20, r20
    5932:	55 1f       	adc	r21, r21
    5934:	59 f0       	breq	.+22     	; 0x594c <__fp_splitA+0x10>
    5936:	5f 3f       	cpi	r21, 0xFF	; 255
    5938:	71 f0       	breq	.+28     	; 0x5956 <__fp_splitA+0x1a>
    593a:	47 95       	ror	r20

0000593c <__fp_splitA>:
    593c:	88 0f       	add	r24, r24
    593e:	97 fb       	bst	r25, 7
    5940:	99 1f       	adc	r25, r25
    5942:	61 f0       	breq	.+24     	; 0x595c <__fp_splitA+0x20>
    5944:	9f 3f       	cpi	r25, 0xFF	; 255
    5946:	79 f0       	breq	.+30     	; 0x5966 <__fp_splitA+0x2a>
    5948:	87 95       	ror	r24
    594a:	08 95       	ret
    594c:	12 16       	cp	r1, r18
    594e:	13 06       	cpc	r1, r19
    5950:	14 06       	cpc	r1, r20
    5952:	55 1f       	adc	r21, r21
    5954:	f2 cf       	rjmp	.-28     	; 0x593a <__fp_split3+0xe>
    5956:	46 95       	lsr	r20
    5958:	f1 df       	rcall	.-30     	; 0x593c <__fp_splitA>
    595a:	08 c0       	rjmp	.+16     	; 0x596c <__fp_splitA+0x30>
    595c:	16 16       	cp	r1, r22
    595e:	17 06       	cpc	r1, r23
    5960:	18 06       	cpc	r1, r24
    5962:	99 1f       	adc	r25, r25
    5964:	f1 cf       	rjmp	.-30     	; 0x5948 <__fp_splitA+0xc>
    5966:	86 95       	lsr	r24
    5968:	71 05       	cpc	r23, r1
    596a:	61 05       	cpc	r22, r1
    596c:	08 94       	sec
    596e:	08 95       	ret

00005970 <__fp_trunc>:
    5970:	e5 df       	rcall	.-54     	; 0x593c <__fp_splitA>
    5972:	a0 f0       	brcs	.+40     	; 0x599c <__fp_trunc+0x2c>
    5974:	be e7       	ldi	r27, 0x7E	; 126
    5976:	b9 17       	cp	r27, r25
    5978:	88 f4       	brcc	.+34     	; 0x599c <__fp_trunc+0x2c>
    597a:	bb 27       	eor	r27, r27
    597c:	9f 38       	cpi	r25, 0x8F	; 143
    597e:	60 f4       	brcc	.+24     	; 0x5998 <__fp_trunc+0x28>
    5980:	16 16       	cp	r1, r22
    5982:	b1 1d       	adc	r27, r1
    5984:	67 2f       	mov	r22, r23
    5986:	78 2f       	mov	r23, r24
    5988:	88 27       	eor	r24, r24
    598a:	98 5f       	subi	r25, 0xF8	; 248
    598c:	f7 cf       	rjmp	.-18     	; 0x597c <__fp_trunc+0xc>
    598e:	86 95       	lsr	r24
    5990:	77 95       	ror	r23
    5992:	67 95       	ror	r22
    5994:	b1 1d       	adc	r27, r1
    5996:	93 95       	inc	r25
    5998:	96 39       	cpi	r25, 0x96	; 150
    599a:	c8 f3       	brcs	.-14     	; 0x598e <__fp_trunc+0x1e>
    599c:	08 95       	ret

0000599e <__fp_zero>:
    599e:	e8 94       	clt

000059a0 <__fp_szero>:
    59a0:	bb 27       	eor	r27, r27
    59a2:	66 27       	eor	r22, r22
    59a4:	77 27       	eor	r23, r23
    59a6:	cb 01       	movw	r24, r22
    59a8:	97 f9       	bld	r25, 7
    59aa:	08 95       	ret

000059ac <__gesf2>:
    59ac:	ec de       	rcall	.-552    	; 0x5786 <__fp_cmp>
    59ae:	08 f4       	brcc	.+2      	; 0x59b2 <__gesf2+0x6>
    59b0:	8f ef       	ldi	r24, 0xFF	; 255
    59b2:	08 95       	ret
    59b4:	63 df       	rcall	.-314    	; 0x587c <__fp_pscA>
    59b6:	19 f0       	breq	.+6      	; 0x59be <__gesf2+0x12>
    59b8:	68 df       	rcall	.-304    	; 0x588a <__fp_pscB>
    59ba:	09 f0       	breq	.+2      	; 0x59be <__gesf2+0x12>
    59bc:	37 cf       	rjmp	.-402    	; 0x582c <__fp_nan>
    59be:	07 cf       	rjmp	.-498    	; 0x57ce <__fp_inf>
    59c0:	b9 01       	movw	r22, r18
    59c2:	ca 01       	movw	r24, r20
    59c4:	25 cf       	rjmp	.-438    	; 0x5810 <__fp_mpack>

000059c6 <hypot>:
    59c6:	9f 77       	andi	r25, 0x7F	; 127
    59c8:	5f 77       	andi	r21, 0x7F	; 127
    59ca:	b0 df       	rcall	.-160    	; 0x592c <__fp_split3>
    59cc:	98 f3       	brcs	.-26     	; 0x59b4 <__gesf2+0x8>
    59ce:	99 23       	and	r25, r25
    59d0:	b9 f3       	breq	.-18     	; 0x59c0 <__gesf2+0x14>
    59d2:	55 23       	and	r21, r21
    59d4:	b9 f3       	breq	.-18     	; 0x59c4 <__gesf2+0x18>
    59d6:	ff 27       	eor	r31, r31
    59d8:	95 17       	cp	r25, r21
    59da:	58 f4       	brcc	.+22     	; 0x59f2 <hypot+0x2c>
    59dc:	e5 2f       	mov	r30, r21
    59de:	e9 1b       	sub	r30, r25
    59e0:	ed 30       	cpi	r30, 0x0D	; 13
    59e2:	70 f7       	brcc	.-36     	; 0x59c0 <__gesf2+0x14>
    59e4:	5e 3b       	cpi	r21, 0xBE	; 190
    59e6:	10 f0       	brcs	.+4      	; 0x59ec <hypot+0x26>
    59e8:	f1 e4       	ldi	r31, 0x41	; 65
    59ea:	1c c0       	rjmp	.+56     	; 0x5a24 <hypot+0x5e>
    59ec:	90 34       	cpi	r25, 0x40	; 64
    59ee:	e0 f4       	brcc	.+56     	; 0x5a28 <hypot+0x62>
    59f0:	0a c0       	rjmp	.+20     	; 0x5a06 <hypot+0x40>
    59f2:	e9 2f       	mov	r30, r25
    59f4:	e5 1b       	sub	r30, r21
    59f6:	ed 30       	cpi	r30, 0x0D	; 13
    59f8:	28 f7       	brcc	.-54     	; 0x59c4 <__gesf2+0x18>
    59fa:	9e 3b       	cpi	r25, 0xBE	; 190
    59fc:	10 f0       	brcs	.+4      	; 0x5a02 <hypot+0x3c>
    59fe:	f1 e4       	ldi	r31, 0x41	; 65
    5a00:	11 c0       	rjmp	.+34     	; 0x5a24 <hypot+0x5e>
    5a02:	50 34       	cpi	r21, 0x40	; 64
    5a04:	88 f4       	brcc	.+34     	; 0x5a28 <hypot+0x62>
    5a06:	f9 ea       	ldi	r31, 0xA9	; 169
    5a08:	88 23       	and	r24, r24
    5a0a:	2a f0       	brmi	.+10     	; 0x5a16 <hypot+0x50>
    5a0c:	9a 95       	dec	r25
    5a0e:	66 0f       	add	r22, r22
    5a10:	77 1f       	adc	r23, r23
    5a12:	88 1f       	adc	r24, r24
    5a14:	da f7       	brpl	.-10     	; 0x5a0c <hypot+0x46>
    5a16:	44 23       	and	r20, r20
    5a18:	2a f0       	brmi	.+10     	; 0x5a24 <hypot+0x5e>
    5a1a:	5a 95       	dec	r21
    5a1c:	22 0f       	add	r18, r18
    5a1e:	33 1f       	adc	r19, r19
    5a20:	44 1f       	adc	r20, r20
    5a22:	da f7       	brpl	.-10     	; 0x5a1a <hypot+0x54>
    5a24:	9f 1b       	sub	r25, r31
    5a26:	5f 1b       	sub	r21, r31
    5a28:	ff 93       	push	r31
    5a2a:	1f 93       	push	r17
    5a2c:	0f 93       	push	r16
    5a2e:	ff 92       	push	r15
    5a30:	ef 92       	push	r14
    5a32:	79 01       	movw	r14, r18
    5a34:	8a 01       	movw	r16, r20
    5a36:	bb 27       	eor	r27, r27
    5a38:	ab 2f       	mov	r26, r27
    5a3a:	9b 01       	movw	r18, r22
    5a3c:	ac 01       	movw	r20, r24
    5a3e:	96 d0       	rcall	.+300    	; 0x5b6c <__mulsf3_pse>
    5a40:	97 01       	movw	r18, r14
    5a42:	a8 01       	movw	r20, r16
    5a44:	bf 93       	push	r27
    5a46:	7b 01       	movw	r14, r22
    5a48:	8c 01       	movw	r16, r24
    5a4a:	aa 27       	eor	r26, r26
    5a4c:	ba 2f       	mov	r27, r26
    5a4e:	b9 01       	movw	r22, r18
    5a50:	ca 01       	movw	r24, r20
    5a52:	8c d0       	rcall	.+280    	; 0x5b6c <__mulsf3_pse>
    5a54:	af 91       	pop	r26
    5a56:	97 01       	movw	r18, r14
    5a58:	a8 01       	movw	r20, r16
    5a5a:	ef 90       	pop	r14
    5a5c:	ff 90       	pop	r15
    5a5e:	0f 91       	pop	r16
    5a60:	1f 91       	pop	r17
    5a62:	d9 dc       	rcall	.-1614   	; 0x5416 <__addsf3x>
    5a64:	41 df       	rcall	.-382    	; 0x58e8 <__fp_round>
    5a66:	01 d1       	rcall	.+514    	; 0x5c6a <sqrt>
    5a68:	4f 91       	pop	r20
    5a6a:	40 ff       	sbrs	r20, 0
    5a6c:	08 95       	ret
    5a6e:	55 27       	eor	r21, r21
    5a70:	47 fd       	sbrc	r20, 7
    5a72:	50 95       	com	r21
    5a74:	09 c0       	rjmp	.+18     	; 0x5a88 <ldexp>

00005a76 <inverse>:
    5a76:	9b 01       	movw	r18, r22
    5a78:	ac 01       	movw	r20, r24
    5a7a:	60 e0       	ldi	r22, 0x00	; 0
    5a7c:	70 e0       	ldi	r23, 0x00	; 0
    5a7e:	80 e8       	ldi	r24, 0x80	; 128
    5a80:	9f e3       	ldi	r25, 0x3F	; 63
    5a82:	98 cd       	rjmp	.-1232   	; 0x55b4 <__divsf3>
    5a84:	a4 ce       	rjmp	.-696    	; 0x57ce <__fp_inf>
    5a86:	c4 ce       	rjmp	.-632    	; 0x5810 <__fp_mpack>

00005a88 <ldexp>:
    5a88:	59 df       	rcall	.-334    	; 0x593c <__fp_splitA>
    5a8a:	e8 f3       	brcs	.-6      	; 0x5a86 <inverse+0x10>
    5a8c:	99 23       	and	r25, r25
    5a8e:	d9 f3       	breq	.-10     	; 0x5a86 <inverse+0x10>
    5a90:	94 0f       	add	r25, r20
    5a92:	51 1d       	adc	r21, r1
    5a94:	bb f3       	brvs	.-18     	; 0x5a84 <inverse+0xe>
    5a96:	91 50       	subi	r25, 0x01	; 1
    5a98:	50 40       	sbci	r21, 0x00	; 0
    5a9a:	94 f0       	brlt	.+36     	; 0x5ac0 <ldexp+0x38>
    5a9c:	59 f0       	breq	.+22     	; 0x5ab4 <ldexp+0x2c>
    5a9e:	88 23       	and	r24, r24
    5aa0:	32 f0       	brmi	.+12     	; 0x5aae <ldexp+0x26>
    5aa2:	66 0f       	add	r22, r22
    5aa4:	77 1f       	adc	r23, r23
    5aa6:	88 1f       	adc	r24, r24
    5aa8:	91 50       	subi	r25, 0x01	; 1
    5aaa:	50 40       	sbci	r21, 0x00	; 0
    5aac:	c1 f7       	brne	.-16     	; 0x5a9e <ldexp+0x16>
    5aae:	9e 3f       	cpi	r25, 0xFE	; 254
    5ab0:	51 05       	cpc	r21, r1
    5ab2:	44 f7       	brge	.-48     	; 0x5a84 <inverse+0xe>
    5ab4:	88 0f       	add	r24, r24
    5ab6:	91 1d       	adc	r25, r1
    5ab8:	96 95       	lsr	r25
    5aba:	87 95       	ror	r24
    5abc:	97 f9       	bld	r25, 7
    5abe:	08 95       	ret
    5ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac2:	ac f0       	brlt	.+42     	; 0x5aee <ldexp+0x66>
    5ac4:	98 3e       	cpi	r25, 0xE8	; 232
    5ac6:	9c f0       	brlt	.+38     	; 0x5aee <ldexp+0x66>
    5ac8:	bb 27       	eor	r27, r27
    5aca:	86 95       	lsr	r24
    5acc:	77 95       	ror	r23
    5ace:	67 95       	ror	r22
    5ad0:	b7 95       	ror	r27
    5ad2:	08 f4       	brcc	.+2      	; 0x5ad6 <ldexp+0x4e>
    5ad4:	b1 60       	ori	r27, 0x01	; 1
    5ad6:	93 95       	inc	r25
    5ad8:	c1 f7       	brne	.-16     	; 0x5aca <ldexp+0x42>
    5ada:	bb 0f       	add	r27, r27
    5adc:	58 f7       	brcc	.-42     	; 0x5ab4 <ldexp+0x2c>
    5ade:	11 f4       	brne	.+4      	; 0x5ae4 <ldexp+0x5c>
    5ae0:	60 ff       	sbrs	r22, 0
    5ae2:	e8 cf       	rjmp	.-48     	; 0x5ab4 <ldexp+0x2c>
    5ae4:	6f 5f       	subi	r22, 0xFF	; 255
    5ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    5aea:	9f 4f       	sbci	r25, 0xFF	; 255
    5aec:	e3 cf       	rjmp	.-58     	; 0x5ab4 <ldexp+0x2c>
    5aee:	58 cf       	rjmp	.-336    	; 0x59a0 <__fp_szero>

00005af0 <lround>:
    5af0:	25 df       	rcall	.-438    	; 0x593c <__fp_splitA>
    5af2:	58 f1       	brcs	.+86     	; 0x5b4a <lround+0x5a>
    5af4:	9e 57       	subi	r25, 0x7E	; 126
    5af6:	58 f1       	brcs	.+86     	; 0x5b4e <lround+0x5e>
    5af8:	98 51       	subi	r25, 0x18	; 24
    5afa:	a0 f0       	brcs	.+40     	; 0x5b24 <lround+0x34>
    5afc:	e9 f0       	breq	.+58     	; 0x5b38 <lround+0x48>
    5afe:	98 30       	cpi	r25, 0x08	; 8
    5b00:	20 f5       	brcc	.+72     	; 0x5b4a <lround+0x5a>
    5b02:	09 2e       	mov	r0, r25
    5b04:	99 27       	eor	r25, r25
    5b06:	66 0f       	add	r22, r22
    5b08:	77 1f       	adc	r23, r23
    5b0a:	88 1f       	adc	r24, r24
    5b0c:	99 1f       	adc	r25, r25
    5b0e:	0a 94       	dec	r0
    5b10:	d1 f7       	brne	.-12     	; 0x5b06 <lround+0x16>
    5b12:	12 c0       	rjmp	.+36     	; 0x5b38 <lround+0x48>
    5b14:	06 2e       	mov	r0, r22
    5b16:	67 2f       	mov	r22, r23
    5b18:	78 2f       	mov	r23, r24
    5b1a:	88 27       	eor	r24, r24
    5b1c:	98 5f       	subi	r25, 0xF8	; 248
    5b1e:	11 f4       	brne	.+4      	; 0x5b24 <lround+0x34>
    5b20:	00 0c       	add	r0, r0
    5b22:	07 c0       	rjmp	.+14     	; 0x5b32 <lround+0x42>
    5b24:	99 3f       	cpi	r25, 0xF9	; 249
    5b26:	b4 f3       	brlt	.-20     	; 0x5b14 <lround+0x24>
    5b28:	86 95       	lsr	r24
    5b2a:	77 95       	ror	r23
    5b2c:	67 95       	ror	r22
    5b2e:	93 95       	inc	r25
    5b30:	d9 f7       	brne	.-10     	; 0x5b28 <lround+0x38>
    5b32:	61 1d       	adc	r22, r1
    5b34:	71 1d       	adc	r23, r1
    5b36:	81 1d       	adc	r24, r1
    5b38:	3e f4       	brtc	.+14     	; 0x5b48 <lround+0x58>
    5b3a:	90 95       	com	r25
    5b3c:	80 95       	com	r24
    5b3e:	70 95       	com	r23
    5b40:	61 95       	neg	r22
    5b42:	7f 4f       	sbci	r23, 0xFF	; 255
    5b44:	8f 4f       	sbci	r24, 0xFF	; 255
    5b46:	9f 4f       	sbci	r25, 0xFF	; 255
    5b48:	08 95       	ret
    5b4a:	68 94       	set
    5b4c:	29 cf       	rjmp	.-430    	; 0x59a0 <__fp_szero>
    5b4e:	27 cf       	rjmp	.-434    	; 0x599e <__fp_zero>

00005b50 <__mulsf3>:
    5b50:	0b d0       	rcall	.+22     	; 0x5b68 <__mulsf3x>
    5b52:	ca ce       	rjmp	.-620    	; 0x58e8 <__fp_round>
    5b54:	93 de       	rcall	.-730    	; 0x587c <__fp_pscA>
    5b56:	28 f0       	brcs	.+10     	; 0x5b62 <__mulsf3+0x12>
    5b58:	98 de       	rcall	.-720    	; 0x588a <__fp_pscB>
    5b5a:	18 f0       	brcs	.+6      	; 0x5b62 <__mulsf3+0x12>
    5b5c:	95 23       	and	r25, r21
    5b5e:	09 f0       	breq	.+2      	; 0x5b62 <__mulsf3+0x12>
    5b60:	36 ce       	rjmp	.-916    	; 0x57ce <__fp_inf>
    5b62:	64 ce       	rjmp	.-824    	; 0x582c <__fp_nan>
    5b64:	11 24       	eor	r1, r1
    5b66:	1c cf       	rjmp	.-456    	; 0x59a0 <__fp_szero>

00005b68 <__mulsf3x>:
    5b68:	e1 de       	rcall	.-574    	; 0x592c <__fp_split3>
    5b6a:	a0 f3       	brcs	.-24     	; 0x5b54 <__mulsf3+0x4>

00005b6c <__mulsf3_pse>:
    5b6c:	95 9f       	mul	r25, r21
    5b6e:	d1 f3       	breq	.-12     	; 0x5b64 <__mulsf3+0x14>
    5b70:	95 0f       	add	r25, r21
    5b72:	50 e0       	ldi	r21, 0x00	; 0
    5b74:	55 1f       	adc	r21, r21
    5b76:	62 9f       	mul	r22, r18
    5b78:	f0 01       	movw	r30, r0
    5b7a:	72 9f       	mul	r23, r18
    5b7c:	bb 27       	eor	r27, r27
    5b7e:	f0 0d       	add	r31, r0
    5b80:	b1 1d       	adc	r27, r1
    5b82:	63 9f       	mul	r22, r19
    5b84:	aa 27       	eor	r26, r26
    5b86:	f0 0d       	add	r31, r0
    5b88:	b1 1d       	adc	r27, r1
    5b8a:	aa 1f       	adc	r26, r26
    5b8c:	64 9f       	mul	r22, r20
    5b8e:	66 27       	eor	r22, r22
    5b90:	b0 0d       	add	r27, r0
    5b92:	a1 1d       	adc	r26, r1
    5b94:	66 1f       	adc	r22, r22
    5b96:	82 9f       	mul	r24, r18
    5b98:	22 27       	eor	r18, r18
    5b9a:	b0 0d       	add	r27, r0
    5b9c:	a1 1d       	adc	r26, r1
    5b9e:	62 1f       	adc	r22, r18
    5ba0:	73 9f       	mul	r23, r19
    5ba2:	b0 0d       	add	r27, r0
    5ba4:	a1 1d       	adc	r26, r1
    5ba6:	62 1f       	adc	r22, r18
    5ba8:	83 9f       	mul	r24, r19
    5baa:	a0 0d       	add	r26, r0
    5bac:	61 1d       	adc	r22, r1
    5bae:	22 1f       	adc	r18, r18
    5bb0:	74 9f       	mul	r23, r20
    5bb2:	33 27       	eor	r19, r19
    5bb4:	a0 0d       	add	r26, r0
    5bb6:	61 1d       	adc	r22, r1
    5bb8:	23 1f       	adc	r18, r19
    5bba:	84 9f       	mul	r24, r20
    5bbc:	60 0d       	add	r22, r0
    5bbe:	21 1d       	adc	r18, r1
    5bc0:	82 2f       	mov	r24, r18
    5bc2:	76 2f       	mov	r23, r22
    5bc4:	6a 2f       	mov	r22, r26
    5bc6:	11 24       	eor	r1, r1
    5bc8:	9f 57       	subi	r25, 0x7F	; 127
    5bca:	50 40       	sbci	r21, 0x00	; 0
    5bcc:	8a f0       	brmi	.+34     	; 0x5bf0 <__mulsf3_pse+0x84>
    5bce:	e1 f0       	breq	.+56     	; 0x5c08 <__mulsf3_pse+0x9c>
    5bd0:	88 23       	and	r24, r24
    5bd2:	4a f0       	brmi	.+18     	; 0x5be6 <__mulsf3_pse+0x7a>
    5bd4:	ee 0f       	add	r30, r30
    5bd6:	ff 1f       	adc	r31, r31
    5bd8:	bb 1f       	adc	r27, r27
    5bda:	66 1f       	adc	r22, r22
    5bdc:	77 1f       	adc	r23, r23
    5bde:	88 1f       	adc	r24, r24
    5be0:	91 50       	subi	r25, 0x01	; 1
    5be2:	50 40       	sbci	r21, 0x00	; 0
    5be4:	a9 f7       	brne	.-22     	; 0x5bd0 <__mulsf3_pse+0x64>
    5be6:	9e 3f       	cpi	r25, 0xFE	; 254
    5be8:	51 05       	cpc	r21, r1
    5bea:	70 f0       	brcs	.+28     	; 0x5c08 <__mulsf3_pse+0x9c>
    5bec:	f0 cd       	rjmp	.-1056   	; 0x57ce <__fp_inf>
    5bee:	d8 ce       	rjmp	.-592    	; 0x59a0 <__fp_szero>
    5bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    5bf2:	ec f3       	brlt	.-6      	; 0x5bee <__mulsf3_pse+0x82>
    5bf4:	98 3e       	cpi	r25, 0xE8	; 232
    5bf6:	dc f3       	brlt	.-10     	; 0x5bee <__mulsf3_pse+0x82>
    5bf8:	86 95       	lsr	r24
    5bfa:	77 95       	ror	r23
    5bfc:	67 95       	ror	r22
    5bfe:	b7 95       	ror	r27
    5c00:	f7 95       	ror	r31
    5c02:	e7 95       	ror	r30
    5c04:	9f 5f       	subi	r25, 0xFF	; 255
    5c06:	c1 f7       	brne	.-16     	; 0x5bf8 <__mulsf3_pse+0x8c>
    5c08:	fe 2b       	or	r31, r30
    5c0a:	88 0f       	add	r24, r24
    5c0c:	91 1d       	adc	r25, r1
    5c0e:	96 95       	lsr	r25
    5c10:	87 95       	ror	r24
    5c12:	97 f9       	bld	r25, 7
    5c14:	08 95       	ret

00005c16 <round>:
    5c16:	92 de       	rcall	.-732    	; 0x593c <__fp_splitA>
    5c18:	e0 f0       	brcs	.+56     	; 0x5c52 <round+0x3c>
    5c1a:	9e 37       	cpi	r25, 0x7E	; 126
    5c1c:	d8 f0       	brcs	.+54     	; 0x5c54 <round+0x3e>
    5c1e:	96 39       	cpi	r25, 0x96	; 150
    5c20:	b8 f4       	brcc	.+46     	; 0x5c50 <round+0x3a>
    5c22:	9e 38       	cpi	r25, 0x8E	; 142
    5c24:	48 f4       	brcc	.+18     	; 0x5c38 <round+0x22>
    5c26:	67 2f       	mov	r22, r23
    5c28:	78 2f       	mov	r23, r24
    5c2a:	88 27       	eor	r24, r24
    5c2c:	98 5f       	subi	r25, 0xF8	; 248
    5c2e:	f9 cf       	rjmp	.-14     	; 0x5c22 <round+0xc>
    5c30:	86 95       	lsr	r24
    5c32:	77 95       	ror	r23
    5c34:	67 95       	ror	r22
    5c36:	93 95       	inc	r25
    5c38:	95 39       	cpi	r25, 0x95	; 149
    5c3a:	d0 f3       	brcs	.-12     	; 0x5c30 <round+0x1a>
    5c3c:	b6 2f       	mov	r27, r22
    5c3e:	b1 70       	andi	r27, 0x01	; 1
    5c40:	6b 0f       	add	r22, r27
    5c42:	71 1d       	adc	r23, r1
    5c44:	81 1d       	adc	r24, r1
    5c46:	20 f4       	brcc	.+8      	; 0x5c50 <round+0x3a>
    5c48:	87 95       	ror	r24
    5c4a:	77 95       	ror	r23
    5c4c:	67 95       	ror	r22
    5c4e:	93 95       	inc	r25
    5c50:	c4 cd       	rjmp	.-1144   	; 0x57da <__fp_mintl>
    5c52:	de cd       	rjmp	.-1092   	; 0x5810 <__fp_mpack>
    5c54:	a5 ce       	rjmp	.-694    	; 0x59a0 <__fp_szero>

00005c56 <sin>:
    5c56:	9f 93       	push	r25
    5c58:	20 de       	rcall	.-960    	; 0x589a <__fp_rempio2>
    5c5a:	0f 90       	pop	r0
    5c5c:	07 fc       	sbrc	r0, 7
    5c5e:	ee 5f       	subi	r30, 0xFE	; 254
    5c60:	54 ce       	rjmp	.-856    	; 0x590a <__fp_sinus>
    5c62:	11 f4       	brne	.+4      	; 0x5c68 <sin+0x12>
    5c64:	0e f4       	brtc	.+2      	; 0x5c68 <sin+0x12>
    5c66:	e2 cd       	rjmp	.-1084   	; 0x582c <__fp_nan>
    5c68:	d3 cd       	rjmp	.-1114   	; 0x5810 <__fp_mpack>

00005c6a <sqrt>:
    5c6a:	68 de       	rcall	.-816    	; 0x593c <__fp_splitA>
    5c6c:	d0 f3       	brcs	.-12     	; 0x5c62 <sin+0xc>
    5c6e:	99 23       	and	r25, r25
    5c70:	d9 f3       	breq	.-10     	; 0x5c68 <sin+0x12>
    5c72:	ce f3       	brts	.-14     	; 0x5c66 <sin+0x10>
    5c74:	9f 57       	subi	r25, 0x7F	; 127
    5c76:	55 0b       	sbc	r21, r21
    5c78:	87 ff       	sbrs	r24, 7
    5c7a:	43 d0       	rcall	.+134    	; 0x5d02 <__fp_norm2>
    5c7c:	00 24       	eor	r0, r0
    5c7e:	a0 e6       	ldi	r26, 0x60	; 96
    5c80:	40 ea       	ldi	r20, 0xA0	; 160
    5c82:	90 01       	movw	r18, r0
    5c84:	80 58       	subi	r24, 0x80	; 128
    5c86:	56 95       	lsr	r21
    5c88:	97 95       	ror	r25
    5c8a:	28 f4       	brcc	.+10     	; 0x5c96 <sqrt+0x2c>
    5c8c:	80 5c       	subi	r24, 0xC0	; 192
    5c8e:	66 0f       	add	r22, r22
    5c90:	77 1f       	adc	r23, r23
    5c92:	88 1f       	adc	r24, r24
    5c94:	20 f0       	brcs	.+8      	; 0x5c9e <sqrt+0x34>
    5c96:	26 17       	cp	r18, r22
    5c98:	37 07       	cpc	r19, r23
    5c9a:	48 07       	cpc	r20, r24
    5c9c:	30 f4       	brcc	.+12     	; 0x5caa <sqrt+0x40>
    5c9e:	62 1b       	sub	r22, r18
    5ca0:	73 0b       	sbc	r23, r19
    5ca2:	84 0b       	sbc	r24, r20
    5ca4:	20 29       	or	r18, r0
    5ca6:	31 29       	or	r19, r1
    5ca8:	4a 2b       	or	r20, r26
    5caa:	a6 95       	lsr	r26
    5cac:	17 94       	ror	r1
    5cae:	07 94       	ror	r0
    5cb0:	20 25       	eor	r18, r0
    5cb2:	31 25       	eor	r19, r1
    5cb4:	4a 27       	eor	r20, r26
    5cb6:	58 f7       	brcc	.-42     	; 0x5c8e <sqrt+0x24>
    5cb8:	66 0f       	add	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	88 1f       	adc	r24, r24
    5cbe:	20 f0       	brcs	.+8      	; 0x5cc8 <sqrt+0x5e>
    5cc0:	26 17       	cp	r18, r22
    5cc2:	37 07       	cpc	r19, r23
    5cc4:	48 07       	cpc	r20, r24
    5cc6:	30 f4       	brcc	.+12     	; 0x5cd4 <sqrt+0x6a>
    5cc8:	62 0b       	sbc	r22, r18
    5cca:	73 0b       	sbc	r23, r19
    5ccc:	84 0b       	sbc	r24, r20
    5cce:	20 0d       	add	r18, r0
    5cd0:	31 1d       	adc	r19, r1
    5cd2:	41 1d       	adc	r20, r1
    5cd4:	a0 95       	com	r26
    5cd6:	81 f7       	brne	.-32     	; 0x5cb8 <sqrt+0x4e>
    5cd8:	b9 01       	movw	r22, r18
    5cda:	84 2f       	mov	r24, r20
    5cdc:	91 58       	subi	r25, 0x81	; 129
    5cde:	88 0f       	add	r24, r24
    5ce0:	96 95       	lsr	r25
    5ce2:	87 95       	ror	r24
    5ce4:	08 95       	ret

00005ce6 <square>:
    5ce6:	9b 01       	movw	r18, r22
    5ce8:	ac 01       	movw	r20, r24
    5cea:	32 cf       	rjmp	.-412    	; 0x5b50 <__mulsf3>

00005cec <trunc>:
    5cec:	41 de       	rcall	.-894    	; 0x5970 <__fp_trunc>
    5cee:	20 f0       	brcs	.+8      	; 0x5cf8 <trunc+0xc>
    5cf0:	9f 37       	cpi	r25, 0x7F	; 127
    5cf2:	08 f4       	brcc	.+2      	; 0x5cf6 <trunc+0xa>
    5cf4:	55 ce       	rjmp	.-854    	; 0x59a0 <__fp_szero>
    5cf6:	71 cd       	rjmp	.-1310   	; 0x57da <__fp_mintl>
    5cf8:	8b cd       	rjmp	.-1258   	; 0x5810 <__fp_mpack>

00005cfa <__unordsf2>:
    5cfa:	45 dd       	rcall	.-1398   	; 0x5786 <__fp_cmp>
    5cfc:	88 0b       	sbc	r24, r24
    5cfe:	99 0b       	sbc	r25, r25
    5d00:	08 95       	ret

00005d02 <__fp_norm2>:
    5d02:	91 50       	subi	r25, 0x01	; 1
    5d04:	50 40       	sbci	r21, 0x00	; 0
    5d06:	66 0f       	add	r22, r22
    5d08:	77 1f       	adc	r23, r23
    5d0a:	88 1f       	adc	r24, r24
    5d0c:	d2 f7       	brpl	.-12     	; 0x5d02 <__fp_norm2>
    5d0e:	08 95       	ret

00005d10 <__fp_powsodd>:
    5d10:	9f 93       	push	r25
    5d12:	8f 93       	push	r24
    5d14:	7f 93       	push	r23
    5d16:	6f 93       	push	r22
    5d18:	ff 93       	push	r31
    5d1a:	ef 93       	push	r30
    5d1c:	9b 01       	movw	r18, r22
    5d1e:	ac 01       	movw	r20, r24
    5d20:	17 df       	rcall	.-466    	; 0x5b50 <__mulsf3>
    5d22:	ef 91       	pop	r30
    5d24:	ff 91       	pop	r31
    5d26:	85 dd       	rcall	.-1270   	; 0x5832 <__fp_powser>
    5d28:	2f 91       	pop	r18
    5d2a:	3f 91       	pop	r19
    5d2c:	4f 91       	pop	r20
    5d2e:	5f 91       	pop	r21
    5d30:	0f cf       	rjmp	.-482    	; 0x5b50 <__mulsf3>

00005d32 <__mulsi3>:
    5d32:	62 9f       	mul	r22, r18
    5d34:	d0 01       	movw	r26, r0
    5d36:	73 9f       	mul	r23, r19
    5d38:	f0 01       	movw	r30, r0
    5d3a:	82 9f       	mul	r24, r18
    5d3c:	e0 0d       	add	r30, r0
    5d3e:	f1 1d       	adc	r31, r1
    5d40:	64 9f       	mul	r22, r20
    5d42:	e0 0d       	add	r30, r0
    5d44:	f1 1d       	adc	r31, r1
    5d46:	92 9f       	mul	r25, r18
    5d48:	f0 0d       	add	r31, r0
    5d4a:	83 9f       	mul	r24, r19
    5d4c:	f0 0d       	add	r31, r0
    5d4e:	74 9f       	mul	r23, r20
    5d50:	f0 0d       	add	r31, r0
    5d52:	65 9f       	mul	r22, r21
    5d54:	f0 0d       	add	r31, r0
    5d56:	99 27       	eor	r25, r25
    5d58:	72 9f       	mul	r23, r18
    5d5a:	b0 0d       	add	r27, r0
    5d5c:	e1 1d       	adc	r30, r1
    5d5e:	f9 1f       	adc	r31, r25
    5d60:	63 9f       	mul	r22, r19
    5d62:	b0 0d       	add	r27, r0
    5d64:	e1 1d       	adc	r30, r1
    5d66:	f9 1f       	adc	r31, r25
    5d68:	bd 01       	movw	r22, r26
    5d6a:	cf 01       	movw	r24, r30
    5d6c:	11 24       	eor	r1, r1
    5d6e:	08 95       	ret

00005d70 <__udivmodsi4>:
    5d70:	a1 e2       	ldi	r26, 0x21	; 33
    5d72:	1a 2e       	mov	r1, r26
    5d74:	aa 1b       	sub	r26, r26
    5d76:	bb 1b       	sub	r27, r27
    5d78:	fd 01       	movw	r30, r26
    5d7a:	0d c0       	rjmp	.+26     	; 0x5d96 <__udivmodsi4_ep>

00005d7c <__udivmodsi4_loop>:
    5d7c:	aa 1f       	adc	r26, r26
    5d7e:	bb 1f       	adc	r27, r27
    5d80:	ee 1f       	adc	r30, r30
    5d82:	ff 1f       	adc	r31, r31
    5d84:	a2 17       	cp	r26, r18
    5d86:	b3 07       	cpc	r27, r19
    5d88:	e4 07       	cpc	r30, r20
    5d8a:	f5 07       	cpc	r31, r21
    5d8c:	20 f0       	brcs	.+8      	; 0x5d96 <__udivmodsi4_ep>
    5d8e:	a2 1b       	sub	r26, r18
    5d90:	b3 0b       	sbc	r27, r19
    5d92:	e4 0b       	sbc	r30, r20
    5d94:	f5 0b       	sbc	r31, r21

00005d96 <__udivmodsi4_ep>:
    5d96:	66 1f       	adc	r22, r22
    5d98:	77 1f       	adc	r23, r23
    5d9a:	88 1f       	adc	r24, r24
    5d9c:	99 1f       	adc	r25, r25
    5d9e:	1a 94       	dec	r1
    5da0:	69 f7       	brne	.-38     	; 0x5d7c <__udivmodsi4_loop>
    5da2:	60 95       	com	r22
    5da4:	70 95       	com	r23
    5da6:	80 95       	com	r24
    5da8:	90 95       	com	r25
    5daa:	9b 01       	movw	r18, r22
    5dac:	ac 01       	movw	r20, r24
    5dae:	bd 01       	movw	r22, r26
    5db0:	cf 01       	movw	r24, r30
    5db2:	08 95       	ret

00005db4 <strtod>:
    5db4:	a1 e0       	ldi	r26, 0x01	; 1
    5db6:	b0 e0       	ldi	r27, 0x00	; 0
    5db8:	ef ed       	ldi	r30, 0xDF	; 223
    5dba:	fe e2       	ldi	r31, 0x2E	; 46
    5dbc:	bb c1       	rjmp	.+886    	; 0x6134 <__prologue_saves__+0x8>
    5dbe:	5b 01       	movw	r10, r22
    5dc0:	61 15       	cp	r22, r1
    5dc2:	71 05       	cpc	r23, r1
    5dc4:	21 f0       	breq	.+8      	; 0x5dce <strtod+0x1a>
    5dc6:	db 01       	movw	r26, r22
    5dc8:	8c 93       	st	X, r24
    5dca:	11 96       	adiw	r26, 0x01	; 1
    5dcc:	9c 93       	st	X, r25
    5dce:	48 2f       	mov	r20, r24
    5dd0:	59 2f       	mov	r21, r25
    5dd2:	6a 01       	movw	r12, r20
    5dd4:	f6 01       	movw	r30, r12
    5dd6:	e1 90       	ld	r14, Z+
    5dd8:	6f 01       	movw	r12, r30
    5dda:	8f 01       	movw	r16, r30
    5ddc:	8e 2d       	mov	r24, r14
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	56 d1       	rcall	.+684    	; 0x608e <isspace>
    5de2:	00 97       	sbiw	r24, 0x00	; 0
    5de4:	b9 f7       	brne	.-18     	; 0x5dd4 <strtod+0x20>
    5de6:	fe 2d       	mov	r31, r14
    5de8:	fd 32       	cpi	r31, 0x2D	; 45
    5dea:	29 f4       	brne	.+10     	; 0x5df6 <strtod+0x42>
    5dec:	d6 01       	movw	r26, r12
    5dee:	ed 90       	ld	r14, X+
    5df0:	8d 01       	movw	r16, r26
    5df2:	21 e0       	ldi	r18, 0x01	; 1
    5df4:	07 c0       	rjmp	.+14     	; 0x5e04 <strtod+0x50>
    5df6:	be 2d       	mov	r27, r14
    5df8:	bb 32       	cpi	r27, 0x2B	; 43
    5dfa:	19 f4       	brne	.+6      	; 0x5e02 <strtod+0x4e>
    5dfc:	f6 01       	movw	r30, r12
    5dfe:	e1 90       	ld	r14, Z+
    5e00:	8f 01       	movw	r16, r30
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	68 01       	movw	r12, r16
    5e06:	08 94       	sec
    5e08:	c1 08       	sbc	r12, r1
    5e0a:	d1 08       	sbc	r13, r1
    5e0c:	c6 01       	movw	r24, r12
    5e0e:	64 e9       	ldi	r22, 0x94	; 148
    5e10:	74 e0       	ldi	r23, 0x04	; 4
    5e12:	43 e0       	ldi	r20, 0x03	; 3
    5e14:	50 e0       	ldi	r21, 0x00	; 0
    5e16:	29 83       	std	Y+1, r18	; 0x01
    5e18:	42 d1       	rcall	.+644    	; 0x609e <strncasecmp_P>
    5e1a:	29 81       	ldd	r18, Y+1	; 0x01
    5e1c:	00 97       	sbiw	r24, 0x00	; 0
    5e1e:	09 f5       	brne	.+66     	; 0x5e62 <strtod+0xae>
    5e20:	72 e0       	ldi	r23, 0x02	; 2
    5e22:	e7 2e       	mov	r14, r23
    5e24:	f1 2c       	mov	r15, r1
    5e26:	e0 0e       	add	r14, r16
    5e28:	f1 1e       	adc	r15, r17
    5e2a:	c7 01       	movw	r24, r14
    5e2c:	67 e9       	ldi	r22, 0x97	; 151
    5e2e:	74 e0       	ldi	r23, 0x04	; 4
    5e30:	45 e0       	ldi	r20, 0x05	; 5
    5e32:	50 e0       	ldi	r21, 0x00	; 0
    5e34:	34 d1       	rcall	.+616    	; 0x609e <strncasecmp_P>
    5e36:	29 81       	ldd	r18, Y+1	; 0x01
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	29 f4       	brne	.+10     	; 0x5e46 <strtod+0x92>
    5e3c:	67 e0       	ldi	r22, 0x07	; 7
    5e3e:	e6 2e       	mov	r14, r22
    5e40:	f1 2c       	mov	r15, r1
    5e42:	e0 0e       	add	r14, r16
    5e44:	f1 1e       	adc	r15, r17
    5e46:	a1 14       	cp	r10, r1
    5e48:	b1 04       	cpc	r11, r1
    5e4a:	21 f0       	breq	.+8      	; 0x5e54 <strtod+0xa0>
    5e4c:	d5 01       	movw	r26, r10
    5e4e:	11 96       	adiw	r26, 0x01	; 1
    5e50:	fc 92       	st	X, r15
    5e52:	ee 92       	st	-X, r14
    5e54:	20 ff       	sbrs	r18, 0
    5e56:	0a c1       	rjmp	.+532    	; 0x606c <strtod+0x2b8>
    5e58:	30 e0       	ldi	r19, 0x00	; 0
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
    5e5c:	90 e8       	ldi	r25, 0x80	; 128
    5e5e:	8f ef       	ldi	r24, 0xFF	; 255
    5e60:	0d c1       	rjmp	.+538    	; 0x607c <strtod+0x2c8>
    5e62:	c6 01       	movw	r24, r12
    5e64:	6c e9       	ldi	r22, 0x9C	; 156
    5e66:	74 e0       	ldi	r23, 0x04	; 4
    5e68:	43 e0       	ldi	r20, 0x03	; 3
    5e6a:	50 e0       	ldi	r21, 0x00	; 0
    5e6c:	29 83       	std	Y+1, r18	; 0x01
    5e6e:	17 d1       	rcall	.+558    	; 0x609e <strncasecmp_P>
    5e70:	29 81       	ldd	r18, Y+1	; 0x01
    5e72:	00 97       	sbiw	r24, 0x00	; 0
    5e74:	31 f0       	breq	.+12     	; 0x5e82 <strtod+0xce>
    5e76:	60 e0       	ldi	r22, 0x00	; 0
    5e78:	70 e0       	ldi	r23, 0x00	; 0
    5e7a:	cb 01       	movw	r24, r22
    5e7c:	66 24       	eor	r6, r6
    5e7e:	77 24       	eor	r7, r7
    5e80:	0a c0       	rjmp	.+20     	; 0x5e96 <strtod+0xe2>
    5e82:	a1 14       	cp	r10, r1
    5e84:	b1 04       	cpc	r11, r1
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <strtod+0xd6>
    5e88:	f5 c0       	rjmp	.+490    	; 0x6074 <strtod+0x2c0>
    5e8a:	0e 5f       	subi	r16, 0xFE	; 254
    5e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8e:	f5 01       	movw	r30, r10
    5e90:	11 83       	std	Z+1, r17	; 0x01
    5e92:	00 83       	st	Z, r16
    5e94:	ef c0       	rjmp	.+478    	; 0x6074 <strtod+0x2c0>
    5e96:	3e 2d       	mov	r19, r14
    5e98:	30 53       	subi	r19, 0x30	; 48
    5e9a:	3a 30       	cpi	r19, 0x0A	; 10
    5e9c:	a0 f5       	brcc	.+104    	; 0x5f06 <strtod+0x152>
    5e9e:	22 60       	ori	r18, 0x02	; 2
    5ea0:	e2 2f       	mov	r30, r18
    5ea2:	f0 e0       	ldi	r31, 0x00	; 0
    5ea4:	af 01       	movw	r20, r30
    5ea6:	48 70       	andi	r20, 0x08	; 8
    5ea8:	50 70       	andi	r21, 0x00	; 0
    5eaa:	22 ff       	sbrs	r18, 2
    5eac:	07 c0       	rjmp	.+14     	; 0x5ebc <strtod+0x108>
    5eae:	41 15       	cp	r20, r1
    5eb0:	51 05       	cpc	r21, r1
    5eb2:	71 f5       	brne	.+92     	; 0x5f10 <strtod+0x15c>
    5eb4:	08 94       	sec
    5eb6:	61 1c       	adc	r6, r1
    5eb8:	71 1c       	adc	r7, r1
    5eba:	2a c0       	rjmp	.+84     	; 0x5f10 <strtod+0x15c>
    5ebc:	41 15       	cp	r20, r1
    5ebe:	51 05       	cpc	r21, r1
    5ec0:	19 f0       	breq	.+6      	; 0x5ec8 <strtod+0x114>
    5ec2:	08 94       	sec
    5ec4:	61 08       	sbc	r6, r1
    5ec6:	71 08       	sbc	r7, r1
    5ec8:	6b 01       	movw	r12, r22
    5eca:	7c 01       	movw	r14, r24
    5ecc:	52 e0       	ldi	r21, 0x02	; 2
    5ece:	cc 0c       	add	r12, r12
    5ed0:	dd 1c       	adc	r13, r13
    5ed2:	ee 1c       	adc	r14, r14
    5ed4:	ff 1c       	adc	r15, r15
    5ed6:	5a 95       	dec	r21
    5ed8:	d1 f7       	brne	.-12     	; 0x5ece <strtod+0x11a>
    5eda:	6c 0d       	add	r22, r12
    5edc:	7d 1d       	adc	r23, r13
    5ede:	8e 1d       	adc	r24, r14
    5ee0:	9f 1d       	adc	r25, r15
    5ee2:	66 0f       	add	r22, r22
    5ee4:	77 1f       	adc	r23, r23
    5ee6:	88 1f       	adc	r24, r24
    5ee8:	99 1f       	adc	r25, r25
    5eea:	63 0f       	add	r22, r19
    5eec:	71 1d       	adc	r23, r1
    5eee:	81 1d       	adc	r24, r1
    5ef0:	91 1d       	adc	r25, r1
    5ef2:	68 39       	cpi	r22, 0x98	; 152
    5ef4:	f9 e9       	ldi	r31, 0x99	; 153
    5ef6:	7f 07       	cpc	r23, r31
    5ef8:	f9 e9       	ldi	r31, 0x99	; 153
    5efa:	8f 07       	cpc	r24, r31
    5efc:	f9 e1       	ldi	r31, 0x19	; 25
    5efe:	9f 07       	cpc	r25, r31
    5f00:	38 f0       	brcs	.+14     	; 0x5f10 <strtod+0x15c>
    5f02:	24 60       	ori	r18, 0x04	; 4
    5f04:	05 c0       	rjmp	.+10     	; 0x5f10 <strtod+0x15c>
    5f06:	3e 3f       	cpi	r19, 0xFE	; 254
    5f08:	39 f4       	brne	.+14     	; 0x5f18 <strtod+0x164>
    5f0a:	23 fd       	sbrc	r18, 3
    5f0c:	3f c0       	rjmp	.+126    	; 0x5f8c <strtod+0x1d8>
    5f0e:	28 60       	ori	r18, 0x08	; 8
    5f10:	d8 01       	movw	r26, r16
    5f12:	ed 90       	ld	r14, X+
    5f14:	8d 01       	movw	r16, r26
    5f16:	bf cf       	rjmp	.-130    	; 0x5e96 <strtod+0xe2>
    5f18:	35 33       	cpi	r19, 0x35	; 53
    5f1a:	11 f0       	breq	.+4      	; 0x5f20 <strtod+0x16c>
    5f1c:	35 31       	cpi	r19, 0x15	; 21
    5f1e:	b1 f5       	brne	.+108    	; 0x5f8c <strtod+0x1d8>
    5f20:	f8 01       	movw	r30, r16
    5f22:	31 91       	ld	r19, Z+
    5f24:	3d 32       	cpi	r19, 0x2D	; 45
    5f26:	11 f4       	brne	.+4      	; 0x5f2c <strtod+0x178>
    5f28:	20 61       	ori	r18, 0x10	; 16
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <strtod+0x17c>
    5f2c:	3b 32       	cpi	r19, 0x2B	; 43
    5f2e:	41 f4       	brne	.+16     	; 0x5f40 <strtod+0x18c>
    5f30:	d8 01       	movw	r26, r16
    5f32:	11 96       	adiw	r26, 0x01	; 1
    5f34:	3c 91       	ld	r19, X
    5f36:	11 97       	sbiw	r26, 0x01	; 1
    5f38:	31 96       	adiw	r30, 0x01	; 1
    5f3a:	42 e0       	ldi	r20, 0x02	; 2
    5f3c:	50 e0       	ldi	r21, 0x00	; 0
    5f3e:	02 c0       	rjmp	.+4      	; 0x5f44 <strtod+0x190>
    5f40:	41 e0       	ldi	r20, 0x01	; 1
    5f42:	50 e0       	ldi	r21, 0x00	; 0
    5f44:	30 53       	subi	r19, 0x30	; 48
    5f46:	3a 30       	cpi	r19, 0x0A	; 10
    5f48:	20 f0       	brcs	.+8      	; 0x5f52 <strtod+0x19e>
    5f4a:	8f 01       	movw	r16, r30
    5f4c:	04 1b       	sub	r16, r20
    5f4e:	15 0b       	sbc	r17, r21
    5f50:	1d c0       	rjmp	.+58     	; 0x5f8c <strtod+0x1d8>
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	50 e0       	ldi	r21, 0x00	; 0
    5f56:	bc e0       	ldi	r27, 0x0C	; 12
    5f58:	40 38       	cpi	r20, 0x80	; 128
    5f5a:	5b 07       	cpc	r21, r27
    5f5c:	5c f4       	brge	.+22     	; 0x5f74 <strtod+0x1c0>
    5f5e:	da 01       	movw	r26, r20
    5f60:	aa 0f       	add	r26, r26
    5f62:	bb 1f       	adc	r27, r27
    5f64:	aa 0f       	add	r26, r26
    5f66:	bb 1f       	adc	r27, r27
    5f68:	4a 0f       	add	r20, r26
    5f6a:	5b 1f       	adc	r21, r27
    5f6c:	44 0f       	add	r20, r20
    5f6e:	55 1f       	adc	r21, r21
    5f70:	43 0f       	add	r20, r19
    5f72:	51 1d       	adc	r21, r1
    5f74:	31 91       	ld	r19, Z+
    5f76:	30 53       	subi	r19, 0x30	; 48
    5f78:	8f 01       	movw	r16, r30
    5f7a:	3a 30       	cpi	r19, 0x0A	; 10
    5f7c:	60 f3       	brcs	.-40     	; 0x5f56 <strtod+0x1a2>
    5f7e:	24 ff       	sbrs	r18, 4
    5f80:	03 c0       	rjmp	.+6      	; 0x5f88 <strtod+0x1d4>
    5f82:	50 95       	com	r21
    5f84:	41 95       	neg	r20
    5f86:	5f 4f       	sbci	r21, 0xFF	; 255
    5f88:	64 0e       	add	r6, r20
    5f8a:	75 1e       	adc	r7, r21
    5f8c:	c2 2e       	mov	r12, r18
    5f8e:	dd 24       	eor	r13, r13
    5f90:	21 ff       	sbrs	r18, 1
    5f92:	08 c0       	rjmp	.+16     	; 0x5fa4 <strtod+0x1f0>
    5f94:	a1 14       	cp	r10, r1
    5f96:	b1 04       	cpc	r11, r1
    5f98:	29 f0       	breq	.+10     	; 0x5fa4 <strtod+0x1f0>
    5f9a:	01 50       	subi	r16, 0x01	; 1
    5f9c:	10 40       	sbci	r17, 0x00	; 0
    5f9e:	f5 01       	movw	r30, r10
    5fa0:	11 83       	std	Z+1, r17	; 0x01
    5fa2:	00 83       	st	Z, r16
    5fa4:	a0 db       	rcall	.-2240   	; 0x56e6 <__floatunsisf>
    5fa6:	7b 01       	movw	r14, r22
    5fa8:	8c 01       	movw	r16, r24
    5faa:	f3 e0       	ldi	r31, 0x03	; 3
    5fac:	cf 22       	and	r12, r31
    5fae:	dd 24       	eor	r13, r13
    5fb0:	33 e0       	ldi	r19, 0x03	; 3
    5fb2:	c3 16       	cp	r12, r19
    5fb4:	d1 04       	cpc	r13, r1
    5fb6:	21 f4       	brne	.+8      	; 0x5fc0 <strtod+0x20c>
    5fb8:	17 fb       	bst	r17, 7
    5fba:	10 95       	com	r17
    5fbc:	17 f9       	bld	r17, 7
    5fbe:	10 95       	com	r17
    5fc0:	c8 01       	movw	r24, r16
    5fc2:	b7 01       	movw	r22, r14
    5fc4:	20 e0       	ldi	r18, 0x00	; 0
    5fc6:	30 e0       	ldi	r19, 0x00	; 0
    5fc8:	a9 01       	movw	r20, r18
    5fca:	ed da       	rcall	.-2598   	; 0x55a6 <__cmpsf2>
    5fcc:	88 23       	and	r24, r24
    5fce:	09 f4       	brne	.+2      	; 0x5fd2 <strtod+0x21e>
    5fd0:	48 c0       	rjmp	.+144    	; 0x6062 <strtod+0x2ae>
    5fd2:	77 fe       	sbrs	r7, 7
    5fd4:	09 c0       	rjmp	.+18     	; 0x5fe8 <strtod+0x234>
    5fd6:	43 eb       	ldi	r20, 0xB3	; 179
    5fd8:	c4 2e       	mov	r12, r20
    5fda:	44 e0       	ldi	r20, 0x04	; 4
    5fdc:	d4 2e       	mov	r13, r20
    5fde:	70 94       	com	r7
    5fe0:	61 94       	neg	r6
    5fe2:	71 08       	sbc	r7, r1
    5fe4:	73 94       	inc	r7
    5fe6:	04 c0       	rjmp	.+8      	; 0x5ff0 <strtod+0x23c>
    5fe8:	3b ec       	ldi	r19, 0xCB	; 203
    5fea:	c3 2e       	mov	r12, r19
    5fec:	34 e0       	ldi	r19, 0x04	; 4
    5fee:	d3 2e       	mov	r13, r19
    5ff0:	26 e0       	ldi	r18, 0x06	; 6
    5ff2:	82 2e       	mov	r8, r18
    5ff4:	91 2c       	mov	r9, r1
    5ff6:	90 e2       	ldi	r25, 0x20	; 32
    5ff8:	a9 2e       	mov	r10, r25
    5ffa:	b1 2c       	mov	r11, r1
    5ffc:	0e c0       	rjmp	.+28     	; 0x601a <strtod+0x266>
    5ffe:	f6 01       	movw	r30, r12
    6000:	25 91       	lpm	r18, Z+
    6002:	35 91       	lpm	r19, Z+
    6004:	45 91       	lpm	r20, Z+
    6006:	54 91       	lpm	r21, Z+
    6008:	c8 01       	movw	r24, r16
    600a:	b7 01       	movw	r22, r14
    600c:	a1 dd       	rcall	.-1214   	; 0x5b50 <__mulsf3>
    600e:	e6 2e       	mov	r14, r22
    6010:	f7 2e       	mov	r15, r23
    6012:	08 2f       	mov	r16, r24
    6014:	19 2f       	mov	r17, r25
    6016:	6a 18       	sub	r6, r10
    6018:	7b 08       	sbc	r7, r11
    601a:	6a 14       	cp	r6, r10
    601c:	7b 04       	cpc	r7, r11
    601e:	7c f7       	brge	.-34     	; 0x5ffe <strtod+0x24a>
    6020:	b5 94       	asr	r11
    6022:	a7 94       	ror	r10
    6024:	08 94       	sec
    6026:	81 08       	sbc	r8, r1
    6028:	91 08       	sbc	r9, r1
    602a:	81 14       	cp	r8, r1
    602c:	91 04       	cpc	r9, r1
    602e:	29 f0       	breq	.+10     	; 0x603a <strtod+0x286>
    6030:	8c ef       	ldi	r24, 0xFC	; 252
    6032:	9f ef       	ldi	r25, 0xFF	; 255
    6034:	c8 0e       	add	r12, r24
    6036:	d9 1e       	adc	r13, r25
    6038:	f0 cf       	rjmp	.-32     	; 0x601a <strtod+0x266>
    603a:	b7 01       	movw	r22, r14
    603c:	c8 01       	movw	r24, r16
    603e:	28 2f       	mov	r18, r24
    6040:	22 0f       	add	r18, r18
    6042:	29 2f       	mov	r18, r25
    6044:	22 1f       	adc	r18, r18
    6046:	2f 3f       	cpi	r18, 0xFF	; 255
    6048:	31 f0       	breq	.+12     	; 0x6056 <strtod+0x2a2>
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	a9 01       	movw	r20, r18
    6050:	aa da       	rcall	.-2732   	; 0x55a6 <__cmpsf2>
    6052:	88 23       	and	r24, r24
    6054:	31 f4       	brne	.+12     	; 0x6062 <strtod+0x2ae>
    6056:	82 e2       	ldi	r24, 0x22	; 34
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	90 93 65 06 	sts	0x0665, r25
    605e:	80 93 64 06 	sts	0x0664, r24
    6062:	3e 2d       	mov	r19, r14
    6064:	2f 2d       	mov	r18, r15
    6066:	90 2f       	mov	r25, r16
    6068:	81 2f       	mov	r24, r17
    606a:	08 c0       	rjmp	.+16     	; 0x607c <strtod+0x2c8>
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	20 e0       	ldi	r18, 0x00	; 0
    6070:	90 e8       	ldi	r25, 0x80	; 128
    6072:	03 c0       	rjmp	.+6      	; 0x607a <strtod+0x2c6>
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	20 e0       	ldi	r18, 0x00	; 0
    6078:	90 ec       	ldi	r25, 0xC0	; 192
    607a:	8f e7       	ldi	r24, 0x7F	; 127
    607c:	f9 01       	movw	r30, r18
    607e:	ac 01       	movw	r20, r24
    6080:	6f 2f       	mov	r22, r31
    6082:	72 2f       	mov	r23, r18
    6084:	85 2f       	mov	r24, r21
    6086:	94 2f       	mov	r25, r20
    6088:	21 96       	adiw	r28, 0x01	; 1
    608a:	ee e0       	ldi	r30, 0x0E	; 14
    608c:	6f c0       	rjmp	.+222    	; 0x616c <__epilogue_restores__+0x8>

0000608e <isspace>:
    608e:	91 11       	cpse	r25, r1
    6090:	4a c0       	rjmp	.+148    	; 0x6126 <__ctype_isfalse>
    6092:	80 32       	cpi	r24, 0x20	; 32
    6094:	19 f0       	breq	.+6      	; 0x609c <isspace+0xe>
    6096:	89 50       	subi	r24, 0x09	; 9
    6098:	85 50       	subi	r24, 0x05	; 5
    609a:	d0 f7       	brcc	.-12     	; 0x6090 <isspace+0x2>
    609c:	08 95       	ret

0000609e <strncasecmp_P>:
    609e:	fb 01       	movw	r30, r22
    60a0:	dc 01       	movw	r26, r24
    60a2:	41 50       	subi	r20, 0x01	; 1
    60a4:	50 40       	sbci	r21, 0x00	; 0
    60a6:	88 f0       	brcs	.+34     	; 0x60ca <strncasecmp_P+0x2c>
    60a8:	8d 91       	ld	r24, X+
    60aa:	81 34       	cpi	r24, 0x41	; 65
    60ac:	1c f0       	brlt	.+6      	; 0x60b4 <strncasecmp_P+0x16>
    60ae:	8b 35       	cpi	r24, 0x5B	; 91
    60b0:	0c f4       	brge	.+2      	; 0x60b4 <strncasecmp_P+0x16>
    60b2:	80 5e       	subi	r24, 0xE0	; 224
    60b4:	65 91       	lpm	r22, Z+
    60b6:	61 34       	cpi	r22, 0x41	; 65
    60b8:	1c f0       	brlt	.+6      	; 0x60c0 <strncasecmp_P+0x22>
    60ba:	6b 35       	cpi	r22, 0x5B	; 91
    60bc:	0c f4       	brge	.+2      	; 0x60c0 <strncasecmp_P+0x22>
    60be:	60 5e       	subi	r22, 0xE0	; 224
    60c0:	86 1b       	sub	r24, r22
    60c2:	61 11       	cpse	r22, r1
    60c4:	71 f3       	breq	.-36     	; 0x60a2 <strncasecmp_P+0x4>
    60c6:	99 0b       	sbc	r25, r25
    60c8:	08 95       	ret
    60ca:	88 1b       	sub	r24, r24
    60cc:	fc cf       	rjmp	.-8      	; 0x60c6 <strncasecmp_P+0x28>

000060ce <fputc>:
    60ce:	0f 93       	push	r16
    60d0:	1f 93       	push	r17
    60d2:	cf 93       	push	r28
    60d4:	df 93       	push	r29
    60d6:	8c 01       	movw	r16, r24
    60d8:	eb 01       	movw	r28, r22
    60da:	8b 81       	ldd	r24, Y+3	; 0x03
    60dc:	81 ff       	sbrs	r24, 1
    60de:	1b c0       	rjmp	.+54     	; 0x6116 <fputc+0x48>
    60e0:	82 ff       	sbrs	r24, 2
    60e2:	0d c0       	rjmp	.+26     	; 0x60fe <fputc+0x30>
    60e4:	2e 81       	ldd	r18, Y+6	; 0x06
    60e6:	3f 81       	ldd	r19, Y+7	; 0x07
    60e8:	8c 81       	ldd	r24, Y+4	; 0x04
    60ea:	9d 81       	ldd	r25, Y+5	; 0x05
    60ec:	28 17       	cp	r18, r24
    60ee:	39 07       	cpc	r19, r25
    60f0:	64 f4       	brge	.+24     	; 0x610a <fputc+0x3c>
    60f2:	e8 81       	ld	r30, Y
    60f4:	f9 81       	ldd	r31, Y+1	; 0x01
    60f6:	01 93       	st	Z+, r16
    60f8:	f9 83       	std	Y+1, r31	; 0x01
    60fa:	e8 83       	st	Y, r30
    60fc:	06 c0       	rjmp	.+12     	; 0x610a <fputc+0x3c>
    60fe:	e8 85       	ldd	r30, Y+8	; 0x08
    6100:	f9 85       	ldd	r31, Y+9	; 0x09
    6102:	80 2f       	mov	r24, r16
    6104:	09 95       	icall
    6106:	00 97       	sbiw	r24, 0x00	; 0
    6108:	31 f4       	brne	.+12     	; 0x6116 <fputc+0x48>
    610a:	8e 81       	ldd	r24, Y+6	; 0x06
    610c:	9f 81       	ldd	r25, Y+7	; 0x07
    610e:	01 96       	adiw	r24, 0x01	; 1
    6110:	9f 83       	std	Y+7, r25	; 0x07
    6112:	8e 83       	std	Y+6, r24	; 0x06
    6114:	02 c0       	rjmp	.+4      	; 0x611a <fputc+0x4c>
    6116:	0f ef       	ldi	r16, 0xFF	; 255
    6118:	1f ef       	ldi	r17, 0xFF	; 255
    611a:	c8 01       	movw	r24, r16
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	1f 91       	pop	r17
    6122:	0f 91       	pop	r16
    6124:	08 95       	ret

00006126 <__ctype_isfalse>:
    6126:	99 27       	eor	r25, r25
    6128:	88 27       	eor	r24, r24

0000612a <__ctype_istrue>:
    612a:	08 95       	ret

0000612c <__prologue_saves__>:
    612c:	2f 92       	push	r2
    612e:	3f 92       	push	r3
    6130:	4f 92       	push	r4
    6132:	5f 92       	push	r5
    6134:	6f 92       	push	r6
    6136:	7f 92       	push	r7
    6138:	8f 92       	push	r8
    613a:	9f 92       	push	r9
    613c:	af 92       	push	r10
    613e:	bf 92       	push	r11
    6140:	cf 92       	push	r12
    6142:	df 92       	push	r13
    6144:	ef 92       	push	r14
    6146:	ff 92       	push	r15
    6148:	0f 93       	push	r16
    614a:	1f 93       	push	r17
    614c:	cf 93       	push	r28
    614e:	df 93       	push	r29
    6150:	cd b7       	in	r28, 0x3d	; 61
    6152:	de b7       	in	r29, 0x3e	; 62
    6154:	ca 1b       	sub	r28, r26
    6156:	db 0b       	sbc	r29, r27
    6158:	0f b6       	in	r0, 0x3f	; 63
    615a:	f8 94       	cli
    615c:	de bf       	out	0x3e, r29	; 62
    615e:	0f be       	out	0x3f, r0	; 63
    6160:	cd bf       	out	0x3d, r28	; 61
    6162:	09 94       	ijmp

00006164 <__epilogue_restores__>:
    6164:	2a 88       	ldd	r2, Y+18	; 0x12
    6166:	39 88       	ldd	r3, Y+17	; 0x11
    6168:	48 88       	ldd	r4, Y+16	; 0x10
    616a:	5f 84       	ldd	r5, Y+15	; 0x0f
    616c:	6e 84       	ldd	r6, Y+14	; 0x0e
    616e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6170:	8c 84       	ldd	r8, Y+12	; 0x0c
    6172:	9b 84       	ldd	r9, Y+11	; 0x0b
    6174:	aa 84       	ldd	r10, Y+10	; 0x0a
    6176:	b9 84       	ldd	r11, Y+9	; 0x09
    6178:	c8 84       	ldd	r12, Y+8	; 0x08
    617a:	df 80       	ldd	r13, Y+7	; 0x07
    617c:	ee 80       	ldd	r14, Y+6	; 0x06
    617e:	fd 80       	ldd	r15, Y+5	; 0x05
    6180:	0c 81       	ldd	r16, Y+4	; 0x04
    6182:	1b 81       	ldd	r17, Y+3	; 0x03
    6184:	aa 81       	ldd	r26, Y+2	; 0x02
    6186:	b9 81       	ldd	r27, Y+1	; 0x01
    6188:	ce 0f       	add	r28, r30
    618a:	d1 1d       	adc	r29, r1
    618c:	0f b6       	in	r0, 0x3f	; 63
    618e:	f8 94       	cli
    6190:	de bf       	out	0x3e, r29	; 62
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	cd bf       	out	0x3d, r28	; 61
    6196:	ed 01       	movw	r28, r26
    6198:	08 95       	ret

0000619a <_exit>:
    619a:	f8 94       	cli

0000619c <__stop_program>:
    619c:	ff cf       	rjmp	.-2      	; 0x619c <__stop_program>
